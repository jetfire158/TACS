Type: THING Flags: OPAQUE WIZARD
Owner: Ashen-Shugar(#617PWenACk)  Zone: *NOTHING*  Pennies: 10
Parent: *NOTHING*
Powers: 
Warnings checked: 
Created: Sun Mar 06 04:35:07 2016
Last Modification: Tue Mar 08 00:05:38 2016
AOBJ [#617]: u(fn.get-from-attack-object, %0, %1)
AUX [#617$wm`]: 
CHAR [#617]: !
COMBAT-OK [#617]: cand(hasattrp(%0,STATS`CURRENT), hasattrp(%0,STATS`CURRENT`MODE[u(curmode,%0)]), not(u(fn.is-inside-combiner, %0)), switch(type(%0), PLAYER, and(isic(%0), gt(conn(%0), -1)), THING, isic(%0), ROOM, 1, EXIT, 1, 0), not(u(fn.has-combat-flag,%0,UNCON)))
COMBAT-OK-POSSIBLY-UNCONSCIOUS [#617]: cand(hasattrp(%0,STATS`CURRENT), hasattrp(%0,STATS`CURRENT`MODE[u(curmode,%0)]), switch(type(%0), PLAYER, and(or(isic(%0), hasattrp(loc(%0), TACS)), gt(conn(%0), -1)), THING, or(isic(%0), hasattrp(loc(%0), TACS)), ROOM, 1, 0))
COU-END [#617]: max(0, floor(mul(u(fn.get-core-stat, %0, if(%1, %1, MAX), END), fdiv(sub(v(param.max-courage), u(fn.get-core-stat, %0, if(%1, %1, Current), COU)), v(param.max-courage)))))
CURMODE [#617]: get(%0/stats`current`curmode)
DB.FREE-ATTACKS [#617]: #8105
DB.WEAPON-OBJ [#617]: #4593
FN.ACTIVATE-BOOSTER [#617]: switch(u(fn.get-aux-stat, %0, Boost_Type), Ability, u(fn.activate-booster-ability, %0, %1), u(fn.activate-booster-standard, %0, %1))
FN.ACTIVATE-BOOSTER-ABILITY [#617]: [u(fn.set-aux-stat, %0, ACTIVATED, 1)] [u(msg, %1, Booster Pack [ansi(hr, name(%0))] is activated. This charge will last for 8 hours.)] [u(fn.log-booster-action, ACTIVATE, %1, %0)] [u(fn.set-aux-stat, %0, TIMER, add(secs(), 28800))] [u(fn.set-aux-stat, %0, CHARGES, dec(u(fn.get-aux-stat, %0, CHARGES)))]
FN.ACTIVATE-BOOSTER-STANDARD [#617]: [u(fn.set-aux-stat, %0, ACTIVATED, 1)] [u(msg, %1, Booster Pack [ansi(hr, name(%0))] is activated! It will use up a charge the next chance it gets!)] [u(fn.log-booster-action, ACTIVATE, %1, %0)]
FN.ACTIVATE-LENSE [#617]: [u(msg, loc(%0), Lense Artifact [ansi(hc, name(%0))] has bonded with [getname(%1)]!, 1)] [setq(E, u(fn.get-core-stat, %0, Current, Energon))] [iter(STR ACC AGL FRP VEL ARMOR, u(fn.set-mode-stat, %0, Max, 1, ##, u(fn.get-current-mode-stat, %1, ##)),,)] [iter(END LDR TECH COU INT, u(fn.set-core-stat, %0, Max, ##, u(fn.get-core-stat, %1, Current, ##)),,)] [u(fn.reset, %0)] [u(fn.set-core-stat, %0, Current, Energon, %qE)]
FN.ADD-ANALYSIS-DATA [#617]: attrib_set(%0/AUX`TEMP`ANALYSIS`%1, %2)] [attrib_set(%0/AUX`TEMP`ANALYSIS`%1`DAMAGE-BONUS, switch(u(fn.get-core-stat, %2, Current, Defense-Level), Hidden, 0,  div(u(fn.get-defense-level-attack-modifier, u(fn.build-attack-object, %2)), 5)))] [u(fn.set-the-combat-flag, %0)] [u(fn.set-the-combat-flag, %1)] [u(fn.set-the-combat-flag, %2)] [u(fn.setup-pot-info-ability, %2, ANALYZE, %1) [u(fn.deduct-energon, %2, v(PARAM.scout-cost))]]
FN.ADD-ATTACK [#617]: [@@(figure out the next attack#)][setr(0,inc(fold(#lambda/max(\%0, \%1), map(#lambda/after(\%0,ATTACK), lattr(%0/STATS`%1`MODE%2`ATTACK*)), 0)))][iter(v(list.attack-stat), attrib_set(%0/STATS`%1`MODE%2`ATTACK%q0`##, ),,)]
FN.ADD-CANCEL-EFFECT [#617]: [attrib_set(%0/AUX`PERM`CANCEL`%1, )] [u(msg, %0, Temporarily restricting the [ucstr(%1)] effect from all of your attacks.)]
FN.ADD-COMBAT-FLAG [#617]: u(fn.set-core-stat,%0,CURRENT, combat-flags, setdiff([u(fn.get-core-stat,%0,CURRENT,combat-flags)]%b[ucstr(%1)],))
FN.ADD-CRACKSHOT-DATA [#617]: [attrib_set(%0/AUX`TEMP`CRACKSHOT`%1, %2)] [attrib_set(%0/AUX`TEMP`CRACKSHOT`%1`ACCURACY-BONUS, add(15, div(get(v(TACS_DB)/PARAM.DEFENSE-OFF-[u(fn.get-core-stat, %2, Current, Defense-Level)]), 2), div(u(fn.get-core-stat, %2, Current, INT), 20)))] [u(fn.set-the-combat-flag, %0)] [u(fn.set-the-combat-flag, %1)] [u(fn.set-the-combat-flag, %2)] [u(fn.setup-pot-info-ability, %2, AIM, %1)]
FN.ADD-ENERGON [#617]: [u(fn.addto-core-stat, %0, Current, ENERGON, %1)] [u(fn.regulate-energon, %0)] [if(lte(u(fn.get-core-stat-pc, %0, ENERGON), v(PARAM.low-energon)), u(msg, %0, You are running low on energon!))]
FN.ADD-MODE [#617]: [@@(figure out the next mode#)][setr(0,inc(fold(#lambda/max(\%0, \%1), map(#lambda/right(\%0,1), lattr(%0/STATS`%1`MODE*)), 0)))][iter(v(list.mode-stat), attrib_set(%0/STATS`%1`MODE%q0`##, ),,)]
FN.ADD-SCHEMA [#617]: [attrib_set(%0/STATS`%1, )][iter(v(list.core-stat), attrib_set(%0/STATS`%1`##, ),,)]
FN.ADD-TALENT [#617]: switch(1, not(u(fn.has-schema, %0, %1)), #-44 Invalid Schema '%1', not(u(fn.validate-stat-abilities, %2)), #-45 Invalid Ability '%2', not(u(fn.is-valid-talent, %2, %3)), #-46 Invalid Talent '%3' for ability '%2, not(u(fn.has-ability-in-any-mode, %0, %2)), #-47 Target does not have '%2' ability, [attrib_set(%0/STATS`%1`TALENTS`%2`%3, 1)]1)
FN.ADDTO-CORE-STAT [#617]: [if(u(fn.is-core-stat,%2), setadd(%0, STATS`%1`%2, %3, 1), #-6 INVALID CORE STAT %2)] [if(%4, u(fn.set-core-stat, %0, %1, %2, max(0, u(fn.get-core-stat, %0, %1, %2))))]
FN.ADDTO-CURRENT-CORE-STAT [#617]: u(fn.set-core-stat, %0, Current, %1, max(0, min(add(u(fn.get-core-stat, %0, Current, %1), %2), u(fn.get-core-stat, %0, MAX, %1))))
FN.ADDTO-CURRENT-MODE-STAT [#617]: u(fn.set-mode-stat, %0, Current, %1, %2, max(0, min(add(u(fn.get-mode-stat, %0, Current, %1, %2), %3), u(fn.get-mode-stat, %0, MAX, %1, %2))))
FN.ADDTO-MODE-STAT [#617]: [if(u(fn.is-mode-stat,%3), setadd(%0, STATS`%1`MODE%2`%3, %4, 1), #-14 INVALID MODE STAT %3)] [if(%5, u(fn.set-mode-stat, %0, %1, %2, %3, max(0, u(fn.get-mode-stat, %0, %1, %2, %3))))]
FN.ALL-TARGETS-OK [#617]: lmath(and, map(#lambda/strmatch(OK, last(\%0, ^)), %0, |, %b))
FN.ARMOROP [#617]: [u(msg, %0, [getname2(%1)] works on optimizing [getname2(%0)]'s armor., 1)] [u(fn.addto-mode-stat, %0, Current, u(curmode, %0), AGL, mul(-1, v(PARAM.armor-op-agility-penalty)), 1)] [u(fn.addto-mode-stat, %0, Current, u(curmode, %0), ARMOR, add(v(PARAM.ARMOR-OP-ARMOR-BONUS), u(fn.calculate-armorop-bonus, %1)))] [u(fn.add-combat-flag, %0, ARMOR-OP)] [u(getobj(TIMETRACK)/fn.set-time-limit, ARMOR-OPTIMIZE, %0)]
FN.ATTACK [#617]: if(u(fn.is-hit, %0), u(fn.attack-hit, %0), u(fn.attack-miss, %0))
FN.ATTACK-COMMAND-POSTPROCESS [#617]: setq(V, u(AOBJ, %0, target))] [setq(W, u(AOBJ, %0, attacker))] [@@(ammo check)] [u(fn.check-ammo, %0)] [@@(Check for hidden defense level)] [if(strmatch(u(fn.get-core-stat, %qW, Current, Defense-Level), Hidden), [u(fn.set-core-stat, %qW, Current, Defense-Level, Neutral)] [u(msg, %qW, Your defense level has been reset to Neutral.)])] [@@(check repeat)] [u(fn.check-repeat, u(AOBJ, %0, attacker))] [u(fn.check-recoil, %0)] [@@(Check FEED)] [u(fn.check-feed, %0)] [@@(Check FAULTY, RISKY, and STUCK weapons)] [u(fn.check-faulty, %0)] [u(fn.check-risky, %0)] [u(fn.check-stuck, %0)] [@@(Check HEAVYness)] [u(fn.check-heavy, %0)] [u(fn.check-sabotage, %0)]
FN.ATTACK-DEFENSIVE-SCORE [#617]: round(add(u(fn.get-current-mode-stat, u(AOBJ, %0, target), AGL), u(fn.get-defense-level-defense-modifier, %0), u(fn.get-agility-bonus, %0), u(fn.get-CP-defense-modifier, %0), u(fn.get-artifact-defense-bonus, %0), u(fn.get-velocity-dodge-bonus, %0), u(fn.get-support-bonus, u(AOBJ, %0, target), AGL), u(fn.get-vehicle-defend-bonus, u(AOBJ, %0, target))), 0)
FN.ATTACK-HIT [#617]: [if(%1,, [u(fn.display-special-attack-messages, %0)] [u(msg, u(AOBJ, %0, attacker), u(fn.display-attack-object, %0, HIT), 1)])] [u(fn.attack-postprocess, %0, hit)] [setq(D, u(fn.calculate-damage, %0))] [@@(Get Forcefield Results)] [setq(H, u(fn.get-ff-protection, %0, %qD))] [switch(%qH, #-1, [@@(do nozzing!)], setq(D, after(%qH, ^)))] [if(setr(X, u(fn.get-activated-booster-by-type, u(AOBJ, %0, target), SHIELD)), setq(X, u(fn.use-charge, %qX, %0, %qD)))] [u(fn.do-damage, %0, %qD)] [u(fn.check-courage, %0)] [u(fn.check-stat-damage, %0, %qD)] [if(and(eq(%qD, 0), u(fn.has-combat-flag, u(AOBJ, %0, target), FF)), @@(do nothing), u(fn.do-effects, %0, %qD))] [u(fn.secondary-effects-check, %0)] [u(fn.knockout-check, %0, %qD)] [@@(check for used analysis data)] [if(u(fn.has-analysis-data, u(AOBJ, %0, attacker), u(AOBJ, %0, target)), u(fn.remove-analysis-data, u(AOBJ, %0, attacker), u(AOBJ, %0, target)))] [@@(check for used crackshot data)] [if(u(fn.has-crackshot-data, u(AOBJ, %0, attacker), u(AOBJ, %0, target)), u(fn.remove-crackshot-data, u(AOBJ, %0, attacker), u(AOBJ, %0, target)))] [if(u(fn.is-combiner, u(AOBJ, %0, target)), u(fn.combiner-stress-check, u(AOBJ, %0, target)))] [u(fn.update-sql-log, %0, hit, %qD)] [trigger(u(AOBJ, %0, target), adamage, u(AOBJ, %0, attacker), u(AOBJ, %0, target), [u(AOBJ, %0, attack_type)]/[u(AOBJ, %0, damage_level)], %qD, injured(u(AOBJ, %0, target)), u(fn.get-core-stat, u(AOBJ, %0, target), Current, END))] [u(fn.set-aux-stat, u(AOBJ, %0, attacker), Recent_Hit, 1)]
FN.ATTACK-MISS [#617]: [u(fn.display-special-attack-messages, %0)] [u(msg, u(AOBJ, %0, attacker), u(fn.display-attack-object, %0, MISS), 1)] [u(fn.attack-postprocess, %0, miss)] [u(fn.update-sql-log, %0, miss, 0)] [trigger(u(AOBJ, %0, target), aevade, u(AOBJ, %0, attacker), u(AOBJ, %0, target), [u(AOBJ, %0, attack_type)]/[u(AOBJ, %0, damage_level)], 0, injured(u(AOBJ, %0, target)), u(fn.get-core-stat, u(AOBJ, %0, target), Current, END))]
FN.ATTACK-OFFENSIVE-SCORE [#617]: round(add(u(fn.get-current-mode-stat, u(AOBJ, %0, attacker), ACC), u(fn.get-tohit-size-modifier, %0), u(fn.get-defense-level-attack-modifier, %0), u(fn.get-accuracy-bonus, %0), u(fn.get-CP-attack-modifier, %0), u(fn.get-artifact-attack-bonus, %0), u(fn.get-support-bonus, u(AOBJ, %0, attacker), ACC), u(fn.get-vehicle-attack-bonus, u(AOBJ, %0, attacker))), 0)
FN.ATTACK-POSTPROCESS [#617]: [@@(save some useful registers)] [setq(V, u(AOBJ, %0, target))] [setq(W, u(AOBJ, %0, attacker))] [@@(Victim)] [iter(STUNNED HIT-OK CRIPPLED SAPPED SUPPORTED-AGL LOCKON DIZZY MODE-LOCKED, u(fn.remove-combat-flag, %qV, ##),,)] [if(u(fn.has-combat-flag, %qV, CRIPPLED2), [u(fn.remove-combat-flag, %qV, CRIPPLED2)] [u(fn.add-combat-flag, %qV, CRIPPLED)])] [@@(trigger D-level costs)] [u(fn.check-defense-level, %qV)] [@@(Attacker / Winner)] [iter(FEAR AIMING CONFUSED BLINDED SUPPORTED-ACC UNNERVE, u(fn.remove-combat-flag, %qW, ##),,)] [if(u(fn.has-combat-flag, %qW, BLINDED2), [u(fn.remove-combat-flag, %qW, BLINDED2)] [u(fn.add-combat-flag, %qW, BLINDED)])] [if(u(fn.has-combat-flag, %qV,MODE-LOCKED2), [u(fn.remove-combat-flag, %qV, MODE-LOCKED2)] [u(fn.add-combat-flag, %qV, MODE-LOCKED)])] [@@(ONLY clear support we have used)] [switch(u(AOBJ, %0, attack_type), *MELEE, u(fn.remove-combat-flag, %qW, SUPPORTED-STR), *RANGED, u(fn.remove-combat-flag, %qW, SUPPORTED-FRP))] [@@(SET IN-COMBAT FLAG)] [switch(%qV, %qW, [@@(no points for attacking yourself)], [u(fn.set-the-combat-flag, %qV)] [u(fn.set-the-combat-flag, %qW)])] [@@(self destruct check)] [if(and(u(fn.has-effect, %0, SELF-DESTRUCT), not(u(fn.is-in-vault, u(AOBJ, %0, attack_source)))), [u(msg, u(AOBJ, %0, attacker), [getname2(u(AOBJ, %0, attacker))]'s [getname2(u(AOBJ, %0, attack_source))] is destroyed!, 1)] [tel(u(AOBJ, %0, attack_source), getobj(VAULT))], @@(do nothing))] [u(fn.send-combat-spam, %0)] [u(fn.setup-pot-info, %0, %1)] [u(fn.local-attack-postprocess, %0, %1)] [if(and(gt(words(u(AOBJ, %0, chain_list)), 1), strmatch(u(AOBJ, %0, Target), first(u(AOBJ, %0, chain_list))), strmatch(%1, hit)), u(FN.ATTACK, u(fn.modify-attack-object-multi-pipe, %0, target=[first(rest(u(AOBJ, %0, chain_list)))]|chain_list=[rest(u(AOBJ, %0, chain_list))])))]
FN.ATTACK-SURVEY [#617]: [setq(0, map(fn.attack-survey-helper, %0))][setq(1, words(%q0))][iter(sortkey(#lambda/mul(-1, last(\%0, ^)), map(#lambda/strcat(\%0,^,words(matchall(%q0, \%0))), get(v(TACS_DB)/list.protection))),[ljust(before(##,^), 12)] [round(mul(100, fdiv(after(##,^), words(%q0))), 2)]%%,,%r)]
FN.ATTACK-SURVEY-HELPER [#617]: map(#lambda/u(fn.get-attack-attrib-stat, \%0, damage-type), u(fn.get-all-attack-attribs, %0, MAX))
FN.AUTO-DEACTIVATE-ABILITY-BOOSTER [#617]: [u(msg, u(fn.get-aux-stat, %0, Owner), The charge on your [ansi(h, name(%0))] ability booster has timed out.)] [u(fn.set-aux-stat, %0, ACTIVATED, 0)]
FN.AUTO-REFUEL [#617]: [u(msg, %0, [getname2(%1)] refuels [getname2(%0)]'s energon reserves., 1)] [u(fn.set-core-stat, %0, current, energon, u(fn.get-core-stat, %0, Max, Energon))]
FN.BARCOLOR [#617]: switch(%0,<101,[u(fn.barcolornorm,%0,%1)],<201,[if([gte([div([setr(0,[sub(%0,100)])],5)],%1)],[ansi(hb,|)],[u(fn.barcolornorm,%0,%1)])],[if([gte([div([setr(0,[sub(%0,200)])],5)],%1)],[ansi(hw,|)],[ansi(hb,|)])])
FN.BARCOLORNORM [#617]: if([gte([div(%0,5)],%1)],[ansi([switch(%1,<7,hr,<14,hy,hg)],|)],%b)
FN.BOX-MULLER-TRANSFORM [#617]: mul(sqrt(mul(-2, ln(u(fn.uniform-rng)))), cos(mul(2, pi(), u(fn.uniform-rng))))
FN.BUILD-ATTACK-OBJECT [#617]: ATTACK-OBJ|%0|%1|%2|[if(u(fn.is-freebie, %3), [get(%3/%4`NAME)]|[if(%6, %6, u(fn.get-custom-attack-name, %0, get(%3/%4`NAME)))], |[if(%6, %6, get(%3/%4`NAME))])]|[get(%3/%4`ATTACK-TYPE)]|[get(%3/%4`DAMAGE-LEVEL)]|[get(%3/%4`DAMAGE-TYPE)]|[get(%3/%4`EFFECT)]|[get(%3/%4`AMMO)]|[get(%3/%4`AMMO_TYPE)]|[max(%5,1)]|%4|%3|%7|%8
FN.CALC-CHAR-COST [#617]: add(u(fn.char-cost-calc-core-stats, %0, %1), lmath(add, map(#lambda/u(fn.char-cost-calc-mode, %0, %1, \%0), u(fn.get-modes, %0, %1))), u(fn.char-cost-calc-attacks, %0, %1), 0[@@(u(fn.char-cost-calc-all-protections, %0, %1))], u(fn.char-cost-calc-all-abilities, %0, %1), u(fn.char-cost-calc-skills, %0, %1), u(fn.char-cost-calc-extras, %0, %1))
FN.CALC-COMBINER-STAT-MEMBER-TOTAL [#617]: lmath(add, map(#lambda/u(fn.get-either-stat, \%0, %1, %2, 1), get(%0/gestalt-members)))
FN.CALC-COMBINER-STAT-PERCENTAGE [#617]: fdiv(u(fn.get-either-stat, %0, MAX, %1, 1), u(fn.calc-combiner-stat-member-total, %0, MAX, %1))
FN.CALC-GET-HIT-LIKELIHOOD [#617]: u(fn.normal-cdf, u(fn.convert-stats-to-normal-variate, add(v(PARAM.AVERAGE-ACC), mul(v(PARAM.size-hit), sub(v(PARAM.AVERAGE-SIZE), u(fn.get-mode-stat, %0, %1, %2, SIZE)))), u(fn.get-mode-stat, %0, %1, %2, AGL)), 0, v(param.NORMAL-DIST-STDDEV))
FN.CALC-PERSONAL-AVERAGE-DAMAGE-TAKEN [#617]: add(v(PARAM.GLOBAL-AVERAGE-DAMAGE), mul(v(PARAM.ARMOR-BONUS), u(fn.get-mode-stat, %0, %1, %2, ARMOR)))
FN.CALC-REGAINED-ENERGON-FROM-PASS [#617]: mul(if(or(u(fn.has-energon-booster-bonus, %0), u(%qZ/fn.has-ability, %0, Generate)), 2, 1),add(v(PARAM.BASE-ENERGON-CHARGE-AMOUNT), div(get(v(TACS_DB)/PARAM.DEFENSE-OFF-[u(fn.get-core-stat, %0, Current, Defense-Level)]), 10), div(u(fn.get-core-stat, %0, Current, TECH), 10), if(u(%qZ/fn.has-ability, %0, Charge),4,0)))
FN.CALC-STRIKE-LIKELIHOOD [#617]: u(fn.normal-cdf, u(fn.convert-stats-to-normal-variate, add(u(fn.get-mode-stat, %0, %1, %2, ACC), mul(v(PARAM.size-hit), sub(u(fn.get-mode-stat, %0, %1, %2, SIZE), v(PARAM.AVERAGE-SIZE)))), v(PARAM.AVERAGE-ACC)), 0, v(param.NORMAL-DIST-STDDEV))
FN.CALCULATE-ARMOR-BONUS [#617]: round(inc(mul(v(PARAM.ARMOR-BONUS), %0)), 0)
FN.CALCULATE-ARMOR-DAMAGING [#617]: mul(-1, add(v(PARAM.%1-BASE), rand(inc(u(AOBJ, %0, damage_level)))))
FN.CALCULATE-ARMOROP-BONUS [#617]: switch(u(fn.get-core-stat, %0, Current, TECH), >100, 5, >90, 4, >80, 3, >70, 2, >60, 1, 0)
FN.CALCULATE-DAMAGE [#617]: if(gt(u(AOBJ, %0, damage_level), 0), u(fn.randomize-damage, max(floor(add(mul(u(fn.get-base-damage, %0), u(fn.get-area-multiplier, %0)), u(fn.get-damage-size-modifier, %0), u(fn.get-armor-bonus, %0), u(fn.get-analyze-damage-bonus, %0), u(fn.get-cp-damage-bonus, %0), u(fn.get-cp-armor-bonus, %0), u(fn.get-get-critical-hit-bonus, %0), u(fn.get-artifact-damage-bonus, %0), u(fn.get-sneak-attack-damage-bonus, %0), u(fn.get-artifact-armor-bonus, %0), u(fn.get-vehicle-damage-bonus, u(AOBJ, %0, attacker)))), u(AOBJ, %0, damage_level)), %1), 0)
FN.CALCULATE-RESERVE-TANK-SIZE [#617]: add(v(PARAM.BASE-RESERVE-TANK), div(u(fn.get-core-stat, %0, Current, TECH), 2))
FN.CALCULATE-STAT-DAMAGING [#617]: mul(-1, add(v(PARAM.%1-BASE), rand(inc(u(AOBJ, %0, damage_level)))))
FN.CAN-ATTACK [#617]: switch(first(squish(iter(STUN FROZEN CLOAKED SNEAKING HIDING, u(fn.can-attack-##, %0),,|), |), |),,1^A-OK, #$)
FN.CAN-ATTACK-CLOAKED [#617]: if(u(fn.has-combat-flag, %0, CLOAKED), 0^You need to un-cloak first.)
FN.CAN-ATTACK-FROZEN [#617]: if(u(fn.has-combat-flag, %0, FROZEN), 0^You are frozen solid!!)
FN.CAN-ATTACK-HIDING [#617]: if(u(fn.has-combat-flag, %0, HIDING), 0^You need to un-hide first.)
FN.CAN-ATTACK-SNEAKING [#617]: if(u(fn.has-combat-flag, %0, SNEAKING), 0^You need to stop sneaking first.)
FN.CAN-ATTACK-STUN [#617]: if(u(fn.has-combat-flag, %0, STUNNED), 0^You are stunned!)
FN.CAN-EVADE [#617]: if(strmatch(u(fn.get-core-stat, u(AOBJ, %0, TARGET), Current, Defense-Level), Evade), if(gte(u(fn.get-core-stat, u(AOBJ, %0, TARGET), CURRENT, Energon), u(fn.get-evade-dodge-cost, %0)), 1[u(fn.do-evade-dodge, %0)], 0[u(msg, u(AOBJ, %0, TARGET), You don't have enough energon to teleport away from this attack!)]), [@@(no attempt)]0)
FN.CAN-INIT [#617]: cor(orflags(%0, WrJ), hasflag(%0, COMBAT_INIT))
FN.CAN-USE [#617]: if(strmatch(%0, %1), 1, switch(get(%1/AUX`PERM`ATTACKLOCK), ANYONE, 1, ALLIES, or(isally(%0, faction(%1)), hasfaction(%0, faction(%1))), FACTION, hasfaction(%0, faction(%1)), OWNER, switch(type(%1), PLAYER, strmatch(%0, %1), or(strmatch(%0, get(%1/AUX`PERM`OWNER)), strmatch(get(%0/pilot), get(%1/AUX`PERM`OWNER)))), LIST, match(get(%1/AUX`PERM`ATTACKLOCK-LIST), %0), 1))
FN.CAN-USE-DEFENSE-LEVEL [#617]: u(fn.defense-level-lock-%1, %0)
FN.CAPTURE-FIGHT [#617]: [u(msg, %0, [getname(%0)] challenges [getname(%3)] for control of capture point [ansi(h,%2)] - [ansi(h,u(fn.get-cp-stat, %1, %2, NAME))]., 1)] [if(u(fn.compare-stats, setr(1, u(fn.get-either-stat, %0, current, u(fn.get-cp-stat, %1, %2, FIGHT-FACTOR))), setr(2, add(mul(u(fn.get-cp-stat, %1, %2, HOLDING-BONUS), u(fn.get-cp-stat, %1, %2, ROUNDS-HELD)), u(fn.get-either-stat, %3, current, u(fn.get-cp-stat, %1, %2, FIGHT-FACTOR))))), [u(fn.capture-win, %0, %1, %2, %3)] [u(fn.capture-uncontested, %0, %1, %2)] [u(fn.setup-pot-info-ability, %0, CAP-WIN, %2)], [u(fn.capture-win, %3, %1, %2, %0)] [u(fn.setup-pot-info-ability, %0, CAP-LOSE, %2)])]
FN.CAPTURE-INCREMENT [#617]: [u(msg, %0, [getname(%0)] remains in control of capture point [ansi(h,%2)] - [ansi(h,u(fn.get-cp-stat, %1, %2, NAME))]., 1)] [u(fn.set-cp-stat, %1, %2, ROUNDS-HELD, inc(u(fn.get-cp-stat, %1, %2, ROUNDS-HELD)))] [u(fn.setup-pot-info-ability, %0, CAP-SECURE, %2)]
FN.CAPTURE-UNCONTESTED [#617]: [u(msg, %0, [getname(%0)] takes control of capture point [ansi(h,%2)] - [ansi(h,u(fn.get-cp-stat, %1, %2, NAME))]., 1)] [u(fn.set-cp-stat, %1, %2, CONTROLLED-BY, %0)] [u(fn.set-cp-stat, %1, %2, ROUNDS-HELD, 0)] [u(fn.setup-pot-info-ability, %0, CAP-TAKE, %2)]
FN.CAPTURE-WIN [#617]: [u(msg, %0, [getname(%0)] defeats [getname(%3)] [u(fn.get-capture-win-text, u(fn.get-cp-stat, %1, %2, FIGHT-FACTOR))]!, 1)]
FN.CHAR-COST-ALT-ARMOR [#617]: if(lte(%0, %1), %0, add(%1, mul(2, sub(%0, 5))))
FN.CHAR-COST-ARMOR [#617]: fdiv(if(or(u(fn.is-species, %0, Transformer Junkion Vehicle), and(u(fn.is-species, %0, Human Alt-Human), gte(%2, 2))), u(fn.char-cost-stat, %0, %1, Armor, %2), 0),2)
FN.CHAR-COST-ARMOR-HUMAN [#617]: [setq(armor, u(fn.char-cost-stat, %0, %1, Armor, %2))][u(fn.char-cost-alt-armor, %q<armor>, 5)]
FN.CHAR-COST-CALC-ABILITIES [#617]: lmath(add, map(#lambda/u(fn.char-cost-calc-attack-helper, ability, \%0), u(fn.get-mode-stat, %0, %1, %2, Abilities)))
FN.CHAR-COST-CALC-ALL-ABILITIES [#617]: lmath(add, map(#lambda/u(fn.char-cost-calc-abilities, %0, %1, \%0), u(fn.get-modes, %0, %1)))
FN.CHAR-COST-CALC-ALL-PROTECTIONS [#617]: lmath(add, map(#lambda/u(fn.char-cost-calc-protections, %0, %1, \%0), u(fn.get-modes, %0, %1)))
FN.CHAR-COST-CALC-ALT-STATS [#617]: max(0, lmath(add, map(#lambda/sub(u(fn.char-cost-stat, %0, %1, \%0, %2), u(fn.char-cost-stat, %0, %1, \%0, 1)), ACC AGL STR FRP)))
FN.CHAR-COST-CALC-ATTACK [#617]: add(u(fn.char-cost-calc-attack-basic, %0), ceil(u(fn.char-cost-calc-attack-ammo, %0)))
FN.CHAR-COST-CALC-ATTACK-AMMO [#617]: if(match(u(fn.get-attack-attrib-stat, %0, Effect), Ammo), mul(u(fn.char-cost-calc-attack-basic, %0), switch(u(fn.get-bin-size-identifier, %0), SHARED, -0.5, NORMAL, 0, HALF, -0.25, DOUBLE, 1)), 0)
FN.CHAR-COST-CALC-ATTACK-BASE-AMMO [#617]: max(0, sub(10, u(fn.char-cost-calc-attack-basic, %0)))
FN.CHAR-COST-CALC-ATTACK-BASIC [#617]: add(u(fn.get-attack-attrib-stat, %0, damage-level), u(fn.char-cost-calc-attack-helper, Attack-Type, u(fn.get-attack-attrib-stat, %0, attack-type)), dec(words(u(fn.get-attack-attrib-stat, %0, damage-type))), u(fn.char-cost-calc-attack-effects, %0))
FN.CHAR-COST-CALC-ATTACK-EFFECTS [#617]: lmath(add, map(#lambda/u(fn.char-cost-calc-attack-helper, Effect, \%0), u(fn.get-attack-attrib-stat, %0, effect)))
FN.CHAR-COST-CALC-ATTACK-HELPER [#617]: index(get(v(TACS_DB)/INFO_%0_%1), ^, 2, 1)
FN.CHAR-COST-CALC-ATTACKS [#617]: lmath(add, map(#lambda/u(fn.char-cost-calc-attack, \%0), u(fn.get-all-attack-attribs, %0, %1)))
FN.CHAR-COST-CALC-CORE-STATS [#617]: lmath(add, map(#lambda/u(fn.char-cost-stat, %0, %1, \%0), INT LDR TECH COU END))
FN.CHAR-COST-CALC-ENERGON [#617]: [max(10, add(50, lmath(add, [setq(3,)][iter(u(fn.get-all-attack-attribs, %0, %1), if(u(fn.get-attack-attrib-stat, ##, ammo_type), if(match(%q3, u(fn.get-attack-attrib-stat, ##, ammo_type),|), 0[@@(skip me)], [switch(u(fn.get-bin-size-identifier, ##), SHARED, 0, STANDARD, -10, HALF, -5, DOUBLE, -20)][setq(3, setunion(%q3, u(fn.get-attack-attrib-stat, ##, ammo_type), |))]), 0),,|)], |)))]
FN.CHAR-COST-CALC-EXTRAS [#617]: add(if(hasfaction(%0, Decepticon), -2, 0), if(get(%0/SEEKER), -8, 0), if(get(%0/SWEEP), -6, 0), if(get(%0/REINFORCEDISCOUNT), -2, if(get(%0/RECALIBRATEDISCOUNT), -2, if(get(%0/DIVEDISCOUNT), -1, if(get(%0/FLIGHTDISCOUNT), -1, if(get(%0/LR_RADIODISCOUNT), -1, if(get(%0/PILOTDISCOUNT), -1, if(get(%0/SPACE-WALKDISCOUNT), -1, if(get(%0/INSPIREDISCOUNT), -1, if(get(%0/SPACE-WALKDISCOUNT), -1, if(get(%0/CHARGEDISCOUNT), -2, if(get(%0/CRACKSHOTDISCOUNT), -2, if(get(%0/OPERATORDISCOUNT), -2, if(get(%0/HEALDISCOUNT), -2, if(get(%0/REFUELDISCOUNT), -2, if(get(%0/RESUPPLYDISCOUNT), -2, if(get(%0/SPACE-FLIGHTDISCOUNT), -2, if(get(%0/REPAIRDISCOUNT), -2, if(get(%0/DEMOLITIONDISCOUNT), -2, if(get(%0/REPAIRDISCOUNT), -2, if(get(%0/SCOUTDISCOUNT), -2, if(get(%0/HIDEDISCOUNT), -2, if(get(%0/ENHANCED_SENSESDISCOUNT), -3, if(get(%0/FORCEFIELDDISCOUNT), -3, if(get(%0/HOLOGRAMSDISCOUNT), -3, if(get(%0/WEAPONSMITHDISCOUNT), -3, if(get(%0/INTERCEPTIONDISCOUNT), -4, if(get(%0/RADARDISCOUNT), -4, if(get(%0/SNEAKDISCOUNT), -4, if(get(%0/EVADEDISCOUNT), -4, if(get(%0/CLOAKDISCOUNT), -5, 0))
FN.CHAR-COST-CALC-HUMAN-ALT-STATS [#617]: max(0, lmath(add, map(#lambda/sub(u(fn.char-cost-stat, %0, %1, \%0, %2), u(fn.char-cost-stat, %0, %1, \%0, 2)), ACC AGL STR FRP)))
FN.CHAR-COST-CALC-MODE [#617]: [add(u(fn.char-cost-calc-[u(fn.char-cost-get-mode-type, %0, %1, %2)]-stats, %0, %1, %2), u(fn.char-cost-size, %0, %1, %2), u(fn.char-cost-armor, %0, %1, %2), u(fn.char-cost-vel, %0, %1, %2))]
FN.CHAR-COST-CALC-PRIMARY-STATS [#617]: lmath(add, map(#lambda/u(fn.char-cost-stat, %0, %1, \%0, %2), ACC AGL STR FRP))
FN.CHAR-COST-CALC-PROTECTION [#617]: mul(u(fn.char-cost-calc-attack-helper, protection, %3), u(fn.get-protection, %0, %1, %2, %3))
FN.CHAR-COST-CALC-PROTECTIONS [#617]: lmath(add, map(#lambda/u(fn.char-cost-calc-protection, %0, %1, %2, \%0), u(fn.list-protection-types, %0, %1, %2)))
FN.CHAR-COST-CALC-SKILLS [#617]: max(0, div(sub(words(u(fn.get-core-stat, %0, %1, Skills), |), 3), 3))
FN.CHAR-COST-DISPLAY-ABILITIES [#617]: [iter(u(fn.get-mode-stat, %0, %1, %2, Abilities), ## \([u(fn.char-cost-calc-attack-helper, ability, ##)]\),,%b+%b)] = [u(fn.char-cost-calc-abilities, %0, %1, %2)]
FN.CHAR-COST-DISPLAY-ALL-ABILITIES [#617]: iter(u(fn.get-modes, %0, %1), %r[ansi(h,Mode ##)]: [u(fn.char-cost-display-abilities, %0, %1, ##)],,)
FN.CHAR-COST-DISPLAY-ALL-PROTECTIONS [#617]: iter(u(fn.get-modes, %0, %1), if(u(fn.list-protection-types, %0, %1, ##), %r[ansi(h,Mode ##)]: [u(fn.char-cost-display-protections, %0, %1, ##)]),,)
FN.CHAR-COST-DISPLAY-ALT-STATS [#617]: iter(ACC AGL STR FRP, ## \([setq(2, sub(u(fn.char-cost-stat, %0, %1, ##, %2), u(fn.char-cost-stat, %0, %1, ##, 1)))][switch(%q2,>0,+,<0,)]%q2\),,%b+%b)
FN.CHAR-COST-DISPLAY-ATTACK [#617]: "[u(fn.get-attack-attrib-stat, %0, Name)]" [ansi(h,\([u(fn.char-cost-calc-attack-basic, %0)] [switch(u(fn.char-cost-calc-attack-ammo, %0), <0, -%b, +%b)][abs(ceil(u(fn.char-cost-calc-attack-ammo, %0)))] = [u(fn.char-cost-calc-attack, %0)]\))]%rLevel [ansi(hc, u(fn.get-attack-attrib-stat, %0, damage-level))] [capstr(lcstr(u(fn.get-attack-attrib-stat, %0, attack-type)))], [ucstr(u(fn.get-attack-attrib-stat, %0, damage-type))][if(setr(2, u(fn.get-attack-attrib-stat, %0, Effect)),\, [ucstr(%q2)])][if(match(%q2, AMMO),%rAmmunition: [u(fn.get-attack-attrib-stat, %0, max_ammo)] "[u(fn.get-attack-attrib-stat, %0, ammo_type)]" Base Bin is [ansi(h, u(fn.char-cost-calc-attack-base-ammo, %0))] x [ansi(hc,ucstr(u(fn.get-bin-size-identifier, %0)))] = [u(fn.char-cost-calc-attack-ammo, %0)] [if(neq(u(fn.char-cost-calc-attack-ammo, %0), ceil(u(fn.char-cost-calc-attack-ammo, %0))), \[[ceil(u(fn.char-cost-calc-attack-ammo, %0))]\])] CP)]
FN.CHAR-COST-DISPLAY-ATTACKS [#617]: [setq(M,0)][iter(u(fn.get-all-attack-attribs, %0, %1), [switch(u(fn.get-modenum-from-attack-attrib, ##),%qM,,[ansi(h,Mode #$)][setq(M,#$)]%r)][u(fn.char-cost-display-attack, ##)],,%r%r)
FN.CHAR-COST-DISPLAY-CORE-STATS [#617]: iter(INT LDR TECH COU END, ## \([u(fn.char-cost-stat, %0, %1, ##)]\),,%b+%b)
FN.CHAR-COST-DISPLAY-ENERGON [#617]: With [ansi(h,setr(2, words(u(fn.get-all-ammo-levels, %0, %1), |)))] ammo-type[switch(%q2,1,,s)]\, Energon should be [ansi(hc, u(fn.char-cost-calc-energon, %0, %1))] \(Current: [u(fn.get-core-stat, %0, %1, Energon)]\)
FN.CHAR-COST-DISPLAY-EXTRAS [#617]: itemize(squish([if(hasfaction(%0, Decepticon), Deception Flight \(-2\))]|[if(get(%0/SEEKER), Seeker Package \(-8\))]|[if(get(%0/SWEEP), Sweep Package \(-6\))]|[if(get(%0/REINFORCEDISCOUNT), Reinforce Discount \(-2\))]|[if(get(%0/RECALIBRATEDISCOUNT), Recalibrate Discount \(-2\))]|[if(get(%0/DIVEDISCOUNT), Dive Discount \(-1\))]|[if(get(%0/FLIGHTDISCOUNT), Flight Discount \(-1\))]|[if(get(%0/LR_RADIODISCOUNT), LR_Radio Discount \(-1\))]|[if(get(%0/PILOTDISCOUNT), Pilot Discount \(-1\))]|[if(get(%0/SPACE-WALKDISCOUNT), Space-Walk Discount \(-1\))]|[if(get(%0/INSPIREDISCOUNT), Inspire Discount \(-1\))]|[if(get(%0/CHARGEDISCOUNT), Charge Discount \(-2\))]|[if(get(%0/CRACKSHOTDISCOUNT), Crackshot Discount \(-2\))]|[if(get(%0/OPERATORDISCOUNT), Operator Discount \(-2\))]|[if(get(%0/HEALDISCOUNT), Heal Discount \(-2\))]|[if(get(%0/REFUELDISCOUNT), Refuel Discount \(-2\))]|[if(get(%0/RESUPPLYDISCOUNT), Resupply Discount \(-2\))]|[if(get(%0/SPACE-FLIGHTDISCOUNT), Space-Flight Discount \(-2\))]|[if(get(%0/CONSTRUCTIONDISCOUNT), Construction Discount \(-2\))]|[if(get(%0/DEMOLITIONDISCOUNT), Demolition Discount \(-2\))]|[if(get(%0/REPAIRDISCOUNT), Repair Discount \(-2\))]|[if(get(%0/SCOUTDISCOUNT), Scout Discount \(-2\))]|[if(get(%0/HIDEDISCOUNT), HIDE Discount \(-2\))]|[if(get(%0/ ENHANCED_SENSESDISCOUNT), Enhanced_Senses Discount \(-3\))]|[if(get(%0/FORCEFIELDDISCOUNT), Forcefield Discount \(-3\))]|[if(get(%0/HOLOGRAMSDISCOUNT), Holograms Discount \(-3\))]|[if(get(%0/WEAPONSMITHDISCOUNT), Weaponsmith Discount \(-3\))]|[if(get(%0/INTERCEPTIONDISCOUNT), Interception Discount \(-3\))]|[if(get(%0/RADARDISCOUNT), Radar Discount \(-3\))]|[if(get(%0/SNEAKDISCOUNT), Sneak Discount \(-3\))]|[if(get(%0/EVADEDISCOUNT), Evade Discount \(-3\))]|[if(get(%0/CLOAKDISCOUNT), Cloak Discount \(-3\))], |), |)
FN.CHAR-COST-DISPLAY-HUMAN-ALT-STATS [#617]: iter(ACC AGL STR FRP, ## \([setq(2, sub(u(fn.char-cost-stat, %0, %1, ##, %2), u(fn.char-cost-stat, %0, %1, ##, 2)))][switch(%q2,>0,+,<0,)]%q2\),,%b+%b)
FN.CHAR-COST-DISPLAY-MODE [#617]: [ansi(h,Stats:)] [u(fn.char-cost-display-[u(fn.char-cost-get-mode-type, %0, %1, %2)]-stats, %0, %1, %2)] = [u(fn.char-cost-calc-[u(fn.char-cost-get-mode-type, %0, %1, %2)]-stats, %0, %1, %2)]%r[ansi(h,Size:)] [u(fn.get-mode-stat, %0, %1, %2, SIZE)] \([u(fn.char-cost-size, %0, %1, %2)]\)%t [ansi(h,Armor:)] [u(fn.get-mode-stat, %0, %1, %2, ARMOR)] \([u(fn.char-cost-armor, %0, %1, %2)]\)%t [ansi(h,Velocity:)] [u(fn.get-mode-stat, %0, %1, %2, VEL)] \([u(fn.char-cost-vel, %0, %1, %2)]\)
FN.CHAR-COST-DISPLAY-PRIMARY-STATS [#617]: iter(ACC AGL STR FRP, ## \([u(fn.char-cost-stat, %0, %1, ##, %2)]\),,%b+%b)
FN.CHAR-COST-DISPLAY-PROTECTION [#617]: [ansi(switch(u(fn.char-cost-calc-attack-helper, protection, %3), 1, y, 2, hy, 3, hr, hm), ucstr(%3))][setq(2, u(fn.get-protection, %0, %1, %2, %3))] \([switch(%q2,>0,+)]%q2\)
FN.CHAR-COST-DISPLAY-PROTECTIONS [#617]: [iter(u(fn.list-protection-types, %0, %1, %2), u(fn.char-cost-display-protection, %0, %1, %2, ##),,%b+%b)] = [u(fn.char-cost-calc-protections, %0, %1, %2)]
FN.CHAR-COST-DISPLAY-SKILLS [#617]: [words(u(fn.get-core-stat, %0, %1, Skills), |)] Skills
FN.CHAR-COST-GET-MODE-TYPE [#617]: if(t(u(fn.is-species, %0, ALT-HUMAN HUMAN)), switch(%2, 1, primary, 2, primary, human-alt), switch(%2,1,primary,alt))
FN.CHAR-COST-SIZE [#617]: [setq(0, u(fn.get-mode-stat, %0, %1, %2, Size))][if(or(u(fn.is-species, %0, Transformer Junkion), and(u(fn.is-species, %0, Alt-Human Human), gte(%2, 2))), switch(%q0, 5, 0, <5, -[sub(5, %q0)], mul(sub(%q0, 5), 2)), 0)]
FN.CHAR-COST-STAT [#617]: div(u(fn.get-either-stat, %0, %1, %2, %3), if(u(fn.is-finalized, %0), 10, 1))
FN.CHAR-COST-VEL [#617]: fdiv(if(or(u(fn.is-species, %0, Transformer Junkion Vehicle), and(u(fn.is-species, %0, Human Alt-Human), gte(%2, 2))), u(fn.char-cost-stat, %0, %1, VEL, %2), 0),2)
FN.CHECK-ABILITY-BOOSTER-TIMERS [#617]: iter(filter(#lambda/cand(strmatch(ABILITY, u(fn.get-aux-stat, \%0, Boost_Type)), eq(u(fn.get-aux-stat, \%0, Activated), 1)), setunion(children(getobj(BOOSTER)), children(getobj(LENSE)))), if(gt(secs(), u(fn.get-aux-stat, ##, TIMER)), u(fn.auto-deactivate-ability-booster, ##)),,)
FN.CHECK-AMMO [#617]: if(u(fn.has-effect, %0, AMMO), [u(fn.deduct-ammo, %0)] [u(msg, u(AOBJ, %0, attacker), Used up [setr(C, u(fn.get-ammo-cost, %0))] [u(AOBJ, %0, ammo_type)]. [u(fn.get-attack-attrib-stat, [u(AOBJ, %0, attack_attrib_source)]^[u(AOBJ, %0, attack_attrib)], Ammo)] remain.)])
FN.CHECK-COURAGE [#617]: if(u(fn.has-combat-flag, u(AOBJ, %0, target), SCARED), u(fn.check-if-not-scared, u(AOBJ, %0, target)), if(lt(u(fn.get-core-stat, u(AOBJ, %0, target), Current, END), u(cou-end, u(AOBJ, %0, target))), [u(msg, u(AOBJ, %0, target), You are very aware that your life is in [ansi(hr,danger)]!)] [u(fn.add-combat-flag, u(AOBJ, %0, target), SCARED)] [u(fn.remove-combat-flag, u(AOBJ, %0, target), INSPIRED)] [u(fn.release-cover-when-scared, u(AOBJ, %0, target))]))
FN.CHECK-CRITICAL-HIT [#617]: if(gt(div(u(fn.get-core-stat, u(AOBJ, %0, attacker), Current, INT),4),rand(0,100)),u(msg, u(AOBJ, %0, attacker), Critical Hit!, 1), CRITICAL-HIT),7)
FN.CHECK-DEFENSE-LEVEL [#617]: if(setr(E, u(fn.defense-level-cost-[u(fn.get-core-stat, %0, Current, Defense-Level)], %0)), [u(fn.deduct-energon, %0, %qE)] [if(lt(u(fn.get-core-stat, %0, Current, Energon), %qE), [u(fn.set-core-stat, %0, Current, Defense-Level, Neutral)] [u(msg, %0, You are out of energon! Your defense level has been reset to Neutral.)])])
FN.CHECK-FAULTY [#617]: [if(u(fn.has-effect, %0, FAULTY), switch(rand(v(PARAM.FAULTY-FREQUENCY)), 0, u(fn.disable-attack, %0)))]
FN.CHECK-FEED [#617]: [if(and(u(fn.has-effect, %0, FEED), u(fn.get-aux-stat, u(AOBJ, %0, attacker), Recent_Hit)), switch(u(AOBJ, %0, target), u(AOBJ, %0, attacker), u(msg, u(AOBJ, %0, attacker), Your attempts to feed off of yourself fail miserably.), [u(msg, u(AOBJ, %0, attacker), Mmmmmm! You gain [v(param.Energon-Feed)] energon from your Feed attack.)] [u(fn.add-energon, u(AOBJ, %0, attacker), v(param.energon-feed))]))]
FN.CHECK-FOR-FIRST-COMBAT-FLAG [#617]: if(u(fn.has-combat-flag, %0, COMBAT), [@@(no need to do anything)], [u(fn.LOG-COMBAT-FLAG-TRACKER, %0, ON)] [u(fn.add-combat-flag, %0, COMBAT)] [u(fn.set-core-stat, %0, CURRENT, ENERGON, min(u(fn.get-core-stat, %0, MAX, ENERGON), u(fn.get-core-stat, %0, CURRENT, ENERGON)))])
FN.CHECK-HEAVY [#617]: [if(u(fn.has-combat-flag, u(AOBJ, %0, attacker), HEAVY), switch(add(rand(v(PARAM.HEAVY-CHANCE)),2), <[get(u(AOBJ, %0, attacker)/AUX`TEMP`HEAVY_COUNT)], [u(msg, u(AOBJ, %0, attacker), You feel back to your usual self now.)] [u(fn.remove-combat-flag, u(AOBJ, %0, attacker), Heavy)], [u(msg, u(AOBJ, %0, attacker), You are still feeling sluggish.)] [setadd(u(AOBJ, %0, attacker), AUX`TEMP`HEAVY_COUNT, 1, 1)]))]
FN.CHECK-IF-NOT-SCARED [#617]: if(and(u(fn.has-combat-flag, %0, SCARED), gte(u(fn.get-core-stat, %0, Current, END), u(cou-end, %0))), [u(msg, %0, You are no longer worried about your mortal peril.)] [u(fn.remove-combat-flag, %0, SCARED)])
FN.CHECK-PILOT [#617]: if(u(fn.has-pilot, u(AOBJ, %0, target)), [u(fn.do-direct-damage, get(u(AOBJ, %0, target)/PILOT), div(%1, v(PARAM.PILOT-DAMAGE-DIV)), u(AOBJ, %0, attacker), from that attack on your vehicle/exo-suit.)] [u(fn.set-the-combat-flag, get(u(AOBJ, %0, target)/PILOT))])
FN.CHECK-RECOIL [#617]: if(u(fn.has-effect, %0, RECOIL), u(fn.do-direct-damage, u(AOBJ, %0, attack_source), mul(u(AOBJ, %0, damage_level), v(PARAM.RECOIL)), u(AOBJ, %0, attack_source), from using a RECOIL attack.))
FN.CHECK-REPEAT [#617]: if(u(fn.has-combat-flag, %0, REPEAT), [setq(R, get(%0/AUX`TEMP`REPEAT`ATTACKOBJECT))] [if(get(%0/AUX`TEMP`REPEAT`REMAINING), [@@(do repeating damage)] [u(msg, %0, [getname2(u(AOBJ, %qR, attacker))]'s attack continues to damage you.)] [u(msg, u(AOBJ, %qR, attacker), Your attack continues to damage [getname2(%0)])] [@@(do damage)] [u(fn.do-direct-damage, %0, round(fdiv(get(%0/AUX`TEMP`REPEAT`DAMAGE), 2), 0), u(AOBJ, %qR, attacker))] [@@(decrement # remaining)] [attrib_set(%0/AUX`TEMP`REPEAT`REMAINING, dec(get(%0/AUX`TEMP`REPEAT`REMAINING)))] [attrib_set(%0/AUX`TEMP`REPEAT`DAMAGE, round(fdiv(get(%0/AUX`TEMP`REPEAT`DAMAGE), 2), 0))], [@@(Clear everything)] [u(msg, %0, [getname2(u(AOBJ, %qR, attacker))]'s attack finally wears off.)] [u(msg, u(AOBJ, %qR, attacker), You notice your attack on [getname2(%0)] wearing off.)] [wipe(%0/AUX`TEMP`REPEAT)] [u(fn.remove-combat-flag, %0, REPEAT)])])
FN.CHECK-RISKY [#617]: [if(u(fn.has-effect, %0, RISKY), switch(rand(v(PARAM.RISKY-FREQUENCY)), 0, [u(msg, u(AOBJ, %0, attacker), [getname2(u(AOBJ, %0, attacker))]'s risky attack leaves [obj(u(AOBJ, %0, attacker))] temporarily incapacitated!, 1)] [u(fn.add-combat-flag, u(AOBJ, %0, Attacker), STUNNED)] ))]
FN.CHECK-SABOTAGE [#617]: [if(u(fn.has-combat-flag, u(AOBJ, %0, attacker), SABOTAGED), [u(msg, u(AOBJ, %0, attacker), You are still sabotaged\... OH THE SUSPENSE!!)] [setadd(u(AOBJ, %0, attacker), AUX`TEMP`SABOTAGE_COUNT, 1, 1)])]
FN.CHECK-STAT-DAMAGE [#617]: if(lt(u(fn.get-core-stat-pc, u(AOBJ, %0, target),  END), 60), u(fn.do-stat-damage, %0, %1,,1))
FN.CHECK-STUCK [#617]: [if(u(fn.has-effect, %0, STUCK), switch(rand(v(PARAM.STUCK-FREQUENCY)), 0, [u(msg, u(AOBJ, %0, attacker), [getname2(u(AOBJ, %0, attacker))]'s STUCK attack leaves [obj(u(AOBJ, %0, attacker))] unable to transform!, 1)] [u(fn.add-combat-flag, u(AOBJ, %0, Attacker), MODE-LOCKED2)] ))]
FN.CHECK-THE-COMBAT-FLAG [#617]: if(u(getobj(TIMETRACK)/fn.check-time-limit, COMBAT-FLAG, %0), 1[setq(5,u(FN.REMOVE-COMBAT-STATUS, %0))], 0)
FN.CHECK-UNCAPTURE-KNOCKOUT [#617]: if(setr(C, u(fn.get-occupied-cp, %0)), [u(msg, %0, [name(%0)] has lost control of capture point [u(fn.get-cp-stat, loc(%0), %qC, NAME)].)] [u(fn.uncapture, %0, loc(%0), %qC)])
FN.CLEAR-CAPTURE-POINT [#617]: [u(msg, %0, [name(%0)] has reset capture point [u(fn.get-cp-stat, %1, %2, NAME)]., 1)] [u(fn.set-cp-stat, %1, %2, Controlled-By, )] [u(fn.set-cp-stat, %1, %2, Operational, 1)]
FN.CLEAR-CAPTURE-POINTS [#617]: iter(u(fn.get-capture-points, %0), [u(fn.set-cp-stat, %0, ##, Controlled-By, )] [u(fn.set-cp-stat, %0, ##, Operational, 1)],,)
FN.CLEAR-SABOTAGE [#617]: [setq(K, u(fn.remove-combat-flag, %0, SABOTAGED))]
FN.CLOAK-OFF [#617]: [u(fn.remove-combat-flag, %0, CLOAKED)] [u(msg, %0, Suddenly\, [getname2(%0)] appears out of [switch(rand(5), 0, fat, thin)] air!, 1)]
FN.CLOAK-ON [#617]: [u(fn.deduct-energon, %0, v(PARAM.cloak-cost))] [u(fn.add-combat-flag, %0, CLOAKED)] [u(msg, %0, [getname2(%0)] activates [poss(%0)] cloaking field and vanishes from sight!, 1)] [setattrib(%0/AUX`TEMP`HIDE, mean(u(fn.get-core-stat, %0, Current, TECH), 80))] [u(fn.set-core-stat, %0, Current, Defense-Level, Hidden)] [u(msg, %0, Automatically setting your defense level to '[ansi(h,Hidden)]')] [u(fn.setup-pot-info-ability, %0, CLOAK)]
FN.COMBATINFO-IS-NOAPP [#617]: match(last(%0,^), NOAPP)
FN.COMBATINFO-IS-NOSHOW [#617]: match(last(%0,^), NOSHOW)
FN.COMBATINFO-IS-RESTRICTED [#617]: match(last(%0,^), RESTRICTED)
FN.COMBATINFO-IS-SECRET [#617]: match(last(%0,^), SECRET)
FN.COMBINER-STRESS-CHECK [#617]: if(lt(u(fn.get-core-stat-pc, %0, END), 33), u(fn.dissolve-combiner, %0))
FN.COMPARE-SCHEMA [#617]: add(u(fn.compare-schema-core, %0, %1, %2), u(fn.compare-schema-num-modes, %0, %1, %2), u(fn.compare-schema-mode, %0, %1, %2), if(u(fn.compare-schema-num-attacks, %0, %1, %2), 1, u(fn.compare-schema-attack, %0, %1, %2)))
FN.COMPARE-SCHEMA-ATTACK [#617]: lmath(add, iter(u(fn.get-all-attack-attribs, %0, %1), iter(NAME ATTACK-TYPE DAMAGE-LEVEL DAMAGE-TYPE EFFECT MAX_AMMO AMMO_TYPE, not(strmatch(u(fn.get-attack-attrib-stat, %i1, %i0), u(fn.get-attack-attrib-stat, replace(%i1, 2, %2, `), %i0))),,%b),,%b))
FN.COMPARE-SCHEMA-CORE [#617]: lmath(add, map(#lambda/not(strmatch(u(fn.get-core-stat, %0, %1, \%0), u(fn.get-core-stat, %0, %2, \%0))), END COU INT LDR TECH ENERGON SKILLS))
FN.COMPARE-SCHEMA-DISPLAY [#617]: [header(Schema Comparison for [name(%0)])]%r[ucstr(%1)] vs [ucstr(%2)]%r%rCore: [u(fn.compare-schema-core, %0, %1, %2)]%r# of Modes: [u(fn.compare-schema-num-modes, %0, %1, %2)]%rMode Stats: [u(fn.compare-schema-mode, %0, %1, %2)]%r# of Attacks: [setr(1, u(fn.compare-schema-num-attacks, %0, %1, %2))]%rAttack Stats: [if(%q1, n/a, u(fn.compare-schema-attack, %0, %1, %2))]%r[header()]
FN.COMPARE-SCHEMA-MODE [#617]: lmath(add, iter(u(fn.get-modes, %0, %1), iter(TYPE SIZE VEL ARMOR STR AGL ACC FRP ABILITIES, not(strmatch(u(fn.get-mode-stat, %0, %1, %i1, %i0), u(fn.get-mode-stat, %0, %2, %i1, %i0))),,%b),,%b))
FN.COMPARE-SCHEMA-NUM-ATTACKS [#617]: neq(words(u(fn.get-all-attack-attribs, %0, %1)), words(u(fn.get-all-attack-attribs, %0, %2)))
FN.COMPARE-SCHEMA-NUM-MODES [#617]: neq(words(u(fn.get-modes, %0, %1)), words(u(fn.get-modes, %0, %2)))
FN.COMPARE-STATS [#617]: gte(u(fn.convert-stats-to-normal-variate, %0, %1), u(fn.normal-rng, 0, v(PARAM.NORMAL-DIST-STDDEV)))
FN.CONVERT-STATS-TO-NORMAL-VARIATE [#617]: fdiv(sub(%0, %1), 100)
FN.COPY-AUX-STATS [#617]: [wipe(%0/AUX`%2)] [iter(lattr(%0/AUX`%1**), attrib_set(%0/[replace(##, 2, %2, `)], get(%0/##)),,)]
FN.COPY-SCHEMA [#617]: if(u(fn.has-schema,%0,%1), [wipe(%0/STATS`%2)] [iter(lattrp(%0/STATS`%1**), attrib_set(%0/[replace(##,2,%2,`)], [get(%0/##)]),,)], #-1 INVALID SOURCE SCHEMA %1)
FN.COVER-CHECK [#617]: [if(u(fn.has-combat-flag, %0, COVERING), u(fn.destroy-cover, %0))] [if(u(fn.has-combat-flag, %0, COVERED), u(fn.destroy-cover, get(%0/AUX`TEMP`COVERED)))]
FN.COVER-SUCCESS [#617]: [@@(ARGUMENTS // 0 - COVERED TARGET OF AN ATTACK // 1 - ATTACKER)][if(u(fn.has-ability, u(fn.get-covered-target, %0), BODYGUARD), 1, u(fn.cover-success-random, %0, %1))]
FN.COVER-SUCCESS-RANDOM [#617]: [@@(ARGUMENTS // 0 - COVERED TARGET OF AN ATTACK  // 1 - ATTACKER)][@@(COMMENT - only called if coverer does not have BODYGUARD)][u(fn.compare-stats, u(fn.get-core-stat, %0, Current, LDR), u(fn.get-core-stat, %1, Current, LDR))]
FN.COVER-TARGET [#617]: [@@(Make sure to reset any previous covered folk)] [switch(get(%0/AUX`TEMP`COVERING),,, %1,, [u(msg, %0, You are no longer covering [getname(get(%0/AUX`TEMP`COVERING))].)] [u(msg, get(%0/AUX`TEMP`COVERING), You are no longer being covered by [getname(%0)].)] [attrib_set(get(%0/AUX`TEMP`COVERING)/AUX`TEMP`COVERED, )])] [@@(Set  up new Covering and Covered attribs)] [attrib_set(%0/AUX`TEMP`COVERING, %1)] [attrib_set(%1/AUX`TEMP`COVERED, %0)] [u(msg, %0, [getname(%0)] [if(%2, is [ansi(h,expertly)] covering, takes a moment to cover)] [getname(%1)]., 1)] [u(fn.add-combat-flag, %0, COVERING)] [u(fn.add-combat-flag, %1, COVERED)]
FN.CREATE-BOMB [#617]: [u(msg, %0, [name(%0)] has created a bomb: "%1"!, 1)] [setq(B, clone(getobj(MBOMB)))] [name(%qB, %1)] [parent(%qB, getobj(IWOP))] [u(fn.set-aux-stat, %qB, OWNER, %0)] [u(fn.set-mode-stat, %qB, Current, 1, Name, %1)] [u(fn.set-mode-stat, %qB, Max, 1, Name, %1)] [u(fn.randomize-bomb, %qB, %0)] [tel(%qB, loc(%0))] [u(getobj(TIMETRACK)/fn.set-time-limit, DEMOLITION, %0)] [chown(%qB, getobj(FORGE))] [set(%qB, !HALT)] [u(fn.set-aux-stat, %qB, CREATED_BY, %0)] [u(fn.set-aux-stat, %qB, CREATED_ABILITY, Demolition)] [u(fn.set-aux-stat, %qB, ACCOUNTED_BY, %0)]
FN.CREATE-BOOSTER [#617]: [@@(ARGUMENTS: 0 - OWNER DBREF# // 1 - BOOSTER TYPE // 2 - BOOST AMOUNT // 3 - SECURED OBJECT NAME // 4 - FROM STORE)][setr(B, clone(getobj(MBOOSTER)))] [name(%qB, %3)] [parent(%qB, getobj(BOOSTER))] [u(fn.set-aux-stat, %qB, OWNER, %0)] [u(fn.set-aux-stat, %qB, CREATED_BY, getobj(FORGE))] [u(fn.set-aux-stat, %qB, BOOST_TYPE, %1)] [u(fn.set-aux-stat, %qB, BOOST_AMOUNT, %2)] [tel(%qB, %0)] [u(fn.log-booster-action, if(%4, PURCHASE, CREATED), %0, %qB)] %qB
FN.CREATE-CANCELLED-ATTACK-OBJECT [#617]: u(fn.modify-attack-object, %0, effect, setdiff(ucstr(u(AOBJ, %0, effect)), ucstr(u(fn.get-cancelled-effect-list, u(AOBJ, %0, attacker)))))
FN.CREATE-FORCEFIELD [#617]: [u(fn.add-combat-flag,%0,FF-CAST)] [u(fn.add-combat-flag,%1,FF)] [attrib_set(%0/AUX`TEMP`FF`TO, %1)] [attrib_set(%1/AUX`TEMP`FF`FROM, %0)] [u(msg,%0,[getname2(%0)] creates a forcefield shielding [switch(%1,%0,[obj(%0)]self,getname2(%1))] from damage.,1)] [u(fn.setup-pot-info-ability, %0, FF, %1)]
FN.CREATE-GRENADE [#617]: [u(msg, %0, [name(%0)] has created a grenade: "%1"!, 1)] [setq(B, clone(getobj(MGRENADE)))] [name(%qB, %1)] [parent(%qB, getobj(IWOP))] [u(fn.set-aux-stat, %qB, OWNER, %0)] [u(fn.set-mode-stat, %qB, Current, 1, Name, %1)] [u(fn.set-mode-stat, %qB, Max, 1, Name, %1)] [u(fn.randomize-grenade, %qB, %0)] [tel(%qB, loc(%0))] [u(getobj(TIMETRACK)/fn.set-time-limit, GRENADE, %0)] [chown(%qB, getobj(FORGE))] [set(%qB, !HALT)] [u(fn.set-aux-stat, %qB, CREATED_BY, %0)] [u(fn.set-aux-stat, %qB, CREATED_ABILITY, Demolition)] [u(fn.set-aux-stat, %qB, ACCOUNTED_BY, %0)]
FN.CREATE-HOLOGRAM [#617]: [u(msg, %0, [name(%0)] has created a hologram: "[ansi(hr,H)]-%1"!, 1)] [setq(B, clone(#9481))] [name(%qB, strcat(H-,%1))] [parent(%qB, getobj(IWOP))] [u(fn.set-aux-stat, %qB, OWNER, %0)] [u(fn.set-mode-stat, %qB, Current, 1, Name, strcat(H-,%1))] [u(fn.set-mode-stat, %qB, Max, 1, Name, %1)] [u(fn.randomize-hologram, %qB, %0)] [tel(%qB, loc(%0))] [chown(%qB, getobj(FORGE))] [set(%qB, !HALT)] [u(fn.set-aux-stat, %qB, CREATED_BY, %0)] [u(fn.set-aux-stat, %qB, CREATED_ABILITY, Holograms)] [u(fn.set-aux-stat, %qB, ACCOUNTED_BY, %0)] [u(fn.add-combat-flag, %0, HOLOGRAMS))] [u(fn.deduct-energon, %0, u(fn.get-patch-cost, %0))] [u(fn.setup-pot-info-ability, %0, HOLOGRAMS, %0)] [u(fn.set-the-combat-flag, %0)] [attrib_set(%0/AUX`HOLOGRAM, %qB)]
FN.DAMAGE-BREAKDOWN [#617]: [header(Damage Breakdown)]%r[ansi(h,%0)]%r[subheader()]%rBase: [u(fn.get-base-damage, %0)]%rArea Multiplier: [u(fn.get-area-multiplier, %0)]%rSize Mod: [u(fn.get-damage-size-modifier, %0)]%rArmor DR: [u(fn.get-armor-bonus, %0)]%rAnalyze: [u(fn.get-analyze-damage-bonus, %0)]%rCapPoint Damage: [u(fn.get-cp-damage-bonus, %0)]%rCapPoint Armor: [u(fn.get-cp-armor-bonus, %0)]%rArtifact: [u(fn.get-artifact-damage-bonus, %0)]%rSneak Attack: [u(fn.get-sneak-attack-damage-bonus, %0)]%r[subheader()]%r[ansi(h,Total:)] [u(fn.calculate-damage, %0, 1)]%r[header()]
FN.DAMAGE-FORCEFIELD [#617]: [u(msg-spam, get(u(AOBJ, %0, target)/AUX`TEMP`FF`FROM), That attack on your forcefield took %1 energon.)][u(fn.addto-core-stat, setr(E, get(u(AOBJ, %0, target)/AUX`TEMP`FF`FROM)), Current, Energon, -%1)][if(lte(u(fn.get-core-stat, %qE, Current, Energon), 0), u(fn.destroy-forcefield, %qE), u(msg, %qE, [getname2(%qE)]'s forcefield absorbs [getname2(u(AOBJ, %0, attacker))]'s attack., 1))]
FN.DEACTIVATE-BOOSTER [#617]: switch(u(fn.get-aux-stat, %0, Boost_Type), Ability, u(fn.deactivate-booster-ability, %0, %1), u(fn.deactivate-booster-standard, %0, %1))
FN.DEACTIVATE-BOOSTER-ABILITY [#617]: [u(msg, %1, Ability Booster Pack [ansi(h, name(%0))] is already activated\, it will automatically deactivate after 8 hours.)]
FN.DEACTIVATE-BOOSTER-STANDARD [#617]: [u(msg, %1, Deactivating Booster Pack [ansi(h,name(%0))].)] [u(fn.set-aux-stat, %0, ACTIVATED, 0)]
FN.DEDUCT-AMMO [#617]: iter(u(fn.get-linked-attacks, u(AOBJ, %0, attack_source), [u(AOBJ, %0, attack_source)]^[u(AOBJ, %0, attack_attrib)]), u(fn.set-attack-attrib-stat, ##, Ammo, sub(u(fn.get-attack-attrib-stat, ##, Ammo), u(fn.get-ammo-cost, %0))),,)
FN.DEDUCT-ENERGON [#617]: if(u(fn.is-unstoppable, %0),,[u(fn.add-energon, %0, mul(-1, %1))] [u(msg-spam, %0, [switch(mul(-1, %1), >0, Gained, Drained)] [abs(%1)] energon.)])
FN.DEFEND [#617]: [u(msg, %0, [getname(%0)] sets [poss(%0)] defense level to [u(fn.display-defense-level, %0, %1)]., 1))] [u(fn.set-core-stat, %0, CURRENT, Defense-Level, capstr(lcstr(%1)))]
FN.DEFENSE-LEVEL-COST-SCRAPPY [#617]: 2
FN.DEFENSE-LEVEL-COST-SOLID [#617]: 2
FN.DEFENSE-LEVEL-LOCK-AGGRESSIVE [#617]: 1
FN.DEFENSE-LEVEL-LOCK-EVADE [#617]: u(fn.has-ability, %0, EVADE)
FN.DEFENSE-LEVEL-LOCK-FEARLESS [#617]: 1
FN.DEFENSE-LEVEL-LOCK-GUARDED [#617]: 1
FN.DEFENSE-LEVEL-LOCK-HIDDEN [#617]: u(fn.is-hidden, %0)
FN.DEFENSE-LEVEL-LOCK-NEUTRAL [#617]: 1
FN.DEFENSE-LEVEL-LOCK-OFF-GUARD [#617]: 
FN.DEFENSE-LEVEL-LOCK-PROTECTED [#617]: 1
FN.DEFENSE-LEVEL-LOCK-SCRAPPY [#617]: u(fn.has-ability, %0, SCRAPPY)
FN.DEFENSE-LEVEL-LOCK-SOLID [#617]: u(fn.has-ability, %0, SOLID)
FN.DEFRAG-ATTACK-NUMBERS [#617]: [u(fn.wipe-temp-attacks,%0,%1,%2)] [@@(keep track of temp attacks to delete later)] [setq(D,)] [@@(go through each current attack and assign it to a lettered temp attack)] [iter(u(fn.get-attacks,%0,%1,%2), [@@(our temp attack letter)] [setq(A,chr(add(64,#@)))] [iter(lattr(%0/[last(##,^)]`), attrib_set(%0/[replace(%i0, 4, ATTACK%qA, `)], get(%0/%i0)),,)],,)] [@@(now delete the numbered attacks)] [u(fn.wipe-real-attacks,%0,%1,%2)] [@@(copy temp-lettered attacks back into a nice numbered format)] [iter(u(fn.get-attacks,%0,%1,%2), iter(lattr(%0/[after(##,^)]`), attrib_set(%0/[replace(%i0, 4, ATTACK#@, `)], get(%0/%i0)),,),,)] [u(fn.wipe-temp-attacks,%0,%1,%2)]
FN.DEFRAG-MODE-NUMBERS [#617]: [u(fn.wipe-temp-modes,%0,%1)] [@@(keep track of temp MODES to delete later)] [setq(D,)] [@@(go through each current MODE and assign it to a lettered temp mode)] [iter(u(fn.get-modes,%0,%1), [@@(our temp mode letter)] [setq(A,chr(add(64,#@)))] [iter(lattr(%0/STATS`%1`MODE##`**), [attrib_set(%0/[replace(%i0, 3, MODE%qA, `)], get(%0/%i0))] ,,)],,)] [@@(now delete the numbered attacks)] [u(fn.wipe-real-modes,%0,%1)] [@@(copy temp-lettered modes back into a nice numbered format)] [iter(u(fn.get-modes,%0,%1), iter(lattr(%0/STATS`%1`MODE##`**), [attrib_set(%0/[replace(%i0, 3, MODE#@, `)], get(%0/%i0))],,),,)] [u(fn.wipe-temp-modes,%0,%1,%2)]
FN.DESTROY-COVER [#617]: [@@(ARGUMENTS // 0 - PERSON DOING THE COVERING)] [setq(T,get(%0/AUX`TEMP`COVERING))] [u(fn.remove-combat-flag,%0,COVERING)] [u(fn.remove-combat-flag,%qT,COVERED)] [wipe(%0/AUX`TEMP`COVERING)] [wipe(%qT/AUX`TEMP`COVERED)] [u(msg, %0, [getname2(%0)] is no longer covering [getname(%qT)].,1)]
FN.DESTROY-FORCEFIELD [#617]: [setq(T,get(%0/AUX`TEMP`FF`TO))] [u(fn.remove-combat-flag,%0,FF-CAST)] [u(fn.remove-combat-flag,%qT,FF)] [wipe(%0/AUX`TEMP`FF`TO)] [wipe(%qT/AUX`TEMP`FF`FROM)] [u(msg,%0,[getname2(%0)]'s forcefield protecting [switch(%qT,%0,[obj(%0)]self,getname2(%qT))] vanishes.,1)]
FN.DETECT [#617]: [u(msg, %0, [getname2(%1)] searches for [getname2(%0)]., 1)] [u(fn.search-for-target, %0, add(v(PARAM.detect-search-bonus), u(fn.get-core-stat, %1, Current, INT)))] [u(fn.setup-pot-info-ability, %0, DETECT, %1)]
FN.DISABLE-ATTACK [#617]: [u(msg, u(AOBJ, %0, attacker), [getname2(u(AOBJ, %0, attacker))]'s weapon has jammed![switch(rand(5), 0, %bRASPBERRY!!)], 1)] [u(fn.set-attack-attrib-stat, [u(AOBJ, %0, attack_attrib_source)]^[u(AOBJ, %0, attack_attrib)], Disabled, 1)]
FN.DISPLAY-ABILITIES [#617]: [setq(Modes,iter(lattr(%q0/STATS`MAX`MODE*`SIZE),after(extract(##,3,1,`),MODE)))][iter(%q<MODES>,%r[ansi(h,Mode ##)]: [iter(caplst(get(%q0/STATS`MAX`MODE[itext(L)]`ABILITIES)),[itext(0)],,\,%b)])]
FN.DISPLAY-ACTION-STATIONS [#617]: [header([name(%0)] Action Stations)]%r[iter(Pilot Gunner Engineer, [space(2)][ljust(##, 20)][if(get(%0/##), [ansi(h, switch(%1, get(%0/##), You, name(get(%0/##))))], Vacant)],,%r)]%r[header()]
FN.DISPLAY-ALT-MODE-NAMES [#617]: [header(Alt-Mode Names in this Room)]%r[iter(lcon(%0),%b%b[ljust(getname2(##), 30)]: [name(##)],,%r)]%r[header()]
FN.DISPLAY-ANALYSIS-DATA [#617]: [header([getname2(%0)] has Analysis Data on...)][iter(lattr(%0/AUX`TEMP`ANALYSIS`*), %r%b%b[getname2(last(##, `))]\, from [switch(get(%0/##), %0, [obj(%0)]self, getname2(#$))],,)]%r[header()]
FN.DISPLAY-ATTACK-EFFECT-HELPER [#617]: if(match(u(fn.get-cancelled-effect-list, %1), %0), [ansi(hr,*)][ansi(h,ucstr(%0))], ucstr(%0))
FN.DISPLAY-ATTACK-HELPER [#617]: [ljust(ansi(h[if(u(fn.get-attack-attrib-stat, %0, DISABLED), m)], mid(u(fn.get-attack-attrib-stat, %0, NAME), 0, 29)), 30)] [ljust([ansi(h,\[)]LVL [u(fn.get-attack-attrib-stat, %0, DAMAGE-LEVEL)][ansi(h,:)] [ucstr(u(fn.get-attack-attrib-stat, %0, ATTACK-TYPE))][ansi(h,\])],22)]%r%bDamage Type: [map(#lambda/ucstr(\%0), u(fn.get-attack-attrib-stat, %0, DAMAGE-TYPE),,\,%b)][if(u(fn.get-attack-attrib-stat, %0, EFFECT), %r%b[ljust(Effects,11)]: [map(#lambda/u(fn.display-attack-effect-helper, \%0, %1), u(fn.get-attack-attrib-stat, %0, EFFECT),,\,%b)])][if(match(u(fn.get-attack-attrib-stat, %0, EFFECT), AMMO), %r%b[ljust(Ammunition, 11)]: [u(fn.get-attack-attrib-stat, replace(%0, 2, Current, `), AMMO)] of [u(fn.get-attack-attrib-stat, %0, MAX_AMMO)] [switch(u(fn.get-attack-attrib-stat, %0, AMMO_TYPE),,units,#$)] <[capstr(lcstr(u(fn.get-attack-attrib-stat, %0, BIN_TYPE)))] Bin>,%r%b[ljust(Energon, 11)]: [u(fn.get-attack-attrib-energon-cost, %0)])][if(u(fn.get-attack-attrib-stat, %0, DISABLED), %r%b[ansi(hm, >> This attack is currently DISABLED. See +help !unjam)])]
FN.DISPLAY-ATTACK-HELPER2 [#617]: switch(type(before(%1,^)), PLAYER, [ansi(hc,getname2(before(%1, ^)))] [ansi(h,\[)][ansi(hc,Mode [u(curmode, before(%1, ^))])] [ansi(h,-)] [ansi(hc,u(fn.get-current-mode-stat, before(%1, ^), Name))][ansi(h,\])], THING, [ansi(hc,getname2(before(%1, ^)))], ROOM, [ansi(hc, Capture Point [u(fn.get-occupied-cp, %0)])] [ansi(h,\[)][ansi(hc,u(fn.get-cp-stat, loc(%0), u(fn.get-occupied-cp, %0), Name))][ansi(h,\])])
FN.DISPLAY-ATTACK-OBJECT [#617]: [getname2(u(AOBJ, %0, attacker))] [switch(%1, HIT, strikes, MISS, misses, ???)] [switch(u(AOBJ, %0, target), u(AOBJ, %0, attacker), [obj(u(AOBJ, %0, attacker))]self, getname2(u(AOBJ, %0, target)))] with [switch(u(fn.get-aux-stat, u(AOBJ, %0, attack_source), Created_Ability), Weaponsmith, the [name(u(fn.get-aux-stat, u(AOBJ, %0, attack_source), created_by))]-forged, switch(u(AOBJ, %0, attack_source), u(AOBJ, %0, attacker), poss(u(AOBJ, %0, attacker)), [getname2(u(AOBJ, %0, attack_source))]'s))] [u(AOBJ, %0, name)][switch(u(AOBJ, %0, global_name),,, u(AOBJ, %0, name),,%b\([u(AOBJ, %0, global_name)]\))][switch(u(AOBJ, %0, area_div), 1,, %b[if(u(fn.is-chain-attack, %0), Chained, Area)])] attack! [if(match(u(AOBJ, %0, extra_flags), PULL), \[Pulled [u(fn.get-pull-differential, %0)]\])]
FN.DISPLAY-ATTACKLIST [#617]: [header(Attack List for [ucstr(getname2(%0))])][iter(u(fn.get-modes,%0, %1),[switch(#@,1,%r,%r%r)][ansi(hc,Mode ##)] [ansi(h,\[)][ansi(hc,u(fn.get-mode-stat,%0, %1,%i0,TYPE))][ansi(h,\])]%r[iter(u(fn.get-attacks,%0, %1,%i0), u(fn.display-attack-helper, %i0, %0),,%r)],,)][if(u(fn.get-cancelled-effect-list, %0),%r%r[ansi(hr,*)] These attacks are currently cancelled.)]%r[header(if(%2,,See also '[v(CHAR)]globals' for the "free" global attacks))]
FN.DISPLAY-ATTACKNAMES [#617]: [header(Custom Attack Names for [getname2(%0)])]%r[iter(u(fn.get-free-attacks),%b%b[ljust(setr(0,u(fn.get-attack-attrib-stat, ##, Name)), 20)]: [switch(u(fn.get-custom-attack-name, %0, %q0), %q0, none, #$)],,%r)]%r[header(See [ansi(h,[v(char)]globals)] for "freebie" attack details)]
FN.DISPLAY-AVAIL-ATTACKS [#617]: [header(Available Attacks for [ucstr(getname2(%0))])][setq(2,)][iter(filter(#lambda/not(strmatch(before(\%0, ^), v(DB.FREE-ATTACKS))), u(fn.get-avail-attacks, %0)), [switch(before(##, ^), %q2,,%r[u(fn.display-attack-helper2, %0, ##)]%r)][u(fn.display-attack-helper, ##, %0)][setq(2,before(##,^))],,%r)][if(u(fn.get-cancelled-effect-list, %0),%r%r[ansi(hr,*)] These attacks are currently cancelled.)]%r[header(See also '[v(CHAR)]globals' for the "free" global attacks)]
FN.DISPLAY-CANCEL-LIST [#617]: if(words(setr(0, u(fn.get-cancelled-effect-list, %0))), [header(Cancelled Attack Effects)]%r[iter(%q0,[space(5)]##,,%r)]%r[header()], You are not currently cancelling any attack effects.)
FN.DISPLAY-CAPTURE-POINT [#617]: [header(Capture Point %1)]%r[ansi(h,Capture Point)] [ansi(hc, %1)] [ansi(h,-)] [ansi(hc, u(fn.get-cp-stat, %0, %1, NAME))]%rStatus[ansi(hy,:)] [if(u(fn.get-cp-stat, %0, %1, operational), Operational, DISABLED)]%rIn Control[ansi(hy,:)] [if(isdbref(setr(1, u(fn.get-cp-stat, %0, %1, controlled-by))), [getname(%q1)]%rRounds Held[ansi(hy,:)] [u(fn.get-cp-stat, %0, %1, rounds-held)], No one)]%rFight Factor[ansi(hy,:)] [u(fn.get-stat-fullname, u(fn.get-cp-stat, %0, %1, FIGHT-FACTOR))][if(or(%3, strmatch(%q1, %2)),%r%r[u(fn.display-capture-point-ownership, %0, %1, %2)])]%r[header([if(%3,Administrator View)])]
FN.DISPLAY-CAPTURE-POINT-OWNERSHIP [#617]: [subheader(Bonuses)]%rAttack[ansi(hy,:)] [signo(u(fn.get-cp-stat, %0, %1, off-mod))]%rDefend[ansi(hy,:)] [signo(u(fn.get-cp-stat, %0, %1, def-mod))]%rDamage[ansi(hy,:)] [signo(u(fn.get-cp-stat, %0, %1, damage-mod))]%rArmor[ansi(hy,:)] [signo(u(fn.get-cp-stat, %0, %1, armor-mod))]%r%rHolding (per Round)[ansi(hy,:)] [signo(u(fn.get-cp-stat, %0, %1, Holding-Bonus))]%r%r[subheader(Attacks)][iter(u(FN.GET-CP-ATTACKS, %0, %1), %r[u(fn.display-attack-helper, %0^##, %0)],,)]
FN.DISPLAY-CHAR-COST [#617]: [header(Character Costs for [name(%0)] \([setr(1, if(%1, ucstr(%1), MAX))] schema\))]%r[ansi(h,Core Stats:)] [u(fn.char-cost-display-core-stats, %0, %q1)] = [u(fn.char-cost-calc-core-stats, %0, %q1)][iter(u(fn.get-modes, %0, %q1), %r[fileheader([ansi(hc,Mode ## - [u(fn.get-mode-stat, %0, %q1, ##, Type)])] [ansi(h,\([u(fn.char-cost-calc-mode, %0, %q1, ##)]\))])]%r[u(fn.char-cost-display-mode, %0, %q1, ##)],,)]%r[fileheader([ansi(hc,Attacks)] [ansi(h, \([u(fn.char-cost-calc-attacks, %0, %q1)]\))])]%r[u(fn.char-cost-display-attacks, %0, %q1)][if(u(fn.has-any-protections, %0, %q1),%r[fileheader(ansi(hc,Protection))][u(fn.char-cost-display-all-protections, %0, %q1)])]%r[fileheader([ansi(hc,Abilities)] [ansi(h, \([u(fn.char-cost-calc-all-abilities, %0, %q1)]\))])][u(fn.char-cost-display-all-abilities, %0, %q1)]%r[fileheader(ansi(hc,Other Crap))]%r[ansi(h,Skills)]: [u(fn.char-cost-display-skills, %0, %q1)] = [u(fn.char-cost-calc-skills, %0, %q1)][if(u(fn.char-cost-calc-extras, %0, %q1),%r%r[ansi(h,Extras)]: [u(fn.char-cost-display-extras, %0, %q1)] = [u(fn.char-cost-calc-extras, %0, %q1)])]%r[u(fn.char-cost-display-energon, %0, %q1)]%r[header(Total Cost: [u(fn.calc-char-cost, %0, %q1)])]
FN.DISPLAY-COMBATINFO [#617]: [header(Combat System Info: %0)]%r[ljust(ansi(h,Cost), 5)][ljust(ansi(h,Name),14)][ansi(h,Description)]%r[subheader()][iter(get(v(TACS_DB)/list.%0), [setq(0, get(v(TACS_DB)/INFO_%0_##))][if(or(u(fn.combatinfo-is-secret, %q0), and(u(fn.combatinfo-is-noshow, %q0), not(%1))), @@(show nothing), %r[switch(1, u(fn.combatinfo-is-restricted, %q0), [ansi(h,+)]%b[rjust(index(%q0, ^, 2, 1), 2)], u(fn.combatinfo-is-noapp,%q0), %b%b%b[ansi(hr,*)], %b%b[rjust(index(%q0, ^, 2, 1), 2)])]%b[ljust(if(u(fn.combatinfo-is-noshow, %q0), ansi(hx, ##), ##), 13)]%b[first(%q0, ^)])],,)]%r[subheader()]%r%b%b[ansi(h,+)] : These types of attacks/abils are "rare" and will receive heavy scrutiny%r%b%b[ansi(hr,*)] : Not available. FC/Plot Only[if(%1,%r%b%b[ansi(hx,Hidden)]: Only admin can see this %0)]%r[header()]
FN.DISPLAY-COMBATINFO-MENU [#617]: [header(Combat System Info Topics)][iter(get(v(TACS_DB)/list.combatinfo-topic),%r[ljust(ucstr(##), 15)][get(v(TACS_DB)/info_topic_##)],,)]%r[header(Type '[v(CHAR)]combatinfo <topic>' for detailed information)]
FN.DISPLAY-CRACKSHOT-DATA [#617]: [header([getname2(%0)] has Targeting Data on...)][iter(lattr(%0/AUX`TEMP`CRACKSHOT`*), %r%b%b[getname2(last(##, `))]\, from [switch(get(%0/##), %0, [obj(%0)]self, getname2(#$))],,)]%r[header()]
FN.DISPLAY-DEFENSE-LEVEL [#617]: capstr(lcstr(if(v(PARAM.DEFENSE-LEVEL-QUIET-%1), switch(u(fn.get-aux-stat, %0, Fake-Defense-Level),, Neutral, #$), %1)))
FN.DISPLAY-DEFENSE-LEVELS [#617]: [header(Defense Levels)]%r[align(2 <20 >10 >10,, ansi(h,Level), ansi(h,+Attack), ansi(h,+Dodge))]%r[subheader()][iter(sortby(FN.SORT-DEFENSE-LEVEL, get(v(TACS_DB)/LIST.DEFENSE-LEVEL)), if(u(fn.has-access-to-defense-level, %0, ##), %r[align(>2 <20 >10 >10, switch(v(fn.defense-level-lock-##), 1,, [ansi(hr, *)]), [ansi(if(strmatch(u(fn.get-core-stat, %0, Current, Defense-Level), ##), h, n), ##)], switch(get(v(TACS_DB)/PARAM.DEFENSE-OFF-##), >0,+#$,#$), switch(get(v(TACS_DB)/PARAM.DEFENSE-DEF-##), >0,+#$,#$))]),,)]%r[header(Use [ansi(h,!defend <level name>)] to change Defense Levels)]
FN.DISPLAY-EVALUATION [#617]: [header(Evaluation of [name(%0)])]%r[if(u(combat-ok, %0), [name(%0)] is conscious and COMBAT-OK., if(u(COMBAT-OK-POSSIBLY-UNCONSCIOUS, %0), [name(%0)] is currently unconscious but otherwise COMBAT-OK., [name(%0)] is neither conscious nor COMBAT-OK.))][setq(E, squish([if(or(and(u(fn.is-species, %0, Alt-Human Human Alien), u(fn.has-ability, %1, Heal)), and(u(fn.is-species, %0, Junkion Transformer), u(fn.has-ability, %1, Repair)), and(u(fn.is-species, %0, Vehicle Base), u(fn.has-ability, %1, Construction))), HEALTH)] [if(or(and(u(fn.is-species, %0, Vehicle Base), u(fn.has-ability, %1, Construction)), u(fn.has-ability, %1, Resupply)), AMMO)] [if(or(and(u(fn.is-species, %0, Vehicle Base), u(fn.has-ability, %1, Construction)), u(fn.has-ability, %1, Reload)), FUEL)]))]%r[iter(%qE, u(fn.display-evaluation-##, %0),,%r)]%r[header()][if(and(u(fn.is-vehicle, %0), u(fn.has-ability, %1, Construction)), %r[u(getobj(TIMETRACK)/fn.display-limits, %0)])]
FN.DISPLAY-EVALUATION-AMMO [#617]: if(u(fn.get-all-ammo-levels, %0, Current), iter(u(fn.get-all-ammo-levels, %0, Current), [name(%0)] [if(lt(last(##,^), index(##,^,2,1)), is low on [first(##,^)], has a full supply of [first(##,^)].)], |, %r), [name(%0)] requires no ammunition.)
FN.DISPLAY-EVALUATION-FUEL [#617]: switch(u(fn.get-core-stat-pc, %0, Energon), >100, [name(%0)] has a surplus of energon!, 100, [name(%0)]'s energon levels are at capacity., <50, [name(%0)]'s energon reserves are less than half full., [name(%0)] still has most of [poss(%0)] energon reserves remaining.)
FN.DISPLAY-EVALUATION-HEALTH [#617]: [name(%0)] [switch(u(fn.get-core-stat-pc, %0, END), >100, is better than normal!, 100, is in perfect health., <25, is at death's door!, <50, is severely wounded., <75, is moderately wounded., is slightly wounded.)]
FN.DISPLAY-POWER-RANK [#617]: [header(Power Ranking for [name(%0)]: [ucstr(%1)])][iter(u(fn.get-modes, %0, %1), %r[fileheader([ansi(hc,MODE ##)] - [ansi(h, u(fn.get-mode-stat, %0, MAX, ##, Type))])]%rStaying Power: [round(u(fn.power-rank-get-staying-power, %0, %1, ##), 0)]%rDmg / Round: [round(u(fn.power-rank-get-damage-per-round, %0, %1, ##), 0)]%rPower Ranking: [round(u(fn.get-power-ranking-for-mode, %0, %1, ##), 0)],,)]%r[header(Power Ranking: [round(u(fn.get-power-ranking, %0, %1), 0)])]
FN.DISPLAY-PROTECTION [#617]: [setq(Modes,iter(lattr(%q0/STATS`MAX`MODE*`SIZE),after(extract(##,3,1,`),MODE)))][iter(%q<MODES>,%r[ansi(h,Mode ##)]: [iter(lattr(%q0/STATS`MAX`MODE[itext(L)]`PROTECTION`*),[caplst(extract(itext(0),5,1,`))] \([get(%q0/[itext(0)])]\),,\,%b)])]
FN.DISPLAY-ROOM-CAPTURE-POINTS [#617]: if(not(setr(0,u(fn.get-capture-points, %0))), There are no capture points available for [getname2(%0)].,[header(Capture Points in [getname2(%0)])]%r[space(5)][ljust(ansi(h,Name), 30)] [ljust(ansi(h,In Control \(Rounds\)), 20)] [ansi(h,Fight Factor)]%r[subheader()]%r[iter(%q0, %b[ljust(ansi(hc, capstr(##)), 3)] [ljust(u(fn.get-cp-stat, %0, ##, Name), 30)] [ljust(if(isdbref(setr(1, u(fn.get-cp-stat, %0, ##, controlled-by))), [name(%q1)] \([ansi(hc, u(fn.get-cp-stat, %0, ##, rounds-held))]\), No one), 20)] [u(fn.get-stat-fullname, u(fn.get-cp-stat, %0, ##, FIGHT-FACTOR))],,%r)]%r[header()])
FN.DISPLAY-SKILLS [#617]: itemize(u(fn.get-core-stat, %0, if(%1,%1,MAX), SKILLS), |)
FN.DISPLAY-SPECIAL-ATTACK-MESSAGES [#617]: [if(strmatch(u(fn.get-core-stat, u(AOBJ, %0, attacker), Current, Defense-Level), Hidden), u(msg, u(AOBJ, %0, attacker), Sneak Attack!!, 1))] [switch(u(AOBJ, %0, extra_flags), *SABOTAGED*, u(msg, u(AOBJ, %0, attacker), [switch(u(AOBJ, %0, attack_source), u(AOBJ, %0, attacker), [getname2(u(AOBJ, %0, attacker))]'s [u(AOBJ, %0, name)] attack aimed for [getname2(u(fn.get-attack-orig-target, %0))] is sabotaged!, [getname2(u(AOBJ, %0, attacker))]'s attempt to use [getname2(u(AOBJ, %0, attack_source))]'s [u(AOBJ, %0, name)] attack on [getname2(u(fn.get-attack-orig-target, %0))] is sabotaged!)], 1), *BACKFIRE*, u(msg, u(AOBJ, %0, attacker), [switch(u(AOBJ, %0, attack_source), u(AOBJ, %0, attacker), [getname2(u(AOBJ, %0, attacker))]'s [u(AOBJ, %0, name)] attack aimed for [getname2(u(fn.get-attack-orig-target, %0))] backfires!, [getname2(u(AOBJ, %0, attacker))]'s attempt to use [getname2(u(AOBJ, %0, attack_source))]'s [u(AOBJ, %0, name)] attack on [getname2(u(fn.get-attack-orig-target, %0))] backfires!)], 1), *WILD*, u(msg, u(AOBJ, %0, attacker), [getname2(u(AOBJ, %0, attacker))]'s [switch(u(AOBJ, %0, attack_source), u(AOBJ, %0, attacker),, attempt to use [getname2(u(AOBJ, %0, attack_source))]'s%b)][u(AOBJ, %0, name)] attack on [getname2(u(fn.get-attack-orig-target, %0))] goes wild!, 1), *COVERED*, u(msg, u(AOBJ, %0, attacker), [getname2(u(AOBJ, %0, attacker))]'s attack against [getname2(u(fn.get-attack-orig-target, %0))] is blocked by [getname2(u(AOBJ, %0, target))]!, 1), *COVERFAIL*, u(msg, u(AOBJ, %0, attacker), [getname2(u(fn.get-attack-orig-target, %0))] fails to block [getname2(u(AOBJ, %0, attacker))]'s attack against [getname2(u(AOBJ, %0, target))]., 1))]
FN.DISPLAY-TALENTS [#617]: [header(Talents for [name(%0)])][iter(setunion(u(fn.get-all-abilities, %0, %1), ), if(hasattr(v(TACS_DB), list.talent-##), %r[space(2)][ljust(##, 20)]: [if(gt(words(setr(0, u(fn.get-talents, %0, %1, ##))), 0), iter(%q0, %i0,,\,%b), \(none\))]),,)]%r[header()]
FN.DISSOLVE-COMBINER [#617]: [@@(redistribute stat damage to active members)] [u(fn.redistribute-combiner-damage, %0)] [@@(redistribute END and ENERGON)] [u(msg, %0, [getname2(%0)] [switch(%1, 2, is broken up by the attack!, 1, dissolves under a barrage of attacks!, dissolves into its component [capstr(lcstr(get(%0/gestalt-group)))].)], 1)] [@@(teleport all team members to the object's location)] [iter(lcon(%0), tel(##, loc(%0)),,)] [@@(reset all of the group's IC Location)] [iter(u(fn.get-taken-combiner-members, %0), attrib_set(##/LOCATION_CURRENT, loc(%0)),,)] [@@(put the combiner object BACK IN THE HOPPER)] [tel(%0, getobj(GHOME))] [@@(Auto-remove combat status)] [u(fn.remove-combat-status, %0)]
FN.DO-DAMAGE [#617]: [if(u(fn.is-invulnerable, u(AOBJ, %0, target)), , u(fn.addto-core-stat, u(AOBJ, %0, target), Current, END, -%1))] [u(msg, u(AOBJ, %0, target), You took %1 damage.)] [u(fn.check-pilot, %0, %1)] [if(gte(%1,div(u(fn.get-core-stat, u(AOBJ, %0, target), MAX, END),2)),u(msg, u(AOBJ, %0, target), ansi(+gold,Massive damage!),1),]
FN.DO-DIRECT-DAMAGE [#617]: [setq(B, u(fn.build-attack-object, %2 , %2, %0))] [if(u(fn.is-invulnerable, %0), , u(fn.addto-core-stat, %0, Current, END, -%1))] [u(msg, %0, You took %1 damage[switch(%3,,.,%b%3)])] [u(fn.check-courage, %qB)] [u(fn.check-stat-damage, %qB, %1)] [u(fn.knockout-check, %qB, %1)]
FN.DO-EFFECTS [#617]: iter(u(AOBJ, %0, Effect), u(fn.effect-##, %0, %1),,)
FN.DO-EVADE-DODGE [#617]: [u(fn.deduct-energon, u(AOBJ, %0, target), u(fn.get-evade-dodge-cost, %0))][u(msg, u(AOBJ, %0, TARGET), [getname2(u(AOBJ, %0, TARGET))] expertly evades [getname2(u(AOBJ, %0, attacker))]'s attack!, 1)]
FN.DO-KNOCKOUT [#617]: [u(msg, setr(2, u(AOBJ, %0, target)), [getname2(%q2)] [if(u(fn.is-species, %q2, Vehicle Base Hologram), is completely disabled., falls to the ground\, unconscious.)],1)] [u(fn.add-combat-flag, %q2, UNCON)] [u(fn.forcefield-check, %q2)] [u(FN.CHECK-UNCAPTURE-KNOCKOUT, %q2)] [trigger(%q2, AUNCON, u(AOBJ, %0, attacker))]
FN.DO-STAT-DAMAGE [#617]: [if(u(fn.is-invulnerable, u(AOBJ, %0, target)), , [setq(X, first(shuffle(STR STR FRP FRP ACC ACC AGL AGL VEL)))] [setq(statDamage, round(div(mul(%1, %3), if(gte(u(fn.get-current-mode-stat, u(AOBJ, %0, target), SIZE), 11), v(PARAM.COMBINER-STAT-DAMAGE-REDUCE), 1)), 0))] [iter(u(fn.get-modes, u(AOBJ, %0, target)), u(fn.addto-mode-stat, u(AOBJ, %0, target), CURRENT, ##, %qX, mul(%q<statDamage>, -1)),,)] [if(gt(%q<statDamage>, 0), u(msg, u(AOBJ, %0, target), [switch(u(AOBJ, %0, attacker), u(AOBJ, %0, target), You have foolishly [switch(%2, 1, corrupted, 2, slightly corrupted, damaged)] your own, [getname2(u(AOBJ, %0, attacker))]'s attack has [switch(%2, 1, corrupted, 2, slightly corrupted, damaged)] your)] [u(fn.get-stat-fullname, %qX)][if(%2, %bsystems)]!))])]
FN.EFFECT-AMMO [#617]: 
FN.EFFECT-BLIND [#617]: [u(msg, u(AOBJ, %0, target), That attack has temporarily affected [getname2(u(AOBJ, %0, target))]'s Accuracy. (Blinded), 1)] [u(fn.add-combat-flag, u(AOBJ, %0, target), BLINDED)]
FN.EFFECT-BLIND2 [#617]: [u(msg, u(AOBJ, %0, target), That attack has temporarily limited [getname2(u(AOBJ, %0, target))]'s Accuracy! (Blinded), 1)] [u(fn.add-combat-flag, u(AOBJ, %0, target), BLINDED2)]
FN.EFFECT-BREAKUP [#617]: if(u(fn.is-combiner, u(AOBJ, %0, target)), [u(msg,[getname2(u(AOBJ, %0, attacker))]'s attack brings down [getname2(u(AOBJ, %0, target))]!)] [u(fn.dissolve-combiner, u(AOBJ, %0, target), 2)])
FN.EFFECT-CONFUSE [#617]: [u(msg, u(AOBJ, %0, target), You can't seem to think straight...)] [u(fn.add-combat-flag, u(AOBJ, %0, target), CONFUSED)]
FN.EFFECT-CORRUPT [#617]: [if(u(fn.is-invulnerable, u(AOBJ, %0, target)), , [setq(X, first(shuffle(STR STR FRP FRP ACC ACC AGL AGL VEL)))] [iter(u(fn.get-modes, u(AOBJ, %0, target)), u(fn.addto-mode-stat, u(AOBJ, %0, target), Current, ##, %qX, u(fn.calculate-stat-damaging, %0, Corrupt), 1),,)] [u(msg, u(AOBJ, %0, target), That attack has corrupted your [u(fn.get-stat-fullname, %qX)] systems!), 1)]
FN.EFFECT-CORRUPTV2 [#617]: [if(u(fn.is-invulnerable, u(AOBJ, %0, target)), , [setq(X, first(shuffle(STR STR FRP FRP ACC ACC AGL AGL VEL)))] [setq(statDamage, round(div(mul(%1, %3), if(gte(u(fn.get-current-mode-stat, u(AOBJ, %0, target), SIZE), 11), v(PARAM.COMBINER-STAT-DAMAGE-REDUCE), 1)), 0))] [iter(u(fn.get-modes, u(AOBJ, %0, target)), u(fn.addto-mode-stat, u(AOBJ, %0, target), Current, ##, %qX, u(fn.calculate-stat-damaging, %0, Corrupt), 1),,)] [[getname2(u(AOBJ, %0, attacker))]'s attack has corrupted your [u(fn.get-stat-fullname, %qX)][if(%2, %bsystems)]!]
FN.EFFECT-CRIPPLE [#617]: [u(msg, u(AOBJ, %0, target), That attack has temporarily impaired [getname2(u(AOBJ, %0, target))]'s Agility. (Crippled), 1)] [u(fn.add-combat-flag, u(AOBJ, %0, target), CRIPPLED)]
FN.EFFECT-CRIPPLE2 [#617]: [u(msg, u(AOBJ, %0, target), That attack has temporarily limited [getname2(u(AOBJ, %0, target))]'s Agility! (Crippled), 1)] [u(fn.add-combat-flag, u(AOBJ, %0, target), CRIPPLED2)]
FN.EFFECT-DISINTEGRATE [#617]: [u(msg, u(AOBJ, %0, target), [getname2(u(AOBJ, %0, attacker))]'s attack severely damages your armor!)] [iter(u(fn.get-modes, u(AOBJ, %0, target)), u(fn.addto-mode-stat, u(AOBJ, %0, target), Current, ##, Armor, u(fn.calculate-armor-damaging, %0, DISINTEGRATE), 1),,)]
FN.EFFECT-DIZZY [#617]: [u(msg, u(AOBJ, %0, target), That attack has temporarily mildly impaired [getname2(u(AOBJ, %0, target))]'s Agility and Accuracy. (Dizzy), 1)] [u(fn.add-combat-flag, u(AOBJ, %0, target), DIZZY)]
FN.EFFECT-DRAIN [#617]: [u(msg, u(AOBJ, %0, target), [getname2(u(AOBJ, %0, attacker))]'s attack drains your energon reserves.)] [u(fn.deduct-energon, u(AOBJ, %0, target), max(1, div(v(param.energon-drain), u(AOBJ, %0, area_div))))]
FN.EFFECT-FAULTY [#617]: 
FN.EFFECT-FEAR [#617]: [u(msg, u(AOBJ, %0, target), [getname2(u(AOBJ, %0, attacker))]'s attack has decreased your Courage.)] [u(fn.addto-core-stat, u(AOBJ, %0, target), CURRENT, COU, mul(-1, add(8, rand(9))))] [u(fn.check-courage, %0)]
FN.EFFECT-FEED [#617]: 
FN.EFFECT-GALVCANNON [#617]: [@@(nuke mode stats)] [iter(u(fn.get-modes, u(AOBJ, %0, target)), iter(STR ACC FRP AGL VEL, u(fn.set-mode-stat, u(AOBJ, %0, target), CURRENT, %i1, %i0, div(u(fn.get-mode-stat, u(AOBJ, %0, target), CURRENT, %i1, %i0), v(PARAM.galvcannon-stat-damage))),,),,)]
FN.EFFECT-HEAVY [#617]: [u(msg, u(AOBJ, %0, target), That attack has slowed [getname2(u(AOBJ, %0, target))]\, making [obj(u(AOBJ, %0, target))] less efficient., 1)] [u(fn.add-combat-flag, u(AOBJ, %0, target), HEAVY)] [attrib_set([u(AOBJ, %0, target)]/AUX`TEMP`HEAVY_COUNT, 0)]
FN.EFFECT-LOCKON [#617]: [u(msg, u(AOBJ, %0, target), That attack has locked on [getname2(u(AOBJ, %0, target))]. (LOCKON), 1)] [u(fn.add-combat-flag, u(AOBJ, %0, target), LOCKON)]
FN.EFFECT-MINI-CORRUPT [#617]: [if(u(fn.is-invulnerable, u(AOBJ, %0, target)), , [setq(X, first(shuffle(STR STR FRP FRP ACC ACC AGL AGL VEL)))] [iter(u(fn.get-modes, u(AOBJ, %0, target)), u(fn.addto-mode-stat, u(AOBJ, %0, target), Current, ##, %qX, u(fn.calculate-stat-damaging, %0, Mini-Corrupt), 1),,)] [u(msg, u(AOBJ, %0, target), That attack has slightly corrupted your [u(fn.get-stat-fullname, %qX)] systems!), 1)]
FN.EFFECT-MINI-GALVCANNON [#617]: [@@(mini-nuke mode stats)] [iter(u(fn.get-modes, u(AOBJ, %0, target)), iter(STR ACC FRP AGL VEL, u(fn.set-mode-stat, u(AOBJ, %0, target), CURRENT, %i1, %i0, round(fdiv(u(fn.get-mode-stat, u(AOBJ, %0, target), CURRENT, %i1, %i0), v(PARAM.mini-galvcannon-stat-damage)), 0)),,),,)]
FN.EFFECT-MINICORRUPT [#617]: u(fn.do-stat-damage, %0, %1, 1, 1)
FN.EFFECT-MODE-LOCK [#617]: [u(msg, u(AOBJ, %0, target), That attack has mode-locked2 [getname2(u(AOBJ, %0, target))]. (MODE-LOCKED2), 1)] [u(fn.add-combat-flag, u(AOBJ, %0, target),MODE-LOCKED2)]
FN.EFFECT-OUCH [#617]: u(fn.do-direct-damage, u(AOBJ, %0, attack_source), mul(u(AOBJ, %0, damage_level), v(PARAM.OUCH)), u(AOBJ, %0, attack_source), from that attack.)
FN.EFFECT-RECOIL [#617]: 
FN.EFFECT-REPEAT [#617]: switch(u(AOBJ, %0, target), u(AOBJ, %0, attacker), u(msg, u(AOBJ, %0, attacker), This repeating attack has no effect on you.), [u(fn.add-combat-flag, u(AOBJ, %0, target), REPEAT)] [attrib_set(u(AOBJ, %0, target)/AUX`TEMP`REPEAT`ATTACKOBJECT, %0)] [attrib_set(u(AOBJ, %0, target)/AUX`TEMP`REPEAT`DAMAGE, v(PARAM.REPEAT-BASE))] [attrib_set(u(AOBJ, %0, target)/AUX`TEMP`REPEAT`REMAINING, 2)])
FN.EFFECT-RISKY [#617]: 
FN.EFFECT-SAP [#617]: [u(msg, u(AOBJ, %0, target), That attack has sapped [getname2(u(AOBJ, %0, target))]'s strength., 1)] [u(fn.add-combat-flag, u(AOBJ, %0, Target), SAPPED)]
FN.EFFECT-SELF-DESTRUCT [#617]: 
FN.EFFECT-SHATTER [#617]: [u(msg, u(AOBJ, %0, target), [getname2(u(AOBJ, %0, attacker))]'s attack damages your armor.)] [iter(u(fn.get-modes, u(AOBJ, %0, target)), u(fn.addto-mode-stat, u(AOBJ, %0, target), Current, ##, Armor, u(fn.calculate-armor-damaging, %0, SHATTER), 1),,)]
FN.EFFECT-STUN [#617]: if(u(fn.is-combiner, u(AOBJ, %0, target)), u(msg, u(AOBJ, %0, target), [getname2(u(AOBJ, %0, target))] shrugs off the effects of the attack., 1), [u(msg, u(AOBJ, %0, target), [getname2(u(AOBJ, %0, target))] has been temporarily incapacitated., 1)] [u(fn.add-combat-flag, u(AOBJ, %0, target), STUNNED)] [if(u(fn.has-combat-flag, u(AOBJ, %0, target), COVERING), u(fn.destroy-cover, u(AOBJ, %0, target)))])
FN.EFFECT-TKO [#617]: if(u(fn.is-combiner, u(AOBJ, %0, target)), u(msg, u(AOBJ, %0, attacker), That doesn't work so well against Combiners!), [u(msg, u(AOBJ, %0, target), [getname2(u(AOBJ, %0, attacker))]'s attack disables you instantly!)] [u(fn.do-knockout, %0)])
FN.EFFECT-TRAUMA [#617]: [if(eq(u(AOBJ, %0, area_div), 1), u(msg, u(AOBJ, %0, target), [getname2(u(AOBJ, %0, attacker))]'s attack has shocking and traumatic effects on [getname2(u(AOBJ, %0, target))]., 1))] [u(FN.EFFECT-[switch(rand(100), <25, HEAVY, <50, MINI-CORRUPT, <70, DRAIN, <80, CORRUPT, MODE-LOCK)], %0)]
FN.EFFECT-UNNERVE [#617]: [u(msg, u(AOBJ, %0, target), [getname2(u(AOBJ, %0, attacker))]'s attack has slightly decreased your Courage.)] [u(fn.addto-core-stat, u(AOBJ, %0, target), CURRENT, COU, mul(-1, add(4, rand(5))))] [u(fn.check-courage, %0)]
FN.EFFECT-VOLATILE [#617]: [if(eq(u(AOBJ, %0, area_div), 1), u(msg, u(AOBJ, %0, target), [getname2(u(AOBJ, %0, attacker))]'s attack has strange and mysterious effects on [getname2(u(AOBJ, %0, target))]., 1))] [u(FN.EFFECT-[switch(rand(100), <25, CRIPPLE, <50, BLIND, <60, STUN, <75, CONFUSE, SHATTER)], %0)]
FN.EFFECT-VULNERABLE [#617]: if(u(fn.has-combat-flag, u(AOBJ, %0, attacker), STUNNED), @@(already stunned do nothing), [u(msg, u(AOBJ, %0, attacker), [getname2(u(AOBJ, %0, attacker))]'s attack leaves [obj(u(AOBJ, %0, attacker))] temporarily incapacitated!,1)] [u(fn.add-combat-flag, u(AOBJ, %0, attacker), STUNNED)])
FN.FINALIZE [#617]: [u(fn.randomize,%0)] [u(fn.copy-schema,%0,MAX,CURRENT)] [attrib_set(%0/STATS`FINALIZED, %1)]
FN.FORCE-UNHIDE-TARGET [#617]: [u(msg, %0, [getname2(%0)] has been found!, 1)] [u(fn.set-core-stat, %0, Current, Defense-Level, Off-Guard)] [iter(CLOAKED SNEAKING HIDING, u(fn.remove-combat-flag, %0, ##),,)]
FN.FORCEFIELD-CHECK [#617]: [if(u(fn.has-combat-flag, %0, FF-CAST), u(fn.destroy-forcefield, %0))] [if(u(fn.has-combat-flag, %0, FF), u(fn.destroy-forcefield, get(%0/AUX`TEMP`FF`FROM)))]
FN.FORCEFIELD-STATUS [#617]: if(or(hasattr(%0,AUX`TEMP`FF`TO),hasattr(%0,AUX`TEMP`FF`FROM)), [setq(M,0)][if(hasattr(%0,AUX`TEMP`FF`TO), You are casting a forcefield around [getname2(get(%0/AUX`TEMP`FF`TO))].[setq(M,1)])][if(hasattr(%0,AUX`TEMP`FF`FROM),[if(%qM,%r)]You are protected by a forcefield from [getname2(get(%0/AUX`TEMP`FF`FROM))].)], You are not casting or being protected by any forcefields.)
FN.FORMAT-SKILLS [#617]: if(gt(words(%0, \,), 1), map(#lambda/trim(\%0), %0, \,, |), map(#lambda/trim(edit(\%0, _, %%b)), %0,,|))
FN.FULL-SYSTEMS [#617]: [setq(M,if(%1,%1,u(curmode,%0)))][header(Full Systems Check - [getname2(%0)])]%r[u(fn.full-systems-bars-header,%0,%qM)][iter(lnum(10,1),%r[u(fn.full-systems-bars-row,%0,%qM,##)],,)]%r[u(fn.full-systems-bars-footer,%0,%qM)]%r[u(fn.full-systems-footer,%0,%qM)]%r[header()]
FN.FULL-SYSTEMS-ATTACKNAME-HELPER [#617]: [u(fn.get-attack-attrib-stat,%0,NAME)] \[[u(fn.get-attack-attrib-stat,%0,DAMAGE-LEVEL)]\]
FN.FULL-SYSTEMS-BARS-FOOTER [#617]: [setq(0,End Cou Energon)][setq(1,Acc Str Frp Agl Vel Armor)][space(5)][repeat(-, 37)][space(3)][u(fn.full-systems-bars-row-helper-0,%0,%1)]%rCUR: [iter(%q0,[ljust(ansi(h[u(fn.get-percent-color,u(fn.get-core-stat-pc,%0,##))], rjust(u(fn.get-core-stat,%0,CURRENT,##), 2, 0)),3)]%b,,)][space(2)][iter(%q1,[ljust(ansi(h[u(fn.get-percent-color,u(fn.get-mode-stat-pc,%0,%1,##))], rjust(u(fn.get-mode-stat,%0,CURRENT,%1,##), 2, 0)),3)]%b,,)]%rMAX: [iter(%q0,[ljust(ansi(h,rjust(u(fn.get-core-stat,%0,MAX,##), 2, 0)),3)]%b,,)][space(2)][iter(%q1,[ljust(ansi(h,rjust(u(fn.get-mode-stat,%0,MAX,%1,##), 2, 0)),3)]%b,,)]
FN.FULL-SYSTEMS-BARS-HEADER [#617]: [setq(0,End^End Cou^Cou Energon^Ener Acc^Acc Str^Str Frp^Frp Agl^Agl Vel^Vel Armor^Arm)][space(5)][iter(%q0,[ansi(h,after(##,^))],,%b)]%r[space(5)][repeat(-, 37)]
FN.FULL-SYSTEMS-BARS-ROW [#617]: [setq(0,End Cou Energon)][setq(1,Acc Str Frp Agl Vel Armor)][rjust(switch(%2,10,100%%,5,50%%,1,10%%,.),4)]%b[iter(%q0,[ljust(if(gte(setr(2,u(fn.get-core-stat-pc,%0,%i0)),mul(%2, 10)),ansi(h[u(fn.get-percent-color,%q2)],\#\#),%b%b),4)],,)][space(2)][iter(%q1,[ljust(if(gte(setr(2,u(fn.get-mode-stat-pc,%0,%1,%i0)),mul(%2, 10)),ansi(h[u(fn.get-percent-color,%q2)],\#\#),%b%b),4)],,)][space(3)][u(fn.full-systems-bars-row-helper-%2,%0,%1)]
FN.FULL-SYSTEMS-BARS-ROW-HELPER-10 [#617]: [ansi(h,Mode %1 - [left(u(fn.get-mode-stat,%0,CURRENT,%1,TYPE),20)])]
FN.FULL-SYSTEMS-BARS-ROW-HELPER-2 [#617]: [if(setr(J,index(u(fn.list-protection-types,%0,CURRENT,%1), , 4, 1)),vs. %qJ: [switch(u(fn.get-protection,%0,CURRENT,u(curmode, %0),%qJ),>0,+#$,#$)])]
FN.FULL-SYSTEMS-BARS-ROW-HELPER-3 [#617]: [if(setr(J,index(u(fn.list-protection-types,%0,CURRENT,%1), , 3, 1)),vs. %qJ: [switch(u(fn.get-protection,%0,CURRENT,u(curmode, %0),%qJ),>0,+#$,#$)])]
FN.FULL-SYSTEMS-BARS-ROW-HELPER-4 [#617]: [if(setr(J,index(u(fn.list-protection-types,%0,CURRENT,%1), , 2, 1)),vs. %qJ: [switch(u(fn.get-protection,%0,CURRENT,u(curmode, %0),%qJ),>0,+#$,#$)])]
FN.FULL-SYSTEMS-BARS-ROW-HELPER-5 [#617]: [if(setr(J,index(u(fn.list-protection-types,%0,CURRENT,%1), , 1, 1)),vs. %qJ: [switch(u(fn.get-protection,%0,CURRENT,u(curmode, %0),%qJ),>0,+#$,#$)])]
FN.FULL-SYSTEMS-BARS-ROW-HELPER-7 [#617]: Cou/End: [ansi(h,setr(C,u(cou-end,%0)))] \([if(lt(setr(E,u(fn.get-core-stat,%0,CURRENT,END)), %qC),Over Limit!,[sub(%qE,%qC)] points left)]\)
FN.FULL-SYSTEMS-BARS-ROW-HELPER-8 [#617]: Defense: [ansi(h,setr(D,ucstr(u(fn.get-core-stat,%0,CURRENT,DEFENSE-LEVEL))))] \([switch(get(v(TACS_DB)/PARAM.DEFENSE-DEF-%qD),<0,[get(v(TACS_DB)/PARAM.DEFENSE-DEF-%qD)],+[get(v(TACS_DB)/PARAM.DEFENSE-DEF-%qD)])]\)
FN.FULL-SYSTEMS-BARS-ROW-HELPER-9 [#617]: Size [u(fn.get-mode-stat,%0,CURRENT,%1,SIZE)]
FN.FULL-SYSTEMS-FOOTER [#617]: [repeat(-, add(5,37))]%r[ansi(h,Abilities:)] [map(#lambda/capstr(lcstr(\%0)), u(fn.get-mode-stat,%0,CURRENT,%1,abilities),,\,%b)][if(u(fn.has-active-ability-booster, %0), %r[ansi(hc, Booster Abilities:)] [map(#lambda/capstr(lcstr(\%0)), u(fn.get-active-booster-abilities, %0),,\,%b)])]%r[ansi(h,Attacks:)] [map(fn.full-systems-attackname-helper, u(fn.get-attacks,%0,CURRENT,%1),,\,%b)]%r[ansi(h,Combat Flags:)] [u(fn.get-core-stat,%0, CURRENT, COMBAT-FLAGS)]
FN.FULL-SYSTEMS-WRAP-HELPER [#617]: wrap(map(#lambda/ucstr(\%0), %0), 36, add(2,sub(36,strlen(%0))), ^)
FN.GET-ACCURACY-BONUS [#617]: add(mul(u(fn.has-effect, %0, ACCURATE), v(PARAM.accurate-bonus)), mul(u(fn.has-effect, %0, INACCURATE), v(PARAM.inaccurate-bonus)), mul(u(fn.has-combat-flag, u(AOBJ, %0, attacker), DIZZY), v(PARAM.dizzy-bonus)), mul(u(fn.has-combat-flag, u(AOBJ, %0, attacker), SCARED), v(PARAM.scared-bonus)), u(fn.get-crackshot-bonus, %0), mul(u(fn.or-combat-flags, u(AOBJ, %0, attacker), BLINDED BLINDED2), v(PARAM.blinded-bonus)))
FN.GET-ACTIVATED-BOOSTER-BY-TYPE [#617]: first(filter(#lambda/strmatch(%1, u(fn.get-aux-stat, \%0, BOOST_TYPE)), u(fn.get-activated-boosters, %0)))
FN.GET-ACTIVATED-BOOSTERS [#617]: filter(#lambda/and(u(fn.can-use, %0, \%0), u(fn.get-aux-stat, \%0, ACTIVATED)), u(fn.get-boosters-in-inventory, %0))
FN.GET-ACTIVE-BOOSTER-ABILITIES [#617]: iter(u(fn.get-activated-booster-by-type, %0, Ability), u(fn.get-current-mode-stat, ##, Abilities),,)
FN.GET-ACTIVE-COMBINER-MEMBERS [#617]: filter(#lambda/if(hasflag(\%0, Connected), u(fn.ooc-or-combat-ok, \%0), 0), u(fn.get-taken-combiner-members, %0))
FN.GET-ACTIVE-LOCATED-COMBINER-MEMBERS [#617]: filter(#lambda/strmatch(loc(%1), loc(\%0)), u(fn.get-active-combiner-members, %0))
FN.GET-AGILITY-BONUS [#617]: add(mul(u(fn.has-combat-flag, u(AOBJ, %0, target), DIZZY), v(PARAM.dizzy-bonus)), mul(u(fn.or-combat-flags, u(AOBJ, %0, target), CRIPPLED CRIPPLED2), v(PARAM.crippled-bonus)))
FN.GET-ALL-ABILITIES [#617]: map(#lambda/ucstr(\%0), setunion(map(#lambda/u(fn.get-mode-stat, %0, %1, \%0, ABILITIES), u(fn.get-modes, %0, %1)), ))
FN.GET-ALL-AMMO-LEVELS [#617]: setunion(map(#lambda/strcat(u(fn.get-attack-attrib-stat, \%0, Ammo_Type),^, u(fn.get-attack-attrib-stat, \%0, Max_Ammo),^,u(fn.get-attack-attrib-stat, \%0, Ammo)), filter(#lambda/gt(u(fn.get-attack-attrib-stat, \%0, max_ammo), 0), u(fn.get-all-attack-attribs, %0, %1)),,|),,|)
FN.GET-ALL-ATTACK-ATTRIBS [#617]: u(fn.list-attacks, %0, iter(u(fn.get-modes, %0, %1), u(fn.get-attack-attribs, %0, %1, ##),,%b))
FN.GET-ALL-TARGET-ERRORS [#617]: filter(#lambda/not(strmatch(OK, last(\%0, ^))), %0, |)
FN.GET-AMMO [#617]: max(0, u(fn.get-attack-stat, %0, CURRENT, %1, %2, AMMO))
FN.GET-AMMO-COST [#617]: if(u(fn.has-effect, %0, ONESHOT), 1, max(1, div(u(AOBJ, %0, area_div), 2)))
FN.GET-ANALYZE-DAMAGE-BONUS [#617]: if(u(fn.has-analysis-data, u(AOBJ, %0, attacker), u(AOBJ, %0, target)), add(v(PARAM.analyze-bonus), div(u(fn.get-core-stat, get(u(AOBJ, %0, attacker)/AUX`TEMP`ANALYSIS`[u(AOBJ, %0, target)]), Current, INT), 10), get(u(AOBJ, %0, attacker)/AUX`TEMP`ANALYSIS`[u(AOBJ, %0, target)]`DAMAGE-BONUS)), 0)
FN.GET-AREA-ENERGON-COST [#617]: if(u(fn.is-area-attack, %0), div(mul(div(add(u(fn.get-base-energon-cost,%0), u(fn.get-effect-energon-cost, %0)), v(PARAM.area-energon-div)),dec(u(AOBJ, %0, area_div))), if(u(fn.is-chain-attack, %0), 2, 1)), 0)
FN.GET-AREA-MULTIPLIER [#617]: if(gt(u(AOBJ, %0, area_div), 1), v(PARAM.area-damage-multiplier), 1)
FN.GET-ARMOR-BONUS [#617]: if(or(u(fn.has-effect, %0, NO-ARMOR), and(u(fn.is-combiner, u(AOBJ, %0, target)), u(fn.has-effect, %0, G-MONEY))), 0, u(fn.calculate-armor-bonus, sub(max(0, sub(u(fn.get-current-mode-stat, u(AOBJ, %0, target), ARMOR), if(u(fn.has-effect, %0, PIERCE), v(PARAM.PIERCE-REDUCTION), 0))), u(fn.get-protection-armor-bonus, %0))))
FN.GET-ARTIFACT-ARMOR-BONUS [#617]: if(setr(X, u(fn.get-activated-booster-by-type, u(AOBJ, %0, target), ARMOR)), [mul(-1, u(fn.get-aux-stat, %qX, BOOST_AMOUNT))][setq(X, u(fn.use-charge, %qX, %0))], 0)
FN.GET-ARTIFACT-ATTACK-BONUS [#617]: if(cand(eq(u(AOBJ, %0, area_div), 1), setr(X, u(fn.get-activated-booster-by-type, u(AOBJ, %0, attacker), ATTACK))), [u(fn.get-aux-stat, %qX, BOOST_AMOUNT)][setq(X, u(fn.use-charge, %qX, %0))], 0)
FN.GET-ARTIFACT-DAMAGE-BONUS [#617]: if(setr(X, u(fn.get-activated-booster-by-type, u(AOBJ, %0, attacker), DAMAGE)), [u(fn.get-aux-stat, %qX, BOOST_AMOUNT)][setq(X, u(fn.use-charge, %qX, %0))], 0)
FN.GET-ARTIFACT-DEFENSE-BONUS [#617]: if(setr(X, u(fn.get-activated-booster-by-type, u(AOBJ, %0, target), DEFEND)), [u(fn.get-aux-stat, %qX, BOOST_AMOUNT)][setq(X, u(fn.use-charge, %qX, %0))], 0)
FN.GET-ATTACK-ATTRIB-ENERGON-COST [#617]: u(fn.get-energon-cost, u(fn.create-cancelled-attack-object, u(fn.build-attack-object, before(%0, ^), before(%0, ^), , before(%0, ^), after(%0, ^), 1)))
FN.GET-ATTACK-ATTRIB-STAT [#617]: get(first(%0,^)/[last(%0,^)]`%1)
FN.GET-ATTACK-ATTRIBS [#617]: sortkey(#lambda/after(\%0, ATTACK), lattrp(%0/STATS`%1`MODE%2`ATTACK*))
FN.GET-ATTACK-ORIG-TARGET [#617]: filter(#lambda/isdbref(\%0), u(AOBJ, %0, extra_flags))
FN.GET-ATTACK-STAT [#617]: switch([u(fn.is-attack-stat,%4)]_[u(FN.is-valid-mode,%0,%1,%2)]_[u(FN.is-valid-attack,%0,%1,%2,%3)], 0_?_?, #-20 INVALID ATTACK STAT, ?_0_?, #-21 INVALID MODE, ?_?_0, #-22 INVALID ATTACK, 1_1_1, get(%0/stats`%1`mode%2`attack%3`%4))
FN.GET-ATTACK-TYPE-BASE-STAT [#617]: switch(%0, *RANGED, FRP, *MELEE, STR, VELOCITY, VEL, MIND, INT, WILLPOWER, COU, SCIENCE, TECH, ENDURANCE, END, COMMAND, LDR, #-1 BADATTACKTYPE)
FN.GET-ATTACK-TYPE-BASE-STAT-TYPE [#617]: if(match(WILLPOWER MIND SCIENCE COMMAND ENDURANCE, %0), CORE, MODE)
FN.GET-ATTACKNUM-FROM-ATTACK-ATTRIB [#617]: after(last(%0, `), ATTACK)
FN.GET-ATTACKS [#617]: u(fn.list-attacks, %0, u(fn.get-attack-attribs, %0, if(%1, %1, CURRENT), if(%2, %2, u(curmode, %0))))
FN.GET-AUX-STAT [#617]: if(u(fn.is-aux-stat, %1), get(%0/AUX`PERM`%1), #-99 YOU SUCK)
FN.GET-AVAIL-ATTACKS [#617]: map(#lambda/after(\%0, |), sortkey(map.get-avail-attacks, map(#lambda/strcat(%0, |, \%0), setunion(squish(strcat(u(fn.get-avail-personal-attacks, %0), %b, u(fn.get-free-attacks), %b, u(fn.get-avail-control-attacks, %0), %b, u(fn.get-avail-weapon-obj-attacks, %0), %b, u(fn.get-avail-room-attacks, %0))), ))))
FN.GET-AVAIL-ATTACKS2 [#617]: map(#lambda/after(\%0, |), sortkey(map.get-avail-attacks, map(#lambda/strcat(%0, |, \%0), setunion(squish(strcat(u(fn.get-avail-personal-attacks, %0), %b, u(fn.get-free-attacks), %b, u(fn.get-avail-control-attacks, %0), %b, u(fn.get-avail-weapon-obj-attacks, %0), %b, u(fn.get-avail-room-attacks, %0))), ))))
FN.GET-AVAIL-CONTROL-ATTACKS [#617]: squish(iter(filter(#lambda/cand(cor(hastype(\%0, PLAYER), u(fn.is-vehicle, %0)), u(combat-ok, \%0)) , lcon(loc(%0))), if(u(fn.can-use, %0, ##), map(#lambda/strcat(##,^,\%0), u(fn.get-control-attacks, ##))),,%b))
FN.GET-AVAIL-PERSONAL-ATTACKS [#617]: u(fn.list-attacks, %0, u(fn.get-attack-attribs, %0, CURRENT, u(curmode,%0)))
FN.GET-AVAIL-ROOM-ATTACKS [#617]: u(fn.list-attacks, loc(%0), u(fn.get-cp-attacks, loc(%0), u(fn.get-occupied-cp, %0)))
FN.GET-AVAIL-WEAPON-OBJ-ATTACKS [#617]: iter(filter(#lambda/cand(u(fn.is-weapon-object, \%0), u(fn.can-use, %0, \%0)), setunion(lcon(%0), lcon(loc(%0)))), u(fn.list-attacks, ##, u(fn.get-attack-attribs, ##, CURRENT, 1)),,%b)
FN.GET-AVAILABLE-SCHEMA [#617]: setdiff(map(#lambda/after(\%0,STATS`), lattr(%0/STATS`)), FINALIZED)
FN.GET-BASE-DAMAGE [#617]: round(mul(add(mul(v(PARAM.DAMAGE-SLOPE), u(AOBJ, %0, damage_level)), v(PARAM.DAMAGE-INTERCEPT)), fdiv(add(u(fn.get-base-damage-stat-value, %0), u(fn.get-sapped-penalty, %0), switch(u(AOBJ, %0, attack_type), *MELEE, u(fn.get-support-bonus, u(AOBJ, %0, attacker), STR), 0), switch(u(AOBJ, %0, attack_type), *RANGED, u(fn.get-support-bonus, u(AOBJ, %0, attacker), FRP), 0)), v(PARAM.damage-stat-divisor))), 0)
FN.GET-BASE-DAMAGE-STAT-VALUE [#617]: switch(u(fn.get-attack-type-base-stat-type, u(AOBJ, %0, attack_type)), CORE, u(fn.get-core-stat, u(AOBJ, %0, attack_source), Current, u(fn.get-attack-type-base-stat, u(AOBJ, %0, attack_type))), MODE, u(fn.get-current-mode-stat, u(AOBJ, %0, attack_source), u(fn.get-attack-type-base-stat, u(AOBJ, %0, attack_type))), #-1 BADATTACKTYPE2)
FN.GET-BASE-ENERGON-COST [#617]: add(sub(mul(v(PARAM.energon-cost-per-level), u(AOBJ, %0, damage_level)), v(PARAM.base-energon-cost)), 0[@@(dec(words(u(AOBJ, %0, damage_type))))])
FN.GET-BIN-SIZE-IDENTIFIER [#617]: u(fn.get-attack-attrib-stat, %0, Bin_Type)
FN.GET-BOMBS [#617]: filter(#lambda/and(strmatch(%0, u(fn.get-aux-stat, \%0, created_by)), strmatch(Demolition, u(fn.get-aux-stat, \%0, created_ability)), not(u(fn.is-in-vault, \%0))), children(getobj(IWOP)))
FN.GET-BOOSTERS [#617]: filter(#lambda/and(strmatch(%0, u(fn.get-aux-stat, \%0, owner)), not(u(fn.is-in-hell, \%0))), children(getobj(BOOSTER)))
FN.GET-BOOSTERS-IN-INVENTORY [#617]: filter(#lambda/u(fn.is-booster, \%0), lcon(%0))
FN.GET-CANCELLED-EFFECT-LIST [#617]: map(#lambda/last(\%0, `), lattr(%0/AUX`PERM`CANCEL`*))
FN.GET-CAPTURE-POINTS [#617]: map(#lambda/after(\%0, `CP-), lattr(%0/AUX`PERM`CAPTURE-POINTS`CP-*))
FN.GET-CAPTURE-WIN-TEXT [#617]: switch(%0, INT, in a battle of WILLS, TECH, in an epic duel of NERDERY, STR, in a battle of BRUTE STRENGTH, VEL, in a RACE TO THE FINISH, AGL, in a duel of NINJA BACKFLIPS, COU, in a battle of INTESTINAL FORTITUDE, LDR, in a clash of MIGHTY ORATORY, ACC, in a battle of PRECISION, ARMOR, in an epic CLASH OF THE TITANS, ENERGON, drinking contest, END, staring contest, battle of some kind)
FN.GET-COMBATANTS-IN-ROOM [#617]: filter(#lambda/u(combat-ok, \%0), lcon(loc(%0)))
FN.GET-COMBINER-STAT-PERCENTAGE [#617]: switch(%1, END, 1, get(%0/AUX`PERM`COMBINER-PC`%1))
FN.GET-CONTROL-ATTACKS [#617]: filter(#lambda/t(match(get(%0/\%0`EFFECT), CONTROL)), u(fn.get-attack-attribs, %0, current, u(curmode, %0)))
FN.GET-CORE-STAT [#617]: if(u(fn.is-core-stat,%2),get(%0/STATS`%1`%2),#-5 INVALID CORE STAT)
FN.GET-CORE-STAT-PC [#617]: switch(round(mul(100,fdiv(u(fn.get-core-stat,%0,CURRENT,%1),u(fn.get-core-stat,%0,MAX,%1))), 0), #-1 ARGUMENTS MUST BE NUMBERS, 0, #$)
FN.GET-COVERED-TARGET [#617]: [@@(ARGUMENTS // 0 - COVERED TARGET OF AN ATTACK)][get(%0/AUX`TEMP`COVERED)]
FN.GET-CP-ARMOR-BONUS [#617]: switch(setr(C, u(fn.get-occupied-cp, u(AOBJ, %0, target))),, 0, mul(-1, u(fn.get-cp-stat, loc(u(AOBJ, %0, target)),  %qC, ARMOR-MOD)))
FN.GET-CP-ATTACK-MODIFIER [#617]: switch(setr(C, u(fn.get-occupied-cp, u(AOBJ, %0, attacker))),, 0, u(fn.get-cp-stat, loc(u(AOBJ, %0, attacker)),  %qC, OFF-MOD))
FN.GET-CP-ATTACKS [#617]: filter(#lambda/t(match(get(%0/\%0`EFFECT), CP-%1)), u(fn.get-attack-attribs, %0, current, 1))
FN.GET-CP-DAMAGE-BONUS [#617]: switch(setr(C, u(fn.get-occupied-cp, u(AOBJ, %0, attack_source))),, 0, u(fn.get-cp-stat, loc(u(AOBJ, %0, attack_source)),  %qC, DAMAGE-MOD))
FN.GET-CP-DEFENSE-MODIFIER [#617]: switch(setr(C, u(fn.get-occupied-cp, u(AOBJ, %0, target))),, 0, u(fn.get-cp-stat, loc(u(AOBJ, %0, target)),  %qC, DEF-MOD))
FN.GET-CP-STAT [#617]: switch([u(fn.room-has-cp, %0, %1)]_[u(fn.is-valid-cp-stat, %2)], 0_?, #-26 ROOM %0 HAS NO CAPTURE POINT "%1", ?_0, #-27 INVALID CP STAT "%2", 1_1, get(%0/AUX`PERM`CAPTURE-POINTS`CP-%1`%2))
FN.GET-CRACKSHOT-BONUS [#617]: if(u(fn.has-crackshot-data, u(AOBJ, %0, attacker), u(AOBJ, %0, target)), get(u(AOBJ, %0, attacker)/AUX`TEMP`CRACKSHOT`[u(AOBJ, %0, target)]`ACCURACY-BONUS), 0)
FN.GET-CRITICAL-HIT-BONUS [#617]: 10
FN.GET-CURRENT-MODE-STAT [#617]: u(fn.get-mode-stat, %0, Current, u(curmode, %0), %1)
FN.GET-CUSTOM-ATTACK-NAME [#617]: if(hasattr(%0, AUX`PERM`ATTACKNAMES`%1), get(%0/AUX`PERM`ATTACKNAMES`%1), %1)
FN.GET-DAMAGE-SIZE-MODIFIER [#617]: if(u(fn.has-effect, %0, NO-SIZE), 0, switch(u(AOBJ, %0, attack_type), *RANGED, 0, WILLPOWER, 0, COMMAND, 0, MIND, 0, SCIENCE, 0, mul(v(PARAM.size-damage), sub(u(fn.get-current-mode-stat, u(AOBJ, %0, attack_source), SIZE), u(fn.get-current-mode-stat, u(AOBJ, %0, target),  SIZE)))))
FN.GET-DEFENSE-LEVEL-ATTACK-MODIFIER [#617]: get(v(TACS_DB)/PARAM.DEFENSE-OFF-[u(fn.get-core-stat, u(AOBJ, %0, attacker), Current, Defense-Level)])
FN.GET-DEFENSE-LEVEL-DEFENSE-MODIFIER [#617]: get(v(TACS_DB)/PARAM.DEFENSE-DEF-[u(fn.get-core-stat, u(AOBJ, %0, target), Current, Defense-Level)])
FN.GET-DISPLAYED-DEFENSE-LEVEL [#617]: u(fn.display-defense-level, %0, u(fn.get-core-stat, %0, Current, Defense-Level))
FN.GET-EFFECT-ENERGON-COST [#617]: lmath(add, map(#lambda/v(PARAM.Effect-Cost-\%0), u(AOBJ, %0, effect)))
FN.GET-EITHER-STAT [#617]: switch([u(fn.is-core-stat, %2)]_[u(fn.is-mode-stat, %2)], 1_?, u(fn.get-core-stat, %0, %1, %2), ?_1, u(fn.get-mode-stat, %0, %1, if(%3, %3, u(curmode, %0)), %2), #-41 INVALID CORE OR MODE STAT)
FN.GET-EITHER-STAT-PC [#617]: switch([u(fn.is-core-stat, %1)]_[u(fn.is-mode-stat, %1)], 1_?, u(fn.get-core-stat-pc, %0, %1), ?_1, u(fn.get-mode-stat-pc, %0, if(%2, %2, u(curmode, %0)), %1), #-41 INVALID CORE OR MODE STAT)
FN.GET-ENERGON-COST [#617]: switch(1, u(fn.is-unstoppable, u(AOBJ, %0, attacker)), 0, u(fn.has-effect, %0, AMMO), add(mul(u(fn.has-effect, %0, OVERPOWERED2), v(PARAM.EFFECT-COST-OVERPOWERED2)),mul(u(fn.has-combat-flag, u(AOBJ, %0, Attacker), HEAVY), v(PARAM.EFFECT-COST-OVERPOWERED)),mul(u(fn.has-effect, %0, OVERPOWERED), v(PARAM.EFFECT-COST-OVERPOWERED)),0), ceil(fdiv(add(u(fn.get-base-energon-cost, %0), u(fn.get-area-energon-cost, %0), u(fn.get-effect-energon-cost, %0), u(fn.get-heavy-modifier, %0)), if(u(fn.is-chain-attack, %0), 2, 1))))
FN.GET-ENERGON-UPPER-BOUND [#617]: round(mul(u(fn.get-core-stat, %0, Max, Energon), v(PARAM.maximum-energon-limit)), 0)
FN.GET-EVADE-DODGE-COST [#617]: max(10, floor(fdiv(sub(u(fn.get-current-mode-stat, u(AOBJ, %0, Attacker), ACC), u(fn.get-current-mode-stat, u(AOBJ, %0, Target), AGL)), 2)))
FN.GET-FACTION-COLOR [#617]: switch(faction(%0), Autobot, hr, Decepticon, hm, Terran, hb, Junkion, hy, Quintesson, hg, h)
FN.GET-FF-PROTECTION [#617]: trim(if(u(fn.has-combat-flag, u(AOBJ, %0, target), FF), [@@(Set G to targets ENERGON level)] [setq(G, u(fn.get-core-stat, u(AOBJ, %0, target), Current, Energon))] [@@(Set F to effect cost in energon of the attack)] [setq(F, u(fn.get-effect-energon-cost, %0))] [if(gte(%1, %qF), [@@(Damage-Based Forcefield Drain)] [if(gte(%1, %qG), [@@(More damage than we can absorb)] [@@(Set Y to leftover damage)] [setq(Y, sub(%1, %qG))] [u(fn.damage-forcefield, %0, %qG)] 1^%qY, [@@(absorbed all damage)] [u(fn.damage-forcefield, %0, %1)] 0^0)], [@@(Effect-based forcefield Drain)] [if(gte(%qF, %qG), [@@(more damage than we can absorb)] [u(fn.damage-forcefield, %0, %qG)] 0^0, [@@(enough energon to cover it)] [u(fn.damage-forcefield, %0, %qF)] 0^0)] )], [@@(No forcefield here)]#-1))
FN.GET-FORGED-WEAPONS [#617]: filter(#lambda/and(strmatch(%0, u(fn.get-aux-stat, \%0, created_by)), strmatch(Weaponsmith, u(fn.get-aux-stat, \%0, created_ability)), not(u(fn.is-in-hell, \%0))), children(getobj(IWOP)))
FN.GET-FREE-ATTACKS [#617]: u(fn.list-attacks, v(DB.FREE-ATTACKS), u(fn.get-attack-attribs, v(DB.FREE-ATTACKS), FREE, 1))
FN.GET-FROM-ATTACK-OBJECT [#617]: if(setr(M,match(v(list.attack-object-fields), %1)), index(%0, |, %qM, 1), #-24 BAD ATTACK OBJECT FIELD "%1")
FN.GET-GET-CRITICAL-HIT-BONUS [#617]: if(gt(add(div(u(fn.get-core-stat, u(AOBJ, %0, attacker), Current, INT),10),mul(u(fn.has-effect, %0, LUCKY),v(PARAM.lucky-bonus)),mul(u(fn.has-effect, %0, UNLUCKY),v(PARAM.unlucky-bonus))),rand(0,100)),[5][u(msg, u(AOBJ, %0, attacker), [ansi(hr,Critical Hit!)], 1)],0)
FN.GET-HEAVY-MODIFIER [#617]: if(u(fn.has-combat-flag, u(AOBJ, %0, Attacker), HEAVY), v(PARAM.EFFECT-COST-OVERPOWERED), 0)
FN.GET-HIDE-SCORE [#617]: get(%0/AUX`TEMP`HIDE)
FN.GET-INACTIVE-COMBINER-MEMBERS [#617]: filter(#lambda/if(hasflag(\%0, Connected), not(u(fn.ooc-or-combat-ok, \%0)), 0), u(fn.get-taken-combiner-members, %0))
FN.GET-LINKED-ATTACKS [#617]: filter(#lambda/strmatch(u(fn.get-attack-attrib-stat, \%0, ammo_type), u(fn.get-attack-attrib-stat, %1, ammo_type)), u(fn.get-all-attack-attribs, %0, CURRENT))
FN.GET-MERGED-ABILITIES [#617]: setunion(u(fn.get-mode-stat, %0, Max, %2, Abilities), filter(#lambda/u(fn.validate-stat-exoable-ability, \%0), u(fn.get-current-mode-stat, %1, Abilities)))
FN.GET-MISPLACED-COMBINER-MEMBERS [#617]: filter(#lambda/not(strmatch(loc(%1), loc(\%0))), u(fn.get-active-combiner-members, %0))
FN.GET-MODE-STAT [#617]: switch([u(fn.is-mode-stat,%3)]_[u(FN.is-valid-mode,%0,%1,%2)], 0_?, #-11 INVALID MODE STAT, ?_0, #-12 INVALID MODE, 1_1, get(%0/stats`%1`mode%2`%3))
FN.GET-MODE-STAT-PC [#617]: switch(round(mul(100,fdiv(u(fn.get-mode-stat,%0,CURRENT,%1,%2),u(fn.get-mode-stat,%0,MAX,%1,%2))), 0), #-1 ARGUMENT MUST BE NUMBER, 0, #$)
FN.GET-MODENUM-FROM-ATTACK-ATTRIB [#617]: after(index(%0, `, 3,1), MODE)
FN.GET-MODES [#617]: map(#lambda/right(\%0, 1), lattrp(%0/STATS`[switch(%1,,CURRENT,%1)]`MODE*))
FN.GET-NUM-MODES [#617]: words(u(fn.get-modes, %0, %1))
FN.GET-OCCUPIED-CP [#617]: after(index(setr(2, map(#lambda/strcat(u(fn.get-cp-stat, loc(%0), \%0, Controlled-By), ^, \%0), u(fn.get-capture-points, loc(%0)))), , match(%q2, %0^*), 1), ^)
FN.GET-OLD-ATTACKNAME [#617]: switch(setr(0,grab(get(%0/ATTACKNAMES_%1),%2:*,|)),,%2,after(%q0,:))
FN.GET-PARTING-SHOT-LIST [#617]: setdiff(filter(#lambda/and(gt(u(fn.get-current-mode-stat, \%0, VEL), u(fn.get-current-mode-stat, %0, VEL)), not(get(\%0/POT`OBSERVE))), u(fn.get-combatants-in-room, %0)), %0)
FN.GET-PATCH-COST [#617]: mul(v(PARAM.PATCH-COST), if(u(fn.is-junkion, %0), 2, 1))
FN.GET-PERCENT-COLOR [#617]: switch(%0,>100,b,>70,g,>30,y,r)
FN.GET-PLAYER-REFUEL-AMOUNT [#617]: if(u(fn.has-ability-in-any-mode, %0, Refuel), %1, round(mul(%1, v(PARAM.PLAYER-REFUEL-BONUS)), 0))
FN.GET-POWER-RANKING [#617]: lmath(max, map(#lambda/u(fn.get-power-ranking-for-mode, %0, %1, \%0), u(fn.get-modes, %0, %1)))
FN.GET-POWER-RANKING-FOR-MODE [#617]: mul(u(fn.power-rank-get-staying-power, %0, %1, %2), u(fn.power-rank-get-damage-per-round, %0, %1, %2))
FN.GET-POWER-RANKING-MODE-NUMBER [#617]: match(map(#lambda/u(fn.get-power-ranking-for-mode, %0, %1, \%0), u(fn.get-modes, %0, %1)), u(fn.get-power-ranking, %0, %1))
FN.GET-PROTECTION [#617]: switch(0, u(fn.has-schema,%0,%1), #-28 BAD SCHEMA, u(fn.is-valid-mode,%0,%1,%2), #-28.5 BAD MODE NUMBER, u(fn.validate-stat-damage-type, %3), #-29 BAD DAMAGE TYPE, switch(get(%0/STATS`%1`MODE%2`PROTECTION`%3),, 0, get(%0/STATS`%1`MODE%2`PROTECTION`%3)))
FN.GET-PROTECTION-ARMOR-BONUS [#617]: ceil(mul(v(PARAM.PROTECT-BONUS), lmath(add, map(#lambda/u(fn.get-protection, u(AOBJ, %0, target), CURRENT, u(curmode, u(AOBJ, %0, target)), \%0), u(AOBJ, %0, damage_type)))))
FN.GET-PUBLIC-COMBAT-FLAGS [#617]: setinter(u(fn.get-core-stat, %0, CURRENT, COMBAT-FLAGS), v(LIST.PUBLIC-COMBAT-FLAGS))
FN.GET-PULL-DIFFERENTIAL [#617]: sub(u(AOBJ, %0, damage_level), u(fn.get-attack-attrib-stat, [u(AOBJ, %0, attack_attrib_source)]^[u(AOBJ, %0, attack_attrib)], damage-level))
FN.GET-RANDOM-INSPIRING-PHRASE [#617]: fold(#lambda/cat(\%0, and, \%1), index(shuffle(switch(get(%0/faction), Decepticon, terrifying threatening menacing patriotic overbearing intimidating frightening righteous, noble patriotic uplifting heroic moving lofty majestic righteous wise dramatic)), , 1, 2))
FN.GET-RECURSIVE-COMBATANTS-IN-ROOM [#617]: filter(#lambda/u(combat-ok-possibly-unconscious, \%0), u(fn.get-recursive-contents-in-room, %0))
FN.GET-RECURSIVE-CONTENTS-IN-ROOM [#617]: map(#lambda/if(u(fn.is-vehicle, \%0), lcon(\%0), \%0), lcon(%0))
FN.GET-SAPPED-PENALTY [#617]: if(u(fn.has-combat-flag, u(AOBJ, %0, attacker), SAPPED), v(PARAM.SAP-PENALTY), 0)
FN.GET-SNEAK-ATTACK-DAMAGE-BONUS [#617]: if(strmatch(u(fn.get-core-stat, u(AOBJ, %0, attacker), Current, Defense-Level), Hidden), max(2, div(v(PARAM.SNEAK-ATTACK-DAMAGE), u(AOBJ, %0, area_div))), 0)
FN.GET-STAT-FULLNAME [#617]: switch(%0, STR, Strength, INT, Intelligence, ACC, Accuracy, LDR, Leadership, END, Endurance, COU, Courage, FRP, Firepower, TECH, Technical, AGL, Agility, VEL, Velocity, capstr(lcstr(%0)))
FN.GET-SUPPORT-BONUS [#617]: if(u(fn.has-support, %0, %1), v(PARAM.SUPPORT-BONUS-%1), 0)
FN.GET-TAKEN-COMBINER-MEMBERS [#617]: if(u(fn.is-combiner, %0), filter(#lambda/not(cor(get(\%0/TACS_AVAIL), u(getobj(UCOD)/is-available-fn, \%0))), get(%0/gestalt-members)), #-40 NOT A COMBINER)
FN.GET-TALENTS [#617]: map(#lambda/last(\%0, `), lattr(%0/STATS`%1`TALENTS`%2`*))
FN.GET-TOHIT-SIZE-MODIFIER [#617]: mul(v(PARAM.size-hit), sub(u(fn.get-current-mode-stat, u(AOBJ, %0, attacker), SIZE), u(fn.get-current-mode-stat, u(AOBJ, %0, target), SIZE)))
FN.GET-VEHICLE-ATTACK-BONUS [#617]: if(and(u(fn.is-vehicle, %0), u(fn.has-combat-flag, %0, V_HAS_GUNNER)), [v(PARAM.V_HAS_GUNNER-BONUS)][u(msg, %0, [name(get(%0/gunner))] utilizes [poss(get(%0/gunner))] gunnery skills.)], 0)
FN.GET-VEHICLE-DAMAGE-BONUS [#617]: if(and(u(fn.is-vehicle, %0), u(fn.has-combat-flag, %0, V_HAS_ENGINEER)), [v(PARAM.V_HAS_ENGINEER-BONUS)][u(msg, %0, [name(get(%0/engineer))] uses [poss(get(%0/engineer))] science skills to boost power!)], 0)
FN.GET-VEHICLE-DEFEND-BONUS [#617]: if(and(u(fn.is-vehicle, %0), u(fn.has-combat-flag, %0, V_HAS_PILOT)), [v(PARAM.V_HAS_PILOT-BONUS)][u(msg, %0, [name(get(%0/pilot))] shows off [poss(get(%0/pilot))] piloting skills.)], 0)
FN.GET-VEHICLE-POSITION [#617]: [@@(ARGS: 0 - VEHICLE // 1 - CHARACTER)][@@(Return the name of the "pilot" position someone is occupying in a vehicle if any)][switch(%1, u(%0/pilot), PILOT, u(%0/gunner), GUNNER, u(%0/engineer), ENGINEER)]
FN.GET-VELOCITY-BOOST-TYPE [#617]: u(fn.velboost.[get(room-type(loc(%0))/alias)], %0)
FN.GET-VELOCITY-DODGE-BONUS [#617]: mul(u(fn.get-current-mode-stat, u(AOBJ, %0, target), VEL), switch(u(fn.get-velocity-boost-type, u(AOBJ, %0, target)), NONE, 0, LOW, v(PARAM.VELBOOST-LOW), HIGH, v(PARAM.VELBOOST-HIGH), LOW-D, switch(u(AOBJ, %0, attack_type), *RANGED, 0, v(PARAM.VELBOOST-LOW)), 0))
FN.GET-WEAPONS [#617]: filter(#lambda/and(strmatch(%0, u(fn.get-aux-stat, \%0, owner)), strmatch(Weaponsmith, u(fn.get-aux-stat, \%0, created_ability)), not(u(fn.is-in-hell, \%0))), children(getobj(IWOP)))
FN.GET-WILD-TARGET [#617]: first(shuffle(filter(#lambda/cand(u(combat-ok, \%0), not(u(fn.is-hidden, \%0)), not(get(\%0/pot`observe)), strmatch(get(\%0/faction), get(u(AOBJ, %0, attacker)/faction))), lcon(loc(u(AOBJ, %0, attacker))))))
FN.HANDLE-NON-CHARGE-SHIELD [#617]: [u(fn.addto-core-stat, u(fn.get-aux-stat, %0, OWNER), CURRENT, END, setr(O, min(u(fn.get-core-stat, %0, Current, End), %2)))] [u(fn.addto-core-stat, %0, Current, End, mul(-1, %qO))] [u(msg, u(fn.get-aux-stat, %0, Owner), [name(u(fn.get-aux-stat, %0, Owner))] uses up some of [poss(u(fn.get-aux-stat, %0, Owner))] [ansi(hr,name(%0))] shield booster!, 1)] [u(msg, u(fn.get-aux-stat, %0, Owner), You temporarily gain +%qO END from your shield booster.)] [u(fn.set-aux-stat, %0, CHARGES, gt(u(fn.get-core-stat, %0, CURRENT, END), 0))]
FN.HAS-ABILITY [#617]: if(match(u(fn.get-mode-stat,%0,CURRENT,u(curmode,%0),ABILITIES), %1), 1, if(u(fn.has-booster-ability, %0, %1), 1, 0))
FN.HAS-ABILITY-IN-ANY-MODE [#617]: lmath(or, map(#lambda/t(match(u(fn.get-mode-stat, %0, CURRENT, \%0, ABILITIES), %1)), u(fn.get-modes, %0, Current)))
FN.HAS-ACCESS-TO-DEFENSE-LEVEL [#617]: switch(%1, HIDDEN, or(u(fn.has-ability, %0, CLOAK), u(fn.has-ability, %0, SNEAK), u(fn.has-ability, %0, HIDE)), u(fn.can-use-defense-level, %0, %1))
FN.HAS-ACTIVE-ABILITY-BOOSTER [#617]: t(u(fn.get-activated-booster-by-type, %0, Ability))
FN.HAS-ANALYSIS-DATA [#617]: hasattr(%0, AUX`TEMP`ANALYSIS`%1)
FN.HAS-ANY-ABILITY [#617]: setinter(ucstr(%1), ucstr(u(fn.get-current-mode-stat, %0, ABILITIES)))
FN.HAS-ANY-PROTECTIONS [#617]: t(iter(u(fn.get-modes, %0, %1), u(fn.list-protection-types, %0, %1, ##),,))
FN.HAS-BOOSTER-ABILITY [#617]: lmath(or, map(#lambda/u(fn.has-ability, \%0, %1), u(fn.get-activated-booster-by-type, %0, Ability)))
FN.HAS-CANCELLED-EFFECT [#617]: hasattr(%0, AUX`PERM`CANCEL`%1)
FN.HAS-COMBAT-FLAG [#617]: t(match(u(fn.get-core-stat,%0,CURRENT,combat-flags), %1))
FN.HAS-CRACKSHOT-DATA [#617]: hasattr(%0, AUX`TEMP`CRACKSHOT`%1)
FN.HAS-EFFECT [#617]: t(match(u(AOBJ, %0, effect), %1))
FN.HAS-ENERGON-BOOSTER-BONUS [#617]: if(setr(X, u(fn.get-activated-booster-by-type, %0, ENERGON)), 1[setq(X, u(fn.use-charge, %qX))], 0)
FN.HAS-PILOT [#617]: cand(match(lcon(%0), get(%0/pilot)), u(combat-ok, get(%0/pilot)))
FN.HAS-PROTECTION [#617]: neq(0, u(fn.get-protection, %0, %1, %2, %3))
FN.HAS-SCHEMA [#617]: hasattrp(%0, STATS`%1)
FN.HAS-STAT-DAMAGE [#617]: lmath(or, iter(STR ACC AGL FRP VEL ARMOR, iter(u(fn.get-modes, %0), if(u(fn.get-mode-stat-pc, %0, %i0, %i1), lt(u(fn.get-mode-stat-pc, %0, %i0, %i1), 100), 0),,%b),,%b))
FN.HAS-SUPPORT [#617]: u(fn.has-combat-flag, %0, SUPPORTED-%1)
FN.HAS-TALENT [#617]: hasattrp(%0, STATS`%1`TALENTS`%2`%3)
FN.HIDE-OFF [#617]: [u(fn.remove-combat-flag, %0, HIDING)] [u(msg, %0, Suddenly\, [getname2(%0)] appears out of the [switch(rand(5), 0, ansi(hr,red), ansi(hb,blue))]!, 1)] [u(fn.set-core-stat, %0, Current, Defense-Level, Neutral)]
FN.HIDE-ON [#617]: [u(fn.deduct-energon, %0, v(PARAM.cloak-cost))] [u(fn.add-combat-flag, %0, HIDING)] [u(msg, %0, [getname2(%0)] is no longer apparent in view!, 1)] [setattrib(%0/AUX`TEMP`HIDE, mean(u(fn.get-core-stat, %0, Current, TECH), 80))] [u(fn.set-core-stat, %0, Current, Defense-Level, Hidden)] [u(msg, %0, Automatically setting your defense level to '[ansi(h,Hidden)]')] [u(fn.setup-pot-info-ability, %0, HIDE)]
FN.INIT-COMBAT [#617]: [u(msg, %0, [getname2(%0)] [ansi(hm,starts)] a combat scene. This clears any data from old fights and automatically sets everyone's COMBAT flag., 1)] [iter(u(fn.get-combatants-in-room, %0), [u(FN.REMOVE-COMBAT-STATUS, ##)] [u(getobj(TIMETRACK)/fn.set-time-limit, COMBAT-FLAG, ##)] [u(fn.add-combat-flag, ##, COMBAT)] ,,)]
FN.INIT-REFUEL-TANK [#617]: [attrib_set(%0/AUX`TEMP`TANK, setr(E, u(fn.calculate-reserve-tank-size, %0)))] [u(fn.add-combat-flag, %0, REFUELING)] [u(msg, %0, Deployed reserve energon tank with %qE energon.)]
FN.INITIALIZE [#617]: [u(fn.add-schema,%0,MAX)] [u(fn.set-core-stat,%0,MAX,Defense-Level,neutral)] [u(fn.set-core-stat,%0,MAX,Energon,v(param.init-energon))] [u(fn.set-core-stat,%0,MAX,curmode,1)] [u(fn.set-mode-stat,%0,MAX,u(fn.add-mode,%0,max),NAME,name(%0))] [u(fn.set-core-stat, %0, MAX, Species, %1)] [attrib_set(%0/species, %1)] [u(fn.set-mode-stat, %0, MAX, 1, TYPE, switch(%1, Human, Human, Quintesson, Quintesson, Vehicle, Vehicle, Transformer, Robot, Junkion, Robot, Unknown))]
FN.INSPIRE-TARGET [#617]: [u(fn.addto-core-stat, %0, Current, COU, max(1, div(add(div(u(fn.get-core-stat, %1, Current, LDR), 4), rand(5)), max(1, div(%2, 2)))))] [u(fn.add-combat-flag, %0, INSPIRED)] [u(msg, %0, You feel more courageous!)] [u(fn.check-if-not-scared, %0)]
FN.IS-AREA-ATTACK [#617]: strmatch(u(AOBJ, %0, attack_type), AREA*)
FN.IS-ATTACK-STAT [#617]: t(match(v(list.attack-stat),%0))
FN.IS-AUTO-HIT [#617]: cor(and(u(fn.has-combat-flag, u(AOBJ, %0, target), STUNNED), not(u(fn.has-combat-flag, u(AOBJ, %0, attacker), CONFUSED))), and(u(fn.has-combat-flag, u(AOBJ, %0, target), HIT-OK), not(u(fn.has-combat-flag, u(AOBJ, %0, attacker), CONFUSED))), and(u(fn.has-effect, %0, FLAWLESS), not(u(fn.has-combat-flag, u(AOBJ, %0, attacker), CONFUSED))), strmatch(u(AOBJ, %0, extra_flags), *BACKFIRE*),and(u(fn.has-combat-flag, u(AOBJ, %0, target), LOCKON), not(u(fn.has-combat-flag, u(AOBJ, %0, attacker), CONFUSED))))
FN.IS-AUTO-MISS [#617]: cor(and(strmatch(u(AOBJ, %0, extra_flags), *MISS*), not(u(fn.has-combat-flag, u(AOBJ, %0, attacker), CONFUSED))), u(fn.can-evade, %0))
FN.IS-AUX-STAT [#617]: t(match(v(LIST.AUX-STAT), %0))
FN.IS-BOOSTER [#617]: t(match(lparent(%0), getobj(BOOSTER)))
FN.IS-CHAIN-ATTACK [#617]: and(u(fn.has-effect, %0, CHAIN), strmatch(u(AOBJ, %0, extra_flags), *CHAIN*))
FN.IS-COMBINER [#617]: strmatch(parent(%0), getobj(GESTP))
FN.IS-CORE-STAT [#617]: t(match(v(list.core-stat),%0))
FN.IS-DISABLED [#617]: eq(u(fn.get-attack-attrib-stat, %0, DISABLED), 1)
FN.IS-FINALIZED [#617]: hasattr(%0, STATS`FINALIZED)
FN.IS-FORGED-WEAPON [#617]: cand(u(fn.is-weapon-object, %0), u(fn.is-species, %0, ForgedWeapon))
FN.IS-FREEBIE [#617]: strmatch(%0, v(DB.FREE-ATTACKS))
FN.IS-HIDDEN [#617]: or(u(fn.has-combat-flag, %0, CLOAKED), u(fn.has-combat-flag, %0, SNEAKING), u(fn.has-combat-flag, %0, HIDING))
FN.IS-HIT [#617]: if(u(fn.is-auto-miss, %0), 0, if(u(fn.is-auto-hit, %0), 1, u(fn.compare-stats, floor(u(fn.attack-offensive-score, %0)), floor(u(fn.attack-defensive-score, %0)))))
FN.IS-IN-HELL [#617]: strmatch(#666, loc(%0))
FN.IS-IN-VAULT [#617]: strmatch(getobj(VAULT), loc(%0))
FN.IS-IN-VEHICLE [#617]: u(fn.is-vehicle, loc(%0))
FN.IS-INSIDE-COMBINER [#617]: u(fn.is-combiner, loc(%0))
FN.IS-INVULNERABLE [#617]: cor(u(fn.has-combat-flag, %0, Invulnerable), u(fn.has-ability-in-any-mode, %0, Invulnerable))
FN.IS-JUNKION [#617]: strmatch(u(fn.get-core-stat, %0, Current, Species), Junkion)
FN.IS-MODE-STAT [#617]: t(match(v(list.mode-stat),%0))
FN.IS-ON-JUNK [#617]: cor(strmatch(planet(%0),#1207),hasattr(loc(%#),JUNKDIVE))
FN.IS-OWNER [#617]: strmatch(%0, u(fn.get-aux-stat, %1, Owner))
FN.IS-REFUELING [#617]: hasattr(%#, AUX`TEMP`TANK)
FN.IS-SPECIES [#617]: setinter(ucstr(%1), ucstr(u(fn.get-core-stat, %0, MAX, Species)))
FN.IS-TRAINING-ROOM [#617]: match(lparent(%0), getobj(TRAINING))
FN.IS-UNSTOPPABLE [#617]: cor(u(fn.has-combat-flag, %0, UNSTOPPABLE), u(fn.has-ability-in-any-mode, %0, Unstoppable))
FN.IS-VALID-ATTACK [#617]: hasattrp(%0, STATS`%1`MODE%2`ATTACK%3)
FN.IS-VALID-BOOSTER-TYPE [#617]: t(match(v(list.booster-pack-type), %0))
FN.IS-VALID-CP-CODE [#617]: cand(isword(%0), eq(strlen(%0), 1))
FN.IS-VALID-CP-STAT [#617]: t(match(v(list.cp-stat),%0))
FN.IS-VALID-MODE [#617]: hasattrp(%0, STATS`%1`MODE%2)
FN.IS-VALID-STAT [#617]: or(u(fn.is-mode-stat, %0), u(fn.is-core-stat, %0))
FN.IS-VALID-TALENT [#617]: t(match(get(v(TACS_DB)/list.talent-%0), %1))
FN.IS-VEHICLE [#617]: or(match(lparent(%0), getobj(VEHICLE)), u(fn.is-species, %0, VEHICLE))
FN.IS-WEAPON-OBJECT [#617]: or(match(parent(%0), getobj(IWOP)), match(parent(%0), getobj(LENSE)), u(fn.is-vehicle, %0))
FN.IS-WEAPONSMITH [#617]: u(fn.has-ability-in-any-mode, %0, WEAPONSMITH)
FN.JUNKDIVE [#617]: [u(msg, %0, [getname2(%0)] dives into a pile of junk and takes a moment to reattach various pieces and parts of [poss(%0)] body., 1)] [u(fn.addto-current-core-stat, %0, END, rand(1, 25))] [u(fn.deduct-energon, %0, v(PARAM.JUNKDIVE-COST))] [u(fn.setup-pot-info-ability, %0, JUNKDIVE)]
FN.KNOCKOUT-CHECK [#617]: if(u(fn.is-invulnerable, u(AOBJ,%0, target)),, if(lte(u(fn.get-core-stat, u(AOBJ, %0, target), CURRENT, END), 0), u(fn.do-knockout, %0)))
FN.LASTSHOT [#617]: [iter(setr(6, filter(#lambda/strmatch(u(fn.get-attack-attrib-stat, \%0, ammo_type), %2), u(fn.get-all-attack-attribs, %1, CURRENT))), u(fn.set-attack-attrib-stat, ##, ammo, 1),,)] [setq(6, u(FN.CHAR-COST-CALC-ATTACK-BASIC, first(%q6)))] [pemit(#5996, %q6)] [u(getobj(TIMETRACK)/fn.set-time-limit-backdate, LASTSHOT, %0, sub(8, max(2, min(8, %q6))))]
FN.LIST-ALL-BOOSTERS [#617]: [header(All Boosters)]%r[align(<20 <5 <7 <3 >25 <13, [ansi(h,Owner)], [ansi(h, DB#)], [ansi(h,Type)], [ansi(h,RC?)], [ansi(h, Object)], [ansi(h,Location)])]%r[subheader()]%r[iter(sortkey(#lambda/get(\%0/aux`perm`owner), children(getobj(BOOSTER))), [align(<20 <5 <7 <3 >25 <13, [name(setr(0, u(fn.get-aux-stat, ##, Owner)))], ##, [ucstr(u(fn.get-aux-stat, ##, boost_type))], [if(u(fn.get-aux-stat, ##, rechargeable), Yes, No)], [name(##)], [switch(loc(##), %q0, , ansi(hy, left(name(loc(##)), 13)) )])],,%r)]%r[header()]
FN.LIST-ALL-WEAPONS [#617]: [header(All Weapons)]%r[align(<5 <25 <20 <10 <13, [ansi(h,DB#)], [ansi(h, Name)], [ansi(h,Owner)], [ansi(h,Type)], [ansi(h,Location)])]%r[subheader()]%r[iter(sortkey(#lambda/get(\%0/aux`perm`owner), setdiff(children(getobj(IWOP)), lcon(getobj(VAULT)))), [align(<5 <25 <20 <10 <13, ##, [name(##)], [switch(u(fn.get-aux-stat, ##, attacklock), owner, name(u(fn.get-aux-stat, ##, owner)), faction, ansi(faction-ansi(%#, ##), get(##/faction)), allies, ansi(faction-ansi(%#, ##), [get(##/faction)]+), ???)], [switch(u(fn.get-core-stat, ##, current, species), weapon, switch(u(fn.get-aux-stat, ##, created_ability), Demolition, !Bomb, Weaponsmith, !Forge, ???), #$)], switch(loc(##), u(fn.get-aux-stat, ##, created_by), , ansi(hy, left(name(loc(##)), 13))))],,%r)]%r[header()]
FN.LIST-ATTACK-COSTS [#617]: [header(Attack Energon Costs for [getname2(%0)])]%r[iter(u(fn.get-attacks, %0, Current, u(curmode, %0)), [setq(B, u(fn.build-attack-object, %0, %0, , before(##, ^), after(##, ^), 1))] %b%b[ljust(u(AOBJ, %qB, name),  40)] [u(fn.get-energon-cost, %qB)],,%r)]%r[header()]
FN.LIST-ATTACKS [#617]: map(#lambda/strcat(%0, ^, \%0), %1)
FN.LIST-DIFFERENT-STATS [#617]: filter(#lambda/neq(u(fn.get-mode-stat,%0,%1,%2,\%0), u(fn.get-mode-stat,%0,%1,%3,\%0)), setdiff(v(list.mode-stat), NAME ABILITIES %4))
FN.LIST-PROTECTION-TYPES [#617]: filter(#lambda/u(fn.has-protection, %0, %1, %2, \%0), get(v(TACS_DB)/list.damage-type))
FN.LIST-VALIDATOR [#617]: fold(#lambda/and(\%0, \%1), map(#lambda/t(match(get(v(TACS_DB)/list.%0), \%0)), %1), 1)
FN.LOCAL-ATTACK-POSTPROCESS [#617]: u(loc(u(AOBJ, %0, target))/fn.local-attack-postprocess, %0, %1)
FN.LOCATION-HEALTH [#617]: [header(Location Health Status - [getname2(%0)])]%r[ljust(Name,41)]%b%b[rjust(Energon,7)]%b%b[ljust(Endurance,9)]%b%b[rjust(Perc,4)]%b%b[rjust(Cour/End,8)] %r[subheader()][iter(lcon(loc(%0)), if(u(combat-ok, ##), %r[ljust(ansi(u(fn.get-faction-color, ##), getname2(##)), 45)][ljust(u(fn.get-core-stat, ##, Current, Energon), 9)][ljust([u(fn.get-core-stat, ##, Current, END)][ansi(h,/)][u(fn.get-core-stat, ##, MAX, END)],9)][ljust([u(fn.get-core-stat-pc, ##, END)][ansi(h,%%)],8)][u(cou-end, ##)]),,)]%r[header()]
FN.LOG-BOOSTER-ACTION [#617]: [@@(ARGUMENTS: 0 - ACTION // 1 - OWNER # // 2 - BOOSTER #)][sql(insert into booster_store_log values (null, "%0", "%1", [playerid(%1)], "[objid(%2)]", "[u(fn.get-aux-stat, %2, BOOST_TYPE)]", [secs()], ""))]
FN.LOG-COMBAT-FLAG-TRACKER [#617]: [@@(ARGUMENTS: 0 - TARGET // 1 - ON OR OFF)][sql(insert into combat_flag_tracker values (null, "%0", [hastype(%0, PLAYER)], "%1", [u(fn.get-core-stat, %0, Current, END)], [u(fn.get-core-stat-pc, %0, END)], "[u(fn.get-core-stat, %0, Current, Combat-Flags)]", [secs()], "[loc(%0)]"))]
FN.MAP-ABILITY-DISPLAY [#617]: [ucstr(lcstr(%2))][switch(words(u(fn.get-talents, %0, %1, %2)), 0,, %b\(#$\))]
FN.MATCH-AVAIL-ATTACK-BY-NAME [#617]: if(setr(6, match(map(#lambda/u(fn.get-attack-attrib-stat, \%0, NAME), setr(2,u(fn.get-avail-attacks, %0)),,|), %1, |)), index(%q2, , %q6, 1), iter(matchall(map(#lambda/u(fn.get-attack-attrib-stat, \%0, NAME), setr(2,u(fn.get-avail-attacks, %0)),,|), %1*, |,%b), index(%q2, , ##, 1),,%b))
FN.MERGE-COMBINER [#617]: [@@(Set up stats and END)] [u(fn.set-combiner-max-stats, %0)] [u(fn.set-combiner-current-stats, %0)] [@@(Set up energon seperately)] [u(fn.set-combiner-energon, %0)] [@@(Teleport the combiner object into the room)] [tel(%0, loc(%1))] [@@(Teleport all IC team members into the object)] [iter(u(fn.get-taken-combiner-members, %0), if(isic(##), tel(##, %0)),,)] [@@(Set IC location of all team members)] [iter(u(fn.get-taken-combiner-members, %0), attrib_set(##/LOCATION_CURRENT, %0),,)] [@@(Alert the staff)] [cemit(Staff,{NOTICE: Gestalt [getname2(%0)] has just been merged at [getname2(loc(%0))].},noisy)] [@@(set everyone's COMBAT flag)] [iter(u(fn.get-active-combiner-members, %0), [u(getobj(TIMETRACK)/fn.set-time-limit, COMBAT-FLAG, ##)] [u(fn.add-combat-flag, ##, COMBAT)],,)]
FN.MODIFY-ATTACK-OBJECT [#617]: if(setr(M,match(v(list.attack-object-fields), %1)), replace(%0, %qM, %2, |), #-25 BAD ATTACK OBJECT FIELD "%1")
FN.MODIFY-ATTACK-OBJECT-MULTI [#617]: [setq(9, %0)][iter(%1, setq(9, switch(##, *=*, u(fn.modify-attack-object, %q9, before(##,=), after(##,=)), *+*, u(fn.modify-attack-object, %q9, before(##,+), trim(strcat(u(fn.get-from-attack-object, %q9, before(##,+)), %b, after(##,+)))))),,)][r(9)]
FN.MODIFY-ATTACK-OBJECT-MULTI-PIPE [#617]: [setq(9, %0)][iter(%1, setq(9, switch(##, *=*, u(fn.modify-attack-object, %q9, before(##,=), after(##,=)), *+*, u(fn.modify-attack-object, %q9, before(##,+), trim(strcat(u(fn.get-from-attack-object, %q9, before(##,+)), %b, after(##,+)))))),|,)][r(9)]
FN.MULTIPLE-INSPIRE [#617]: [u(msg, %0, [getname(%0)] inspires [itemize(map(#lambda/getname(\%0), %1,,|), |)] with [u(fn.get-random-inspiring-phrase, %1)] words!, 1)] [iter(%1, u(fn.inspire-target, ##, %0, words(%1)),,)]  [u(fn.setup-pot-info-ability, %0, INSPIRE, %1)]
FN.NORMAL-CDF [#617]: [setq(X, fdiv(sub(%0, %1), %2))][setq(L, abs(%qX))][setq(K, fdiv(1, add(1, mul(0.2316419, %qL))))][setq(A, fdiv(1, sqrt(mul(2, pi()))))][setq(B, exp(mul(-1, fdiv(power(%qL, 2), 2))))][setq(C, add(mul(0.319381530, %qK), mul(-0.356563782, power(%qK, 2)), mul(1.781477937, power(%qK, 3)), mul(-1.821255978, power(%qK, 4)), mul(1.330274429, power(%qK, 5))))][setq(R, sub(1, mul(%qA, %qB, %qC)))][if(gte(%qX, 0), %qR, sub(1, %qR))]
FN.NORMAL-RNG [#617]: add(mul(u(fn.box-muller-transform), %1), %0)
FN.NUKE-CAPTURE-POINT [#617]: [wipe(%1/AUX`PERM`CAPTURE-POINTS`CP-%2)]
FN.OOC-OR-COMBAT-OK [#617]: or(not(isic(%0)), u(combat-ok, %0))
FN.OR-COMBAT-FLAGS [#617]: lmath(or, map(#lambda/u(fn.has-combat-flag, %0, \%0), %1))
FN.PASS [#617]: [u(msg, %0, [getname2(%0)] takes extra time to steady [obj(%0)]self. \[Pass\], 1)] [u(fn.add-energon, %0, setr(1, u(fn.calc-regained-energon-from-pass, %0)))] [u(msg-spam, %0, Regained %q1 energon.)] [u(fn.setup-pot-info-ability, %0, PASS)] [u(fn.set-the-combat-flag, %0)] [attrib_set(loc(%0)/PASSED`%0, 1)]
FN.PATCH [#617]: [u(msg, %0, [getname2(%1)] quickly patches up some of [switch(%0, %1, poss(%0), [getname2(%0)]'s)] minor injuries., 1)] [u(fn.addto-current-core-stat, %0, END, round(add(fdiv(u(fn.get-core-stat, %1, current, TECH), 7), rand(3)), 0))] [if(u(fn.is-junkion, %0), @@(junkions infinite patching), u(fn.add-combat-flag, %0, PATCHED))] [u(fn.deduct-energon, %1, u(fn.get-patch-cost, %1))] [u(fn.setup-pot-info-ability, %1, PATCH, %0)] [u(fn.set-the-combat-flag, %1)]
FN.PILOT [#617]: [@@(re-name the exo object)] [name(%0, setr(N, squish([before([getname2(%0)],<)]%b<[getname2(%1)]>)))] [u(fn.set-mode-stat, %0, Current, 1, Name, %qN)] [@@(slightly different setup for transforming exos)] [if(gt(u(fn.get-num-modes, %0), 1), iter(u(fn.get-modes, %0), u(fn.set-mode-stat, %0, Current, ##, Name, %qN [u(fn.get-mode-stat, %0, Current, ##, Type)]),,)])] [@@(Set PILOT attrib not sure if this is used)] [attrib_set(%0/pilot, %1)] [@@(Make the Exo have the same ally status as the pilot)] [switch(hasattrval(1#,ALLY),1,[attrib_set(%0/ALLY, get(%1/ALLY))] )] [@@(set Accuracy and Agility to the max of the exo or pilot stat)] [iter(ACC AGL, iter(u(fn.get-modes, %0), u(fn.set-mode-stat, %0, Current, %i0, %i1, max(u(fn.get-mode-stat, %0, Max, %i0, %i1), u(fn.get-mode-stat, %1, Current, u(curmode, %1), %i1))),,),,)] [@@(Copy mental stats over directly)] [iter(COU TECH LDR INT, u(fn.set-core-stat, %0, Current, ##, u(fn.get-core-stat, %1, Current, ##)),,)] [iter(COU TECH LDR INT, u(fn.set-core-stat, %0, Max, ##, u(fn.get-core-stat, %1, Current, ##)),,)] [@@(merge certain abilities)] [iter(u(fn.get-modes, %0), u(fn.set-mode-stat, %0, Current, ##, Abilities, u(fn.get-merged-abilities, %0, %1, ##)),,)] [pemit(%1, You have taken command of this vehicle/exo-suit.)]
FN.PILOT-EXO [#617]: [@@(re-name the exo object)] [name(%0, setr(N, squish([before([getname2(%0)],<)]%b<[getname2(%1)]>)))] [u(fn.set-mode-stat, %0, Current, 1, Name, %qN)] [@@(slightly different setup for transforming exos)] [if(gt(u(fn.get-num-modes, %0), 1), iter(u(fn.get-modes, %0), u(fn.set-mode-stat, %0, Current, ##, Name, %qN [u(fn.get-mode-stat, %0, Current, ##, Type)]),,)])] [@@(Set PILOT attrib not sure if this is used)] [attrib_set(%0/pilot, %1)] [@@(Make the Exo have the same ally status as the pilot)] [switch(hasattrval(1#,ALLY),1,[attrib_set(%0/ALLY, get(%1/ALLY))] )] [@@(set Accuracy and Agility to the max of the exo or pilot stat)] [iter(ACC AGL, iter(u(fn.get-modes, %0), u(fn.set-mode-stat, %0, Current, %i0, %i1, max(u(fn.get-mode-stat, %0, Max, %i0, %i1), u(fn.get-mode-stat, %1, Current, u(curmode, %1), %i1))),,),,)] [@@(Copy mental stats over directly)] [iter(COU TECH LDR INT, u(fn.set-core-stat, %0, Current, ##, u(fn.get-core-stat, %1, Current, ##)),,)] [iter(COU TECH LDR INT, u(fn.set-core-stat, %0, Max, ##, u(fn.get-core-stat, %1, Current, ##)),,)] [@@(merge certain abilities)] [iter(u(fn.get-modes, %0), u(fn.set-mode-stat, %0, Current, ##, Abilities, u(fn.get-merged-abilities, %0, %1, ##)),,)] [pemit(%1, You have taken command of this exo-suit.)]
FN.PILOT-REGULAR-ENGINEER [#617]: [@@(Set PILOT attrib not sure if this is used)] [attrib_set(%0/pilot, %1)] [remit(%1, [name(%1)] has taken over engineering duties.)] [u(#8041/fn.add-combat-flag, %0, V_HAS_ENGINEER)]
FN.PILOT-REGULAR-VEHICLE [#617]: [@@(Set PILOT attrib not sure if this is used)] [attrib_set(%0/pilot, %1)] [u(msg, %0, [name(%1)] has taken over pilot duties.)] [u(#8041/fn.add-combat-flag, %0, V_HAS_PILOT)]
FN.PILOT-VEHICLE-ENGINEER [#617]: [@@(Set PILOT attrib not sure if this is used)] [attrib_set(%0/engineer, %1)] [u(msg, %0, [name(%1)] has taken over engineering duties.)] [u(#8041/fn.add-combat-flag, %0, V_HAS_ENGINEER)]
FN.PILOT-VEHICLE-GUNS [#617]: [@@(Set PILOT attrib not sure if this is used)] [attrib_set(%0/gunner, %1)] [u(msg, %0, [name(%1)] has taken over gunner duties.)] [u(#8041/fn.add-combat-flag, %0, V_HAS_GUNNER)]
FN.POWER-RANK-CALC-ARMOR-DAMAGE [#617]: mul(v(PARAM.ARMOR-BONUS), v(PARAM.AVERAGE-ARMOR))
FN.POWER-RANK-CALC-BASE-DAMAGE [#617]: round(mul(add(mul(v(PARAM.DAMAGE-SLOPE), %3), v(PARAM.DAMAGE-INTERCEPT)), fdiv(u(fn.get-mode-stat, %0, %1, %2, %4), v(PARAM.damage-stat-divisor))), 0)
FN.POWER-RANK-CALC-DAMAGE [#617]: [@@(ARGUMENTS: 0 - RANKEE // 1 - SCHEMA // 2 - MODE # // 3 - DAMAGE LEVEL // 4 - STR or FRP)][max(1, add(u(fn.power-rank-calc-base-damage, %0, %1, %2, %3, %4), u(fn.power-rank-calc-size-damage, %0, %1, %2, %3, %4), u(fn.power-rank-calc-armor-damage)))]
FN.POWER-RANK-CALC-SIZE-DAMAGE [#617]: switch(%3, FRP, 0, mul(v(PARAM.size-damage), sub(u(fn.get-mode-stat, %0, %1, %2, SIZE), v(PARAM.AVERAGE-SIZE))))
FN.POWER-RANK-GET-ATTACK-RANK [#617]: [setq(9, map(#lambda/u(fn.get-attack-attrib-stat, \%0, damage-level), u(fn.get-attacks, %0, %1, %2)))][max(2.5, add(lmath(mean, %q9), mul(0.75, sub(lmath(max, %q9), lmath(mean, %q9)))))]
FN.POWER-RANK-GET-DAMAGE-PER-ROUND [#617]: mul(max(u(fn.power-rank-calc-damage, %0, %1, %2, setr(0, u(fn.power-rank-get-attack-rank, %0, %1, %2)), STR), u(fn.power-rank-calc-damage, %0, %1, %2, %q0, FRP)), u(fn.calc-strike-likelihood, %0, %1, %2))
FN.POWER-RANK-GET-ENDURANCE [#617]: sub(u(fn.get-core-stat, %0, %1, END), if(%2, u(cou-end, %0, %1), 0))
FN.POWER-RANK-GET-STAYING-POWER [#617]: fdiv(fdiv(u(fn.power-rank-get-endurance, %0, %1, 1), u(fn.calc-personal-average-damage-taken, %0, %1, %2)), u(fn.calc-get-hit-likelihood, %0, %1, %2))
FN.PREP [#617]: [u(msg, %0, [name(%1)] prepares [name(%0)] for surgery\, [poss(%0)] COMBAT flag has been waived., 1)] [u(fn.remove-combat-status, %0)]
FN.PREPROCESS-ATTACK-OBJECT [#617]: map(#lambda/u(fn.preprocess-helper, u(fn.modify-attack-object, %0, target, \%0), \%0), %1, %b, ^)
FN.PREPROCESS-HELPER [#617]: switch(first(strcat(if(cand(u(fn.has-combat-flag, u(AOBJ, %0, attacker), SABOTAGED), lte(rand(v(PARAM.SABOTAGE-CHANCE)), get(u(AOBJ, %0, attacker)/AUX`TEMP`SABOTAGE_COUNT))), [u(fn.clear-sabotage, u(AOBJ, %0, Attacker))][u(fn.modify-attack-object-multi, %0, target=[u(AOBJ, %0, attacker)] extra_flags+BACKFIRE extra_flags+SABOTAGED extra_flags+%1 chain_list=)]^), if(or(cand(u(fn.has-effect, %0, BACKFIRE), eq(rand(v(PARAM.backfire-frequency)), 0)), u(fn.has-combat-flag, u(AOBJ, %0, attacker), BACKFIRING)), [u(fn.modify-attack-object-multi, %0, target=[u(AOBJ, %0, attacker)] extra_flags+BACKFIRE extra_flags+%1 chain_list=)]^), if(cand(u(fn.has-effect, %0, WILD), eq(rand(v(PARAM.wild-frequency)), 0)), [u(fn.modify-attack-object-multi, %0, target=[u(fn.get-wild-target, %0)] extra_flags+WILD extra_flags+%1 chain_list=)]^), if(cand(eq(rand(v(PARAM.CONFUSE-FREQUENCY)), 0), u(fn.has-combat-flag, u(AOBJ, %0, attacker), CONFUSED)), [u(fn.modify-attack-object-multi, %0, target=[u(fn.get-wild-target, %0)] extra_flags+WILD extra_flags+%1 chain_list=)]), if(u(fn.has-combat-flag, u(AOBJ, %0, target), COVERED), if(u(fn.cover-success, u(AOBJ, %0, target), u(AOBJ, %0, attacker)), [u(fn.modify-attack-object-multi, %0, target=[u(fn.get-covered-target, u(AOBJ, %0, target))] extra_flags+COVERED extra_flags+%1)], [u(fn.modify-attack-object-multi, %0, extra_flags+COVERFAIL extra_flags+[u(fn.get-covered-target, u(AOBJ, %0, target))])]))), ^),, [@@(got none so send it back with the original target)]%0, [@@(got one so send back the first modified one)]#$)
FN.PROFILE [#617]: [if(not(hasattrp(%0, STATS)),[name(%0)] does not have any stats!,[header(PROFILE: [ucstr(name(%0))] \[[ucstr(switch(u(fn.get-core-stat, %0, %1, Species),,Unknown, #$))]\])]%r[ansi(hc,BASE STATS / MODE 1)]%r[table(iter(STR INT ACC LDR END COU FRP TECH AGL ENERGON,[ljust(ansi(h,u(fn.get-stat-fullname,##)),13)]- [rjust(u(fn.get-either-stat,%0,%1,##,1),3)][if(and(isdbref(get(%0/PILOT)), neq(u(fn.get-either-stat-pc,%0,##,1),100)), %b\([u(fn.get-either-stat,%0,Current,##,1)]\))],,|), 38, 78, |)]%r[iter(u(fn.get-modes,%0,%1),[fileheader([ansi(hc,MODE ##)] - [ansi(h,[mid(u(fn.get-mode-stat,%0,%1,##,TYPE),0,17)])])]%r[ansi(hy,Size:)] [u(fn.get-mode-stat,%0,%1,##,SIZE)] [center(-,5)] [ansi(hy,Velocity:)] [u(fn.get-mode-stat,%0,%1,##,VEL)] [center(-,5)] [ansi(hy,Armor:)] [u(fn.get-mode-stat,%0,%1,##,ARMOR)][if(setr(K,u(fn.list-different-stats,%0,%1,1,##,SIZE ARMOR VEL)),%r[table(iter(%qK,[ansi(h,Mode [u(fn.get-stat-fullname,%i0)]:)] [u(fn.get-mode-stat,%0,%1,##,%i0)],,|), 38, 78, |)])]%r[ansi(h,Attacks:)] [map(fn.full-systems-attackname-helper, u(fn.get-attacks,%0,%1,##),,\,%b)]%r[ansi(h,Abilities:)] [map(#lambda/u(fn.map-ability-display, %0, %1, \%0), u(fn.get-mode-stat,%0,%1,##,ABILITIES),,\,%b)][if(setr(K,u(fn.list-protection-types, %0, %1, ##)),%r[ansi(h,Protection:)] [iter(%qK, [capstr(lcstr(%i0))] \([switch(u(fn.get-protection, %0, %1, %i1, %i0),>0,+#$,#$)]\),,\,%b)])],,%r)]%r%r[ansi(hc,SKILLS)]%r[u(fn.display-skills,%0)]%r[header(Use '[v(CHAR)]attacklist' for more specific attack info)])]
FN.RADAR [#617]: [u(msg, %0, [getname2(%0)] initiates a radar sweep of the area., 1)] [iter(filter(#lambda/cand(u(combat-ok, \%0), u(fn.is-hidden, \%0)), setunion(lcon(loc(%0)), lexits(loc(%0)))), u(fn.search-for-target, ##, add(u(fn.get-core-stat, %1, Current, INT), v(PARAM.Radar-search-bonus))),,)] [u(fn.setup-pot-info-ability, %0, RADAR)]
FN.RANDOMIZE [#617]: [iter(COU LDR TECH INT END, u(fn.set-core-stat,%0,MAX,##,add(mul(u(fn.get-core-stat,%0,MAX,##),10), rand(10))),,)] [iter(STR FRP ACC AGL, [setq(0,rand(10))][iter(u(fn.get-modes,%0,MAX), u(fn.set-mode-stat,%0,MAX,%i0,%i1,add(mul(u(fn.get-mode-stat,%0,MAX,%i0,%i1),10), %q0)),,)],,)] [iter(u(fn.get-modes, %0, MAX), u(fn.set-mode-stat, %0, MAX, ##, ARMOR, mul(u(fn.get-mode-stat, %0, MAX, ##, ARMOR), 10)),,)] [iter(u(fn.get-modes, %0, MAX), u(fn.set-mode-stat, %0, MAX, ##, VEL, add(mul(u(fn.get-mode-stat, %0, MAX, ##, VEL), 10), rand(10))),,)]
FN.RANDOMIZE-BOMB [#617]: [u(fn.set-attack-stat, %0, MAX, 1, 1, NAME, Huge Explosion %0)] [u(fn.set-mode-stat, %0, MAX, 1, FRP, add(20, u(fn.get-core-stat, %1, Current, TECH)))] [u(fn.set-attack-stat, %0, MAX, 1, 1, EFFECT, switch(u(fn.get-core-stat, %1, Current, INT), >90, AMMO SELF-DESTRUCT ONESHOT ACCURATE CRIPPLE, >75, AMMO SELF-DESTRUCT ONESHOT ACCURATE, AMMO SELF-DESTRUCT ONESHOT ))] [u(fn.copy-schema, %0, MAX, Current)]
FN.RANDOMIZE-DAMAGE [#617]: if(%1, %0, add(%0, sub(rand(mul(inc(div(%0, 4)), 2)) , div(%0, 4))))
FN.RANDOMIZE-GRENADE [#617]: [u(fn.set-attack-stat, %0, MAX, 1, 1, NAME, Small Explosion %0)] [u(fn.set-mode-stat, %0, MAX, 1, FRP, add(20, u(fn.get-core-stat, %1, Current, TECH)))] [u(fn.set-attack-stat, %0, MAX, 1, 1, EFFECT, switch(u(fn.get-core-stat, %1, Current, INT), >90, AMMO SELF-DESTRUCT ACCURATE CRIPPLE, >75, AMMO SELF-DESTRUCT ACCURATE, AMMO SELF-DESTRUCT ))] [u(fn.copy-schema, %0, MAX, Current)]
FN.RANDOMIZE-HOLOGRAM [#617]: [u(fn.set-mode-stat, %0, MAX, 1, AGL, max(round(mul(1.0, u(fn.get-core-stat, %1, Current, TECH)),0),1))] [u(fn.set-mode-stat, %0, MAX, 1, SIZE, max(round(add(mul(-1.25, div(u(fn.get-core-stat, %1, Current, TECH),10)),13.5),0),1))] [u(fn.copy-schema, %0, MAX, Current)] [u(fn.copy-schema, %0, MAX, Current)]
FN.REBUILD [#617]: [u(fn.forcefield-check, %0)] [setq(0,get(%0/STATS`CURRENT`CURMODE))] [u(fn.copy-schema,%0,MAX,CURRENT)] [wipe(%0/AUX`TEMP)] [attrib_set(%0/STATS`CURRENT`CURMODE, %q0)] [@@([u(getobj(TIMETRACK)/fn.set-time-limit, REBUILD, %0)])] [u(msg, %0, [getname2(%1)] performs additional structural work on [getname2(%0)]., 1)] [@@(clear out the pilot)] [attrib_set(%0/pilot,)]
FN.RECALIBRATE [#617]: [u(msg, %0, [getname2(%1)] quickly recalibrates [switch(%0, %1, poss(%0), [getname2(%0)]'s)] internal systems., 1)] [iter(u(fn.get-modes, %0), iter(STR ACC FRP AGL VEL, u(fn.addto-mode-stat, %0, CURRENT, %i1, %i0, round(add(fdiv(add(u(fn.get-core-stat, %1, current, TECH), u(fn.get-core-stat, %1, current, INT)), 12), rand(3)), 0)),,),,)] [iter(u(fn.get-modes, %0), iter(STR ACC FRP AGL VEL, u(fn.set-mode-stat, %0, CURRENT, %i1, %i0, min(u(fn.get-mode-stat, %0, CURRENT, %i1, %i0), u(fn.get-mode-stat, %0, MAX, %i1, %i0))),,),,)] [if(u(fn.is-junkion, %0), @@(junkions infinite reinforcing), u(fn.add-combat-flag, %0, RECALIBRATED))] [u(fn.deduct-energon, %1, u(fn.get-patch-cost, %1))] [u(fn.setup-pot-info-ability, %1, RECALIBRATE, %0)] [u(fn.set-the-combat-flag, %1)]
FN.REDISTRIBUTE-COMBINER-DAMAGE [#617]: iter(u(fn.get-taken-combiner-members, %0), u(fn.redistribute-combiner-damage-member, %0, ##),,)
FN.REDISTRIBUTE-COMBINER-DAMAGE-MEMBER [#617]: [iter(STR ACC AGL FRP VEL, iter(u(fn.get-modes, %1), u(fn.set-mode-stat-pc, %1, %i0, %i1, max(1, u(fn.get-mode-stat-pc, %0, 1, %i1))),,),,)] [iter(END ENERGON, u(fn.set-core-stat-pc, %1, ##, max(1, u(fn.get-core-stat-pc, %0, ##))),,)]
FN.REFACTOR-ABILITIES [#617]: u(fn.set-mode-stat, %0, %1, %2, ABILITIES, squish(iter(get(%0/ABILITIES_%2), if(match(get(v(TACS_DB)/list.ability), setr(A, u(fn.refactor-get-replacement-ability, ##))), %qA),,%b)))
FN.REFACTOR-ATTACK [#617]: [u(fn.set-attack-stat,%0,%1,%2,%3,name, u(fn.super-secure, stripansi(u(fn.get-old-attackname,%0,%2,%4))))] [u(fn.set-attack-stat,%0,%1,%2,%3,OLDNAME,%4)] [iter(ATTACK-TYPE DAMAGE-LEVEL DAMAGE-TYPE EFFECT, u(fn.set-attack-stat,%0,%1,%2,%3,##,get(v(TACS_AUX)/%4_##)),,)]
FN.REFACTOR-CORE-STATS [#617]: [iter(COU END INT LDR TECH, u(fn.set-core-stat,%0,%1,##,add(3,get(%0/stat_##))),,)] [u(fn.set-core-stat, %0, %1, SKILLS, u(fn.format-skills, get(%0/skills)))] [u(fn.set-core-stat,%0,%1,defense-level,neutral)] [u(fn.set-core-stat,%0,%1,combat-flags, )] [u(fn.set-core-stat,%0,%1,curmode, max(1, get(%0/MODE_NUMBER_CURRENT)))] [u(fn.set-core-stat,%0,%1,energon,v(param.init-energon))] [u(fn.set-core-stat, %0, %1, SPECIES, get(%0/SPECIES))]
FN.REFACTOR-GET-REPLACEMENT-ABILITY [#617]: if(get(v(TACS_AUX)/ABILITY_%0), get(v(TACS_AUX)/ABILITY_%0), capstr(lcstr(%0)))
FN.REFACTOR-MODE-STATS [#617]: [@@(MODE TYPE)] [u(fn.set-mode-stat,%0,%1,%2,TYPE,stripansi(u(%0/mode_%2)))] [@@(MODE NAME)] [u(fn.set-mode-stat,%0,%1,%2,NAME,stripansi(u(%0/name_%2)))] [@@(MODE ABILITIES)] [u(fn.refactor-abilities, %0, %1, %2)] [u(fn.set-mode-stat,%0,%1,%2,SIZE,get(%0/size_%2))] [@@(CONVERT REGULAR STATS)] [iter(AGL^SPD ACC^DEX STR^STR FRP^FRP, u(fn.set-mode-stat,%0,%1,%2,before(##,^),add(3, get(%0/STAT_[after(##,^)]))),,)] [@@(Attacks)] [iter(get(%0/attacks_%2), if(get(v(TACS_AUX)/##_damage-level), [setq(R,u(fn.add-attack,%0,%1,%2))][u(FN.REFACTOR-ATTACK,%0,%1,%2,%qR,##)], @@(do nothing for free attacks)),,)] [@@(convert armor)] [u(fn.set-mode-stat, %0, %1, %2, ARMOR, u(fn.refactor-old-armor, get(%0/STAT_DEFEN_%2)))] [@@(copy over velocity)] [u(fn.set-mode-stat, %0, %1, %2, VEL, add(3, get(%0/STAT_VEL_%2)))]
FN.REFACTOR-OLD-ARMOR [#617]: switch(%0, 0,0, 1, 10, 2, 20, 3, 35, 4, 50, 5, 60, 6, 70, 7, 80, 8, 90, >8, 100, 0)
FN.REFACTOR-OLD-STATS [#617]: [u(fn.add-schema,%0,%1)] [u(FN.REFACTOR-CORE-STATS,%0,%1)] [iter(if(get(%0/modes),get(%0/modes),1), u(FN.REFACTOR-MODE-STATS,%0,%1,u(fn.add-mode,%0,%1)),,)]
FN.REFUEL [#617]: [u(msg, %0, [getname2(%1)] refuels [getname2(%0)]'s energon reserves., 1)] [u(fn.add-energon, %0, %2)] [u(fn.add-energon, %1, mul(-1, %2))] [if(hastype(%1, PLAYER), u(getobj(TIMETRACK)/fn.set-time-limit, PLAYER-REFUEL, %0))] [u(fn.setup-pot-info-ability, %0, REFUEL, %1)]
FN.REFUEL2 [#617]: [u(msg, %0, [getname2(%1)] refuels [getname2(%0)]'s energon reserves., 1)] [u(fn.add-energon, %0, %2)] [setadd(%1, AUX`TEMP`TANK, %2, -1)] [u(fn.setup-pot-info-ability, %0, REFUEL, %1)] [u(fn.add-combat-flag, %0, REFUELED)]
FN.REGULATE-ENERGON [#617]: u(fn.set-core-stat, %0, Current, Energon, max(0, min(u(fn.get-core-stat, %0, Current, Energon), u(fn.get-energon-upper-bound, %0))))
FN.REINFORCE [#617]: [u(msg, %0, [getname2(%1)] quickly reinforces [switch(%0, %1, poss(%0), [getname2(%0)]'s)] armor., 1)] [iter(u(fn.get-modes, %0), u(fn.addto-mode-stat, %0, Current, ##, Armor, round(add(fdiv(add(u(fn.get-core-stat, %1, current, TECH), u(fn.get-core-stat, %1, current, INT)), 6), rand(3)), 0), 1),,)] [iter(u(fn.get-modes, %0), u(fn.set-mode-stat, %0, Current, ##, Armor, min(u(fn.get-mode-stat, %0, CURRENT, ##, Armor), u(fn.get-mode-stat, %0, MAX, ##, Armor)), 1),,)] [if(u(fn.is-junkion, %0), @@(junkions infinite reinforcing), u(fn.add-combat-flag, %0, REINFORCED))] [u(fn.deduct-energon, %1, u(fn.get-patch-cost, %1))] [u(fn.setup-pot-info-ability, %1, REINFORCE, %0)] [u(fn.set-the-combat-flag, %1)]
FN.RELEASE-COVER-CHECK [#617]: [@@(ARGUMENTS // 0 - PERSON POTENTIALLY BEING SCARED OR WHATEVER)][if(u(fn.or-combat-flags, %0, SCARED CLOAKED SNEAKING HIDING FF), if(u(fn.has-combat-flag, %0, COVERING), u(fn.destroy-cover, %0)))]
FN.RELEASE-COVER-WHEN-SCARED [#617]: [@@(ARGUMENTS // 0 - PERSON POTENTIALLY BEING SCARED)][if(u(fn.has-combat-flag, %0, SCARED), if(u(fn.has-combat-flag, %0, COVERING), u(fn.destroy-cover, %0)))]
FN.RELOAD-AMMO [#617]: [iter(u(fn.get-all-attack-attribs, %0, CURRENT), [setq(A, u(fn.get-modenum-from-attack-attrib, ##))] [setq(B, u(fn.get-attacknum-from-attack-attrib, ##))] [if(match(u(fn.get-attack-stat, %0, CURRENT, %qA, %qB, Effect), AMMO), u(fn.set-ammo, %0, %qA, %qB, u(fn.get-attack-stat, %0, CURRENT, %qA, %qB, Max_Ammo)))],,)] [if(hastype(%1, PLAYER), u(getobj(TIMETRACK)/fn.set-time-limit, PLAYER-RELOAD, %0))] [u(msg, %0, [getname2(%1)] resupplies [getname2(%0)] with ammunition for [poss(%0)] weapons., 1)]
FN.REMOVE-ANALYSIS-DATA [#617]: [wipe(%0/AUX`TEMP`ANALYSIS`%1)] [u(msg, %0, Removing analysis data for [getname2(%1)].)]
FN.REMOVE-ATTACK [#617]: if(u(fn.is-valid-attack,%0,%1,%2,%3), [wipe(%0/STATS`%1`MODE%2`ATTACK%3)] [u(fn.defrag-attack-numbers,%0,%1,%2)], #-23 INVALID ATTACK)
FN.REMOVE-CANCEL-EFFECT [#617]: [wipe(%0/AUX`PERM`CANCEL`%1)] [u(msg, %0,Removed restrictions on [ucstr(%1)] for your attacks.)]
FN.REMOVE-COMBAT-FLAG [#617]: [u(fn.set-core-stat,%0,CURRENT, combat-flags, setdiff(ucstr(u(fn.get-core-stat,%0,CURRENT,combat-flags)), ucstr(%1)))]
FN.REMOVE-COMBAT-STATUS [#617]: [u(fn.log-combat-flag-tracker, %0, OFF)] [u(fn.remove-combat-flag, %0, COMBAT)] [u(getobj(TIMETRACK)/fn.clear-time-limit, COMBAT-FLAG, %0)] [u(msg, %0, Your COMBAT flag has been cleared.)] [if(t(lattr(%0/AUX`TEMP`ANALYSIS`*)), [iter(lattr(%0/AUX`TEMP`ANALYSIS`*), u(fn.remove-analysis-data, %0, last(##,`)),,)] [u(msg, %0, Your analysis data is now out of date.)])] [if(t(lattr(%0/AUX`TEMP`CRACKSHOT`*)), [iter(lattr(%0/AUX`TEMP`CRACKSHOT`*), u(fn.remove-crackshot-data, %0, last(##,`)),,)] [u(msg, %0, Your targetting data is now out of date.)])] [u(fn.set-core-stat, %0, CURRENT, ENERGON, min(u(fn.get-core-stat, %0, MAX, ENERGON), u(fn.get-core-stat, %0, CURRENT, ENERGON)))] [u(fn.set-core-stat, %0, CURRENT, COU, min(u(fn.get-core-stat, %0, MAX, COU), u(fn.get-core-stat, %0, CURRENT, COU)))] [u(fn.check-courage, u(fn.build-attack-object, , , %0))] [if(u(fn.has-combat-flag, %0, INSPIRED), [u(msg, %0, You feel less inspired.)] [u(fn.remove-combat-flag, %0, INSPIRED)])] [u(fn.remove-combat-flag, %0, PATCHED)] [u(fn.remove-combat-flag, %0, REINFORCED)] [u(fn.remove-combat-flag, %0, RECALIBRATED)] [u(fn.remove-combat-flag, %0, HOLOGRAMS)]  [iter(FEAR CONFUSED BLINDED CRIPPLED BLINDED2 CRIPPLED2 STUNNED SABOTAGED HEAVY UNNERVE LOCKEDON REFUELED REFUELING DIZZY REPEAT MODE-LOCKED2 MODE-LOCKED, u(fn.remove-combat-flag, %0, ##),,)] [attrib_set(%0/AUX`POT`ACTION, NONE)] [wipe(%0/AUX`TEMP)] [@@(Reset Defense Level)] [u(fn.set-core-stat, %0, Current, Defense-Level, Neutral)]
FN.REMOVE-CRACKSHOT-DATA [#617]: [wipe(%0/AUX`TEMP`CRACKSHOT`%1)] [u(msg, %0, Removing targeting data for [getname2(%1)].)]
FN.REMOVE-MODE [#617]: if(u(fn.is-valid-mode,%0,%1,%2), [wipe(%0/STATS`%1`MODE%2)] [u(fn.defrag-mode-numbers,%0,%1)], #-13 INVALID MODE)
FN.REMOVE-TALENT [#617]: switch(1, not(u(fn.has-schema, %0, %1)), #-44 Invalid Schema '%1', not(u(fn.validate-stat-abilities, %2)), #-45 Invalid Ability '%2', not(u(fn.is-valid-talent, %2, %3)), #-46 Invalid Talent '%3' for ability '%2, not(u(fn.has-talent, %0, %1, %2, %3)), #-47 Target does not have talent '%3', [wipe(%0/STATS`%1`TALENTS`%2`%3)]1)
FN.REPAIR [#617]: [u(fn.forcefield-check, %0)] [@@(clear any TEMP auxillary info.. analysis repeating etc)] [wipe(%0/AUX`TEMP)] [@@(Clear any combat-flags)] [u(fn.set-core-stat, %0, Current, Combat-Flags, setinter(u(fn.get-core-stat, %0, Current, Combat-Flags), UNCON))] [@@(fixup some END)] [if(u(fn.has-any-ability, %1, REPAIR HEAL CONSTRUCTION), [u(fn.repair-endurance, %0, %1, %2, expertly)] [u(fn.remove-combat-flag, %0, UNCON)], if(u(fn.compare-stats, setr(2, mean(u(fn.get-core-stat, %1, Current, TECH), u(fn.get-core-stat, %1, Current, INT))), 75), u(fn.repair-endurance, %0, %1, %2,  clumsily), if(u(fn.compare-stats, %q2, 50), u(msg, %0, [getname2(%1)]'s attempt to %2 [getname2(%0)] fails\, but no significant damage is done., 1), u(fn.repair-endurance-fail, %0, %1, %2))))] [@@(fixup some STAT DAMAGE)] [if(and(hastype(%1, PLAYER), u(fn.has-ability, %1, %2)), u(fn.repair-stat-damage, %0, %1, %2))] [@@(mark on the time tracker when the last repair was)] [if(hastype(%1, PLAYER), u(getobj(TIMETRACK)/fn.set-time-limit, PLAYER-REPAIR, %0), u(getobj(TIMETRACK)/fn.set-time-limit, AUTO-REPAIR, %0))]
FN.REPAIR-ENDURANCE [#617]: [u(msg, %0, [getname2(%1)] %3 %2s [getname2(%0)]'s injuries., 1)] [u(fn.set-core-stat-pc, %0, END, 100)] [u(fn.set-core-stat-pc, %0, COU, 100)]
FN.REPAIR-ENDURANCE-FAIL [#617]: [u(msg, %0, [getname2(%1)]'s attempt to %2 [getname2(%0)] goes horribly awry!, 1)] [u(fn.do-direct-damage, %0, add(5, rand(5)), %1, from [getname2(%1)]'s botched [switch(%2,repair, repair job, surgery)].)]
FN.REPAIR-STAT-DAMAGE [#617]: [setq(1, div(u(fn.get-core-stat, %1, Current, TECH), 5))] [iter(STR ACC AGL FRP VEL ARMOR, iter(u(fn.get-modes, %0), u(fn.addto-current-mode-stat, %0, %i0, %i1, %q1, 1),,),,)] [u(msg, %0, [getname2(%1)] is able to %2 some of [getname2(%0)]'s internal [switch(%2,repair, systems%b)]damage., 1)]
FN.RESET [#617]: [u(fn.forcefield-check, %0)] [u(fn.cover-check, %0)] [setq(0,get(%0/STATS`CURRENT`CURMODE))] [u(fn.copy-schema,%0,MAX,CURRENT)] [wipe(%0/AUX`TEMP)] [attrib_set(%0/STATS`CURRENT`CURMODE, %q0)] [u(msg, %0, Your stats [if(%1, and limits%b)]have been reset by an administrator.)] [if(u(fn.is-booster, %0), u(fn.set-aux-stat, %0, Charges, 3))] [if(%1, [iter(lattr(getobj(TIMETRACK)/LIMIT.*), wipe(getobj(TIMETRACK)/LIMIT-[after(##, .)]`%0),,)]) ]
FN.RESET-AMMO [#617]: iter(u(fn.get-all-attack-attribs, %0, TEMP), u(fn.set-ammo, %0, u(fn.get-modenum-from-attack-attrib, ##), u(fn.get-attacknum-from-attack-attrib, ##), u(fn.get-attack-attrib-stat, ##, max_ammo)),,)
FN.RESOLVE-MULTIPLE-INSPIRE-TARGETS [#617]: iter(%1, switch(setr(0, locate2(%0, ##, *)), #-1, #-1^No target named '##', #-2, #-2^Multiple targets named '##', switch(1, not(u(combat-ok, %q0)), %q0^[getname2(%q0)] is not COMBAT-OK, strmatch(%0, %q0), %q0^No inspiring yourself. Dweeb., u(getobj(TACS)/fn.has-combat-flag, %q0, INSPIRED), %q0^[getname(%q0)] is already inspired., %q0^OK)), \,,|)
FN.RESOLVE-MULTIPLE-TARGETS [#617]: iter(%1, switch(setr(0, locate2(%0, ##, *)), #-1, #-1^No target named '##', #-2, #-2^Multiple targets named '##', switch([u(combat-ok, %q0)]_[not(u(fn.is-hidden, %q0))]_[not(hasattrp(%q0, AUX`NOATTACK))], 0_?_?, %q0^[getname2(%q0)] is not COMBAT-OK, ?_0_?, %q0^You need to see [getname2(%q0)] to attack [obj(%q0)], ?_?_0, %q0^[name(%q0)] is not attackable, 1_1_1, %q0^OK)), \,,|)
FN.RESTORE-PLAYER-SPECIFIC-SCHEMA [#617]: if(u(fn.has-schema, %0, PLAYER-%1), [@@(we have a winner copy em over)] [u(fn.copy-schema, %0, PLAYER-%1, MAX)], @@(nothing specific do nothing))
FN.RETREAT [#617]: [if(u(fn.is-hidden, %0), u(msg, %0, Like the wind\, [getname2(%0)] is gone!, 1), u(msg, %0, [getname2(%0)] begins retreating\, [switch(words(u(fn.get-parting-shot-list, %0)), 0, outrunning all pursuit., leaving [obj(%0)]self vulnerable to parting shots from [itemize(map(#lambda/getname2(\%0), u(fn.get-parting-shot-list, %0),,|),|)])], 1))] [u(fn.setup-pot-info-ability, %0, RETREAT)]
FN.ROOM-HAS-CP [#617]: t(match(u(fn.get-capture-points, %0), %1))
FN.SABOTAGE [#617]: [u(msg, %0, [getname2(%0)]'s weapons are sabotaged by [getname2(%1)]., 1)] [u(msg, %0, You have been sabotaged! One of your attacks will BACKFIRE on you soon!)] [u(fn.add-combat-flag, %0, SABOTAGED)] [attrib_set(%0/AUX`TEMP`SABOTAGE_COUNT, 0)]
FN.SAVE-PLAYER-SPECIFIC-SCHEMA [#617]: if(u(fn.compare-schema, %0, MAX, BASE), [@@(max stats are different from base so save player-specific)] [u(fn.copy-schema, %0, MAX, PLAYER-%1)] [u(fn.copy-schema, %0, BASE, MAX)], @@(no difference do nothing))
FN.SCRAPPER-BAR [#617]: iter(lnum(1,20), u(fn.barcolor,%0,##),%b,)
FN.SEARCH-FOR-TARGET [#617]: u(fn.force-unhide-target, %0)
FN.SECONDARY-EFFECTS-CHECK [#617]: if(dec(words(u(fn.get-attack-attrib-stat, [u(AOBJ, %0, attack_attrib_source)]^[u(AOBJ, %0, attack_attrib)], damage-type))),if(gt(add(div(u(fn.get-core-stat, u(AOBJ, %0, attacker), Current, INT),2),mul(sub(words(u(fn.get-attack-attrib-stat, [u(AOBJ, %0, attack_attrib_source)]^[u(AOBJ, %0, attack_attrib)], damage-type)),2),v(PARAM.lucky-bonus)),mul(u(fn.has-effect, %0, LUCKY),v(PARAM.lucky-bonus)),mul(u(fn.has-effect, %0, UNLUCKY),v(PARAM.unlucky-bonus))),rand(0,100)),[switch(rand(0,99),<13,[iter(u(fn.get-modes, u(AOBJ, %0, target)), u(fn.addto-mode-stat, u(AOBJ, %0, target), Current, ##, ACC, v(PARAM.SECONDARY-EFFECTS-BASE), 1),,)],<26,[iter(u(fn.get-modes, u(AOBJ, %0, target)), u(fn.addto-mode-stat, u(AOBJ, %0, target), Current, ##, AGL, v(PARAM.SECONDARY-EFFECTS-BASE), 1),,)],<39,[iter(u(fn.get-modes, u(AOBJ, %0, target)), u(fn.addto-mode-stat, u(AOBJ, %0, target), Current, ##, Armor, v(PARAM.SECONDARY-EFFECTS-BASE), 1),,)],<52,[u(fn.addto-core-stat, u(AOBJ, %0, target), CURRENT, COU, v(PARAM.SECONDARY-EFFECTS-BASE))] [u(fn.check-courage, %0)],<65, [u(fn.deduct-energon, u(AOBJ, %0, target),mul(-1,v(PARAM.SECONDARY-EFFECTS-BASE)))],<78,[iter(u(fn.get-modes, u(AOBJ, %0, target)), u(fn.addto-mode-stat, u(AOBJ, %0, target), Current, ##, FRP, v(PARAM.SECONDARY-EFFECTS-BASE), 1),,)],<91,[iter(u(fn.get-modes, u(AOBJ, %0, target)), u(fn.addto-mode-stat, u(AOBJ, %0, target), Current, ##, STR, v(PARAM.SECONDARY-EFFECTS-BASE), 1),,)],[iter(u(fn.get-modes, u(AOBJ, %0, target)), u(fn.addto-mode-stat, u(AOBJ, %0, target), Current, ##, VEL, v(PARAM.SECONDARY-EFFECTS-BASE), 1),,)])][u(msg, u(AOBJ, %0, attacker), [ansi(hg,Secondary Damage!)], 1)],@@(do nothing)),@@(do nothing))
FN.SELF-REPAIR [#617]: if(cand(u(combat-ok, %0), not(u(fn.has-combat-flag, %0, COMBAT))), switch(u(getobj(TIME)/get-activity-status-name.fn, u(getobj(TIME)/get-activity-status.fn, %0)), OOC*, @@(do nothing), IC/Idle, u(fn.self-repair-helper, %0, 2), IC/One, u(fn.self-repair-helper, %0, 2), IC/Act, u(fn.self-repair-helper, %0, 3)), @@(not combat-ok))
FN.SELF-REPAIR-ENDURANCE [#617]: [u(fn.addto-current-core-stat, %0, END, %1)] [@@(u(msg, %0, You feel a little healthier (Endurance self-heal).))]
FN.SELF-REPAIR-HELPER [#617]: [switch(u(fn.get-core-stat-pc, %0, END), <50, @@(do nothing), <100, u(fn.self-repair-endurance, %0, %1), u(fn.self-repair-stat-damage, %0, %1))] [u(fn.addto-current-core-stat, %0, ENERGON, %1)]
FN.SELF-REPAIR-STAT-DAMAGE [#617]: [iter(STR ACC AGL FRP VEL ARMOR, iter(u(fn.get-modes, %0), u(fn.addto-current-mode-stat, %0, %i0, %i1, %1, 1),,),,)] [@@(u(msg, %0, You feel a little healthier (Stats self-heal).))]
FN.SEND-COMBAT-SPAM [#617]: u(msg-spam, u(AOBJ, %0, target), [getname2(u(AOBJ, %0, attacker))] \([name(u(AOBJ, %0, attacker))]\) used "[u(fn.get-attack-attrib-stat, [u(AOBJ, %0, attack_attrib_source)]^[u(AOBJ, %0, attack_attrib)], NAME)]": A Level [u(AOBJ, %0, damage_level)] [ucstr(u(AOBJ, %0, attack_type))] attack.)
FN.SET-AMMO [#617]: u(fn.set-attack-stat, %0, CURRENT, %1, %2, AMMO, %3)
FN.SET-ATTACK-ATTRIB-STAT [#617]: u(fn.set-attack-stat, before(%0, ^), index(%0, `, 2, 1), u(fn.get-modenum-from-attack-attrib, %0), u(fn.get-attacknum-from-attack-attrib, %0), %1, %2)
FN.SET-ATTACK-STAT [#617]: switch([u(fn.has-schema,%0,%1)]_[u(fn.is-valid-mode,%0,%1,%2)]_[u(fn.is-valid-attack,%0,%1,%2,%3)]_[u(fn.is-attack-stat,%4)]_[u(fn.validate-stat,%4,%5)], 0_?_?_?_?, #-15 INVALID SCHEMA %1, ?_0_?_?_?, #-16 INVALID MODE# %2, ?_?_0_?_?, #-17 INVALID ATTACK# %3 for MODE# %2, ?_?_?_0_?, #-18 INVALID ATTACK STAT %4, ?_?_?_?_0, #-19 BAD VALUE '%5' FOR %4, 1_1_1_1_1, [attrib_set(%0/STATS`%1`MODE%2`ATTACK%3`%4, %5)]1)
FN.SET-AUX-STAT [#617]: switch([u(fn.is-aux-stat, %1)]_[u(fn.validate-stat, %1, %2)], 0_?, #-38 INVALID AUX STAT %1, ?_0, #-39 BAD VALUE '%2' FOR %1, 1_1, [attrib_set(%0/AUX`PERM`%1, %2)]1)
FN.SET-COMBINER-CURRENT-STATS [#617]: iter([v(list.combiner-stats)] END, u(fn.set-either-stat, %0, CURRENT, ##, add(u(fn.get-either-stat, %0, MAX, ##, 1), round(mul(u(fn.get-either-stat, %0, MAX, ##, 1), fdiv(lmath(add, map(#lambda/sub(u(fn.get-either-stat-pc, \%0, ##, 1), 100), u(fn.get-taken-combiner-members, %0))), 100)), 0))),,)
FN.SET-COMBINER-ENERGON [#617]: [u(fn.set-core-stat, %0, MAX, ENERGON, mul(round(lmath(mean, map(#lambda/u(fn.get-core-stat, \%0, MAX, ENERGON), u(fn.get-taken-combiner-members, %0))), 0), 2))] [u(fn.set-core-stat, %0, CURRENT, ENERGON, mul(round(lmath(mean, map(#lambda/u(fn.get-core-stat, \%0, CURRENT, ENERGON), u(fn.get-taken-combiner-members, %0))), 0), 2))]
FN.SET-COMBINER-MAX-STATS [#617]: iter([v(list.combiner-stats)] END, u(fn.set-either-stat, %0, MAX, ##, ceil(mul(u(fn.get-combiner-stat-percentage, %0, ##), u(fn.calc-combiner-stat-member-total, %0, MAX, ##)))),,)
FN.SET-COMBINER-STAT-PERCENTAGES [#617]: iter(v(LIST.COMBINER-STATS), attrib_set(%0/AUX`PERM`COMBINER-PC`##, u(fn.calc-combiner-stat-percentage, %0, ##)),,)
FN.SET-CORE-STAT [#617]: switch([u(fn.has-schema,%0,%1)]_[u(fn.is-core-stat,%2)]_[u(fn.validate-stat,%2,%3)], 0_?_?, #-2 INVALID SCHEMA %1, ?_0_?, #-3 INVALID CORE STAT %2, ?_?_0, #-4 BAD VALUE '%3' FOR %2, 1_1_1, [attrib_set(%0/STATS`%1`%2, %3)]1)
FN.SET-CORE-STAT-PC [#617]: u(fn.set-core-stat, %0, Current, %1, round(mul(u(fn.get-core-stat, %0, MAX, %1), %2, 0.01), 0))
FN.SET-CP-STAT [#617]: switch([u(fn.room-has-cp, %0, %1)]_[u(fn.is-valid-cp-stat, %2)], 0_?, #-35 ROOM %0 HAS NO CAPTURE POINT "%1", ?_0, #-36 INVALID CP STAT "%2", 1_1, 1[attrib_set(%0/AUX`PERM`CAPTURE-POINTS`CP-%1`%2, %3)])
FN.SET-CUSTOM-ATTACK-NAME [#617]: attrib_set(%0/AUX`PERM`ATTACKNAMES`%1, %2)
FN.SET-EITHER-STAT [#617]: switch([u(fn.is-core-stat, %2)]_[u(fn.is-mode-stat, %2)], 1_?, u(fn.set-core-stat, %0, %1, %2, %3), ?_1, u(fn.set-mode-stat, %0, %1, if(%4, %4, u(curmode, %0)), %2, %3), #-42 INVALID CORE OR MODE STAT)
FN.SET-EITHER-STAT-PC [#617]: switch([u(fn.is-core-stat, %1)]_[u(fn.is-mode-stat, %1)], 1_?, u(fn.set-core-stat-pc, %0, %1, %2), ?_1, u(fn.set-mode-stat-pc, %0, if(%3, %3, u(curmode, %0)), %1, %2), #-43 INVALID CORE OR MODE STAT)
FN.SET-FAKE-DEFENSE-LEVEL [#617]: [u(msg, %0, Setting your "fake" defense level to [capstr(lcstr(%1))].)] [u(fn.set-aux-stat, %0, Fake-Defense-Level, %1)]
FN.SET-MODE-STAT [#617]: switch([u(fn.has-schema,%0,%1)]_[u(fn.is-valid-mode,%0,%1,%2)]_[u(fn.is-mode-stat,%3)]_[u(fn.validate-stat,%3,%4)], 0_?_?_?, #-7 INVALID SCHEMA %1, ?_0_?_?, #-8 INVALID MODE# '%2', ?_?_0_?, #-9 INVALID MODE STAT %3, ?_?_?_0, #-10 BAD VALUE '%4' FOR %3, 1_1_1_1, [attrib_set(%0/STATS`%1`MODE%2`%3, %4)]1)
FN.SET-MODE-STAT-PC [#617]: u(fn.set-mode-stat, %0, Current, %1, %2, round(mul(u(fn.get-mode-stat, %0, MAX, %1, %2), %3, 0.01), 0))
FN.SET-MOST-RECENT-WEAPON [#617]: [@@(ARGUMENTS: 0 - FORGER # // 1 - NEW WEAPON #)] [iter(u(fn.get-forged-weapons, %0), u(fn.set-aux-stat, ##, Smeltable, 0),,)] [u(fn.set-aux-stat, %1, Smeltable, 1)]
FN.SET-PROTECTION [#617]: switch(0, u(fn.has-schema,%0,%1), #-28 BAD SCHEMA, u(fn.is-valid-mode,%0,%1,%2), #-28.5 BAD MODE NUMBER, u(fn.validate-stat-damage-type, %3), #-29 BAD DAMAGE TYPE, u(fn.validate-stat-protection,%4), #-30 BAD PROTECTION VALUE, [attrib_set(%0/STATS`%1`MODE%2`PROTECTION`%3, %4)]1)
FN.SET-THE-COMBAT-FLAG [#617]: [u(fn.check-for-first-combat-flag, %0)] [u(getobj(TIMETRACK)/fn.set-time-limit, COMBAT-FLAG, %0)]
FN.SETUP-CAPTURE-POINT [#617]: [attrib_set(%0/AUX`PERM`CAPTURE-POINTS`CP-%1,)] [attrib_set(%0/AUX`PERM`CAPTURE-POINTS`CP-%1`NAME, %2)] [attrib_set(%0/AUX`PERM`CAPTURE-POINTS`CP-%1`OPERATIONAL, 1)] [attrib_set(%0/AUX`PERM`CAPTURE-POINTS`CP-%1`CONTROLLED-BY, )] [attrib_set(%0/AUX`PERM`CAPTURE-POINTS`CP-%1`ROUNDS-HELD, 0)]
FN.SETUP-POT-INFO [#617]: [setq(7, u(AOBJ, %0, attacker))] [attrib_set(%q7/AUX`POT`TIME, secs())] [attrib_set(%q7/AUX`POT`ACTION, ATTACK)] [attrib_set(%q7/AUX`POT`ATTACK, u(AOBJ, %0, name))] [attrib_set(%q7/AUX`POT`LEVEL, u(AOBJ, %0, damage_level))] [attrib_set(%q7/AUX`POT`TYPE, u(AOBJ, %0, attack_type))] [attrib_set(%q7/AUX`POT`AREA-TARGETS, u(AOBJ, %0, area_div))] [attrib_set(%q7/AUX`POT`TARGET, u(AOBJ, %0, target))] [attrib_set(%q7/AUX`POT`RESULT, %1)]
FN.SETUP-POT-INFO-ABILITY [#617]: [attrib_set(%0/AUX`POT`TIME, secs())] [attrib_set(%0/AUX`POT`ACTION, %1)] [attrib_set(%0/AUX`POT`TARGET, %2)]
FN.SHAKE [#617]: [u(msg, %0, [getname2(%0)] takes a moment to shake off the effects of the last attack., 1)] [u(fn.remove-combat-flag, %0, STUNNED)]
FN.SNEAK-OFF [#617]: [u(fn.remove-combat-flag, %0, SNEAKING)] [u(msg, %0, [getname2(%0)] appears from the shadows..., 1)]
FN.SNEAK-ON [#617]: [u(fn.deduct-energon, %0, v(PARAM.sneak-cost))] [u(fn.add-combat-flag, %0, SNEAKING)] [u(msg, %0, [getname2(%0)] slips into the shadows and out of sight..., 1)] [setattrib(%0/AUX`TEMP`HIDE, mean(u(fn.get-current-mode-stat, %0, AGL), u(fn.get-core-stat, %0, Current, INT)))] [u(fn.set-core-stat, %0, Current, Defense-Level, Hidden)] [u(msg, %0, Automatically setting your defense level to '[ansi(h,Hidden)]')] [u(fn.setup-pot-info-ability, %0, SNEAK)]
FN.SORT-DEFENSE-LEVEL [#617]: comp(get(v(TACS_DB)/param.defense-off-%0), get(v(TACS_DB)/param.defense-off-%1), N)
FN.STAT-HEALTH [#617]: round(lmath(mean, map(#lambda/u(fn.get-mode-stat-pc, %0, %1, \%0), filter(#lambda/neq(0, u(fn.get-mode-stat, %0, MAX, %1, \%0)), ACC STR FRP AGL VEL ARMOR))), 0)
FN.SUPER-SECURE [#617]: regeditall(secure(stripansi(%0)), \\|, _, \\^, _)
FN.SUPPORT [#617]: [u(fn.add-combat-flag, %0, SUPPORTED-%1)] [u(fn.setup-pot-info-ability, %2, SUPPORT, %0)]
FN.SYSCHECK [#617]: [header(Brief Self Diagnostics)]%rHealth:%b \[[u(fn.scrapper-bar, max(u(fn.get-core-stat-pc,%0,END),0))]\] [ljust([u(fn.get-core-stat,%0,CURRENT,END)],3)] / [ljust([u(fn.get-core-stat,%0,MAX,END)],3)] -- ([u(fn.get-core-stat-pc,%0,END)]%%)%rEnergon: \[[u(fn.scrapper-bar, max(u(fn.get-core-stat-pc,%0,ENERGON),0))]\] [ljust([u(fn.get-core-stat,%0,CURRENT,ENERGON)],3)] / [ljust([u(fn.get-core-stat,%0,MAX,ENERGON)],3)] -- ([u(fn.get-core-stat-pc,%0,ENERGON)]%%)%r[setq(S, u(fn.stat-health, %0, u(curmode, %0)))]Systems: \[[u(fn.scrapper-bar, max(%qS, 0))]\] (%qS%%)%tCourage Limit: [u(cou-end,%0)]%rDefense Level: [ucstr(u(fn.get-core-stat, %0, Current, Defense-Level))]%rCombat Flags: [u(fn.get-core-stat,%0,CURRENT,COMBAT-FLAGS)]%r[header(Current Mode: [u(curmode,%0)] - [u(fn.get-mode-stat,%0,CURRENT,u(curmode,%0),TYPE)])]
FN.TIMER-HELPER [#617]: [if(and(u(fn.has-combat-flag, %0, COMBAT), not(u(fn.is-inside-combiner, %0))), if(u(getobj(TIMETRACK)/fn.check-time-limit, COMBAT-FLAG, %0), u(fn.remove-combat-status, %0)))]
FN.TRANSFER-SCHEMA [#617]: if(u(fn.has-schema,%0,%1), [wipe(%2/STATS`%3)] [iter(lattr(%0/STATS`%1**), attrib_set(%2/[replace(##,2,%3,`)], [get(%0/##)]),,)], #-1 INVALID SOURCE SCHEMA %1)
FN.TRANSFORM [#617]: [remit(loc(%0), if(hasattr(%0,TRANSFORM_MSG_%1), eval(%0, TRANSFORM_MSG_%1), [getname2(%0)] transforms into [poss(%0)] [u(fn.get-mode-stat, %0, Current, %1, NAME)] mode.))] [u(fn.set-core-stat, %0, Current, CurMode, %1)] [u(fn.remove-combat-flag, %0, AIMING)] [switch(1, u(fn.is-weapon-object, %0), attrib_set(%0/obj_desc, get(%0/desc_%1)), attrib_set(%0/describe, get(%0/desc_%1)))]
FN.UNCAPTURE [#617]: [attrib_set(%1/AUX`PERM`CAPTURE-POINTS`CP-%2`CONTROLLED-BY,)] [attrib_set(%1/AUX`PERM`CAPTURE-POINTS`CP-%2`ROUNDS-HELD, 0)]
FN.UNCOVER-FROM-COVEREE [#617]: [@@(ARGUMENTS // 0 - PERSON WOT TYPED !UNCOVER // 1 - PERSON COVERING THEM)] [u(fn.destroy-cover, %1)]
FN.UNCOVER-FROM-COVERER [#617]: [@@(ARGUMENTS // 0 - PERSON WOT TYPED !UNCOVER // 1 - PERSON THEY ARE COVERING)] [u(fn.destroy-cover, %0)]
FN.UNIFORM-RNG [#617]: fdiv(rand(99999), 100000)
FN.UPDATE-SQL-LOG [#617]: sql(insert into tacs_combat_log values (null, "[u(AOBJ, %0, attacker)]", "[u(AOBJ, %0, target)]", "[u(aobj, %0, attack_type)]", [u(aobj, %0, damage_level)], "[u(aobj, %0, damage_type)]", "[u(aobj, %0, effect)]", "[u(fn.get-core-stat, u(AOBJ, %0, attacker), current, defense-level)]", "[u(fn.get-core-stat, u(AOBJ, %0, target), current, defense-level)]", [u(fn.get-core-stat, u(AOBJ, %0, attacker), current, energon)], "%0", "%1", "%2", [secs()], "[loc(u(AOBJ, %0, target))]", [u(curmode, u(AOBJ, %0, attacker))], [u(curmode, u(AOBJ, %0, target))], "[u(fn.get-core-stat, u(AOBJ, %0, attacker), Current, Combat-Flags)]", "[u(fn.get-core-stat, u(AOBJ, %0, target), Current, Combat-Flags)]"))
FN.USE-CHARGE [#617]: [if(match(v(LIST.NON-CHARGE-BOOSTERS), u(fn.get-aux-stat, %0, BOOST_TYPE)), [@@(does not use charges)] [u(fn.handle-non-charge-[u(fn.get-aux-stat, %0, BOOST_TYPE)], %0, %1, %2)], [@@(uses charges as per usual)] [u(fn.set-aux-stat, %0, CHARGES, dec(u(fn.get-aux-stat, %0, CHARGES)))] [u(fn.set-aux-stat, %0, Activated, 0)] [u(msg, u(fn.get-aux-stat, %0, Owner), [name(u(fn.get-aux-stat, %0, Owner))] uses up a charge on [poss(u(fn.get-aux-stat, %0, Owner))] [ansi(hr,name(%0))] booster pack!, 1)])] [u(%0/fn.side-effects, u(fn.get-aux-stat, %0, Owner))] [u(msg, u(fn.get-aux-stat, %0, Owner), Automatically deactivating booster pack [ansi(h,name(%0))])] [u(fn.log-booster-action, USE_CHARGE, u(fn.get-aux-stat, %0, Owner), %0)]
FN.VALIDATE-STAT [#617]: if(hasattr(%!, fn.validate-stat-%0), u(fn.validate-stat-%0,%1), 1)
FN.VALIDATE-STAT-ABILITIES [#617]: if(%0,u(fn.list-validator,ability,%0),1)
FN.VALIDATE-STAT-ACC [#617]: and(gte(%0,0),isint(%0))
FN.VALIDATE-STAT-AGL [#617]: and(gte(%0,0),isint(%0))
FN.VALIDATE-STAT-AMMO [#617]: and(isint(%0), gte(%0, 0))
FN.VALIDATE-STAT-ARMOR [#617]: and(gte(%0,0),isint(%0))
FN.VALIDATE-STAT-ATTACK-TYPE [#617]: t(match(get(v(TACS_DB)/list.attack-type), %0))
FN.VALIDATE-STAT-ATTACKLOCK [#617]: t(match(v(LIST.PASSLOCK-TYPES), %0))
FN.VALIDATE-STAT-BIN_TYPE [#617]: u(fn.list-validator,bin_type,%0)
FN.VALIDATE-STAT-CANCELABLE-EFFECT [#617]: if(%0,u(fn.list-validator,cancelable-effect,%0),1)
FN.VALIDATE-STAT-COMBAT-FLAGS [#617]: if(%0,u(fn.list-validator,combat-flag,%0),1)
FN.VALIDATE-STAT-COU [#617]: and(gte(%0,0),isint(%0))
FN.VALIDATE-STAT-CURMODE [#617]: isint(%0)
FN.VALIDATE-STAT-DAMAGE-LEVEL [#617]: and(gte(%0,0),isint(%0))
FN.VALIDATE-STAT-DAMAGE-TYPE [#617]: u(fn.list-validator,damage-type,%0)
FN.VALIDATE-STAT-DEFENSE-LEVEL [#617]: t(match(get(v(TACS_DB)/list.defense-level), %0))
FN.VALIDATE-STAT-EFFECT [#617]: if(%0,u(fn.list-validator,effect,%0),1)
FN.VALIDATE-STAT-END [#617]: and(gte(%0,0),isint(%0))
FN.VALIDATE-STAT-ENERGON [#617]: and(gte(%0,0),isint(%0))
FN.VALIDATE-STAT-EXOABLE-ABILITY [#617]: if(%0, u(fn.list-validator, exoable-ability,%0), 1)
FN.VALIDATE-STAT-FACTION [#617]: t(match(get(v(TACS_DB)/list.faction), %0))
FN.VALIDATE-STAT-FRP [#617]: and(gte(%0,0),isint(%0))
FN.VALIDATE-STAT-INT [#617]: and(gte(%0,0),isint(%0))
FN.VALIDATE-STAT-LDR [#617]: and(gte(%0,0),isint(%0))
FN.VALIDATE-STAT-OWNER [#617]: isdbref(%0)
FN.VALIDATE-STAT-PROTECTION [#617]: isint(%0)
FN.VALIDATE-STAT-SIZE [#617]: and(gte(%0,0),isint(%0))
FN.VALIDATE-STAT-SPECIES [#617]: t(match(get(v(TACS_DB)/list.species), %0))
FN.VALIDATE-STAT-STR [#617]: and(gte(%0,0),isint(%0))
FN.VALIDATE-STAT-TECH [#617]: and(gte(%0,0),isint(%0))
FN.VALIDATE-STAT-VEL [#617]: and(gte(%0,0),isint(%0))
FN.VALIDATE-WEAPONSMITH-EFFECTS [#617]: u(fn.list-validator, VALID-WEAPONSMITH-EFFECT, %0)
FN.VEHICLE-STOP-BEING-ENGINEER [#617]: [@@(ARGS: 0 - VEHICLE // 1 - CHARACTER)] [wipe(%0/ENGINEER)] [u(msg, %0, [name(%1)] stops being the engineer.)] [u(#8041/fn.remove-combat-flag, %0, V_HAS_ENGINEER)]
FN.VEHICLE-STOP-BEING-GUNNER [#617]: [@@(ARGS: 0 - VEHICLE // 1 - CHARACTER)] [wipe(%0/GUNNER)] [u(msg, %0, [name(%1)] stops being the gunner.)] [u(#8041/fn.remove-combat-flag, %0, V_HAS_GUNNER)]
FN.VEHICLE-STOP-BEING-PILOT [#617]: [@@(ARGS: 0 - VEHICLE // 1 - CHARACTER)] [wipe(%0/PILOT)] [u(msg, %0, [name(%1)] stops being the pilot.)] [u(#8041/fn.remove-combat-flag, %0, V_HAS_PILOT)]
FN.VELBOOST.DEFAULT [#617]: switch(u(curmode, %0), 1, NONE, LOW-D)
FN.VELBOOST.DIVE [#617]: if(u(fn.has-ability, %0, Dive), HIGH, NONE)
FN.VELBOOST.FLIGHT [#617]: switch([u(fn.has-ability, %0, Flight)]_[u(curmode, %0)], 1_1, LOW, 1_*, HIGH, NONE)
FN.VELBOOST.FTL [#617]: if(u(fn.has-ability, %0, FTL), HIGH, NONE)
FN.VELBOOST.ICE [#617]: if(u(fn.has-ability, %0, Sub-Zero), HIGH, NONE)
FN.VELBOOST.SPACE [#617]: switch([u(fn.has-ability, %0, Space-Flight)]_[u(fn.has-ability, %0, Space-Walk)], 1_*, HIGH, *_1, LOW-D, NONE)
FN.VELBOOST.SWIM [#617]: if(u(fn.has-ability, %0, Swim), LOW, NONE)
FN.WEAPON-IS-EMPTY [#617]: eq(u(fn.get-attack-stat, %0, Current, 1, 1, Ammo), 0)
FN.WEAPON-IS-UNUSED [#617]: eq(u(fn.get-attack-stat, %0, Current, 1, 1, Ammo), u(fn.get-attack-stat, %0, Current, 1, 1, Max_Ammo))
FN.WIPE-REAL-ATTACKS [#617]: [iter(u(fn.get-attacks,%0,%1,%2), if(isnum(right(##,1)), wipe(%0/[last(##,^)]), @@(do nothing)),,)]
FN.WIPE-REAL-MODES [#617]: [iter(u(fn.get-modes,%0,%1), if(isnum(##), [wipe(%0/STATS`%1`MODE##)] , @@(do nothing)),,)]
FN.WIPE-TEMP-ATTACKS [#617]: [iter(u(fn.get-attacks,%0,%1,%2), if(isnum(right(##,1)), @@(do nothing), wipe(%0/[last(##,^)])),,)]
FN.WIPE-TEMP-MODES [#617]: [iter(u(fn.get-modes,%0,%1), if(isnum(##), @@(do nothing), [wipe(%0/STATS`%1`MODE##)]),,)]
LIST.ATTACK-OBJECT-FIELDS [#617]: declaration attacker attack_source target global_name name attack_type damage_level damage_type effect ammo ammo_type area_div attack_attrib attack_attrib_source extra_flags chain_list
LIST.ATTACK-STAT [#617]: NAME OLDNAME ATTACK-TYPE DAMAGE-LEVEL DAMAGE-TYPE EFFECT AMMO MAX_AMMO AMMO_TYPE BIN_TYPE DISABLED
LIST.AUX-STAT [#617]: OWNER ATTACKLOCK CHARGES MAX_CHARGES ACTIVATED BOOST_TYPE BOOST_AMOUNT RECHARGEABLE ATTACKLOCK-LIST CREATED_BY CREATED_ABILITY ACCOUNTED_BY ORIGINAL_COST SMELTABLE RECENT_HIT TIMER FAKE-DEFENSE-LEVEL
LIST.BOOSTER-PACK-TYPE [#617]: DAMAGE ATTACK DEFEND ENERGON ARMOR SHIELD ABILITY
LIST.COMBINER-STATS [#617]: STR ACC AGL FRP INT LDR COU TECH VEL
LIST.CORE-STAT [#617]: DEFENSE-LEVEL COMBAT-FLAGS ENERGON COU LDR TECH INT END CURMODE SKILLS SPECIES
LIST.CP-STAT [#617]: NAME OPERATIONAL CONTROLLED-BY ROUNDS-HELD OFF-MOD DEF-MOD DAMAGE-MOD ARMOR-MOD FIGHT-FACTOR HOLDING-BONUS
LIST.MODE-STAT [#617]: TYPE NAME STR FRP ACC AGL SIZE ARMOR VEL ABILITIES PROTECTION
LIST.NON-CHARGE-BOOSTERS [#617]: SHIELD
LIST.PASSLOCK-TYPES [#617]: ANYONE ALLIES FACTION OWNER LIST
LIST.PUBLIC-COMBAT-FLAGS [#617]: CONFUSED BLINDED CRIPPLED STUNNED FF FF-CAST COVERED COVERING
MAP.GET-AVAIL-ATTACKS [#617]: if(strmatch(first(%0, |), first(after(%0, |), ^)), #0, first(%0, |))
MSG [#617]: if(%2, remit(if(hastype(%0, EXIT), home(%0), loc(%0)),[ansi(h,Combat:)] %1), pemit(%0,[ansi(h,Combat:)] %1))
MSG-SPAM [#617]: if(hasflag(%0, COMBAT_SPAM), if(%2, remit(if(hastype(%0, EXIT), home(%0), loc(%0)),[ansi(h,Combat:)] %1), pemit(%0,[ansi(h,Combat:)] %1)))
PARAM.ACCURATE-BONUS [#617]: 25
PARAM.ANALYZE-BONUS [#617]: 2
PARAM.AREA-DAMAGE-MULTIPLIER [#617]: 1
PARAM.AREA-ENERGON-DIV [#617]: 2
PARAM.ARMOR-BONUS [#617]: -.10
PARAM.ARMOR-OP-AGILITY-PENALTY [#617]: 10
PARAM.ARMOR-OP-ARMOR-BONUS [#617]: 8
PARAM.AVERAGE-ACC [#617]: 65
PARAM.AVERAGE-ARMOR [#617]: 50
PARAM.AVERAGE-SIZE [#617]: 6
PARAM.BACKFIRE-FREQUENCY [#617]: 5
PARAM.BASE-ENERGON-CHARGE-AMOUNT [#617]: 1
PARAM.BASE-ENERGON-COST [#617]: 4
PARAM.BASE-RESERVE-TANK [#617]: 25
PARAM.BLINDED-BONUS [#617]: -20
PARAM.CLOAK-COST [#617]: 10
PARAM.COMBINER-STAT-DAMAGE-REDUCE [#617]: 3
PARAM.CONFUSE-FREQUENCY [#617]: 1
PARAM.CORRUPT-BASE [#617]: 20
PARAM.CRIPPLED-BONUS [#617]: -20
PARAM.DAMAGE-INTERCEPT [#617]: 10
PARAM.DAMAGE-OVERLOAD [#617]: 2
PARAM.DAMAGE-SLOPE [#617]: 2
PARAM.DAMAGE-STAT-DIVISOR [#617]: 100
PARAM.DEFENSE-LEVEL-QUIET-EVADE [#617]: 1
PARAM.DETECT-SEARCH-BONUS [#617]: 10
PARAM.DISINTEGRATE-BASE [#617]: 50
PARAM.DIZZY-BONUS [#617]: -10
PARAM.EFFECT-COST-BLIND [#617]: 6
PARAM.EFFECT-COST-BLIND2 [#617]: 6
PARAM.EFFECT-COST-CONFUSE [#617]: 15
PARAM.EFFECT-COST-CORRUPT [#617]: 12
PARAM.EFFECT-COST-CRIPPLE [#617]: 6
PARAM.EFFECT-COST-CRIPPLE2 [#617]: 6
PARAM.EFFECT-COST-DISINTEGRATE [#617]: 18
PARAM.EFFECT-COST-DIZZY [#617]: 6
PARAM.EFFECT-COST-EFFICIENT [#617]: -3
PARAM.EFFECT-COST-FLAWLESS [#617]: 18
PARAM.EFFECT-COST-HEAVY [#617]: 6
PARAM.EFFECT-COST-HEAVY-PENALTY [#617]: 5
PARAM.EFFECT-COST-LOCKON [#617]: 12
PARAM.EFFECT-COST-LUCKY [#617]: 3
PARAM.EFFECT-COST-MINI-CORRUPT [#617]: 6
PARAM.EFFECT-COST-MODE-LOCK [#617]: 15
PARAM.EFFECT-COST-NO-ARMOR [#617]: 6
PARAM.EFFECT-COST-OVERPOWERED [#617]: 3
PARAM.EFFECT-COST-OVERPOWERED2 [#617]: 6
PARAM.EFFECT-COST-PIERCE [#617]: 9
PARAM.EFFECT-COST-REPEAT [#617]: 12
PARAM.EFFECT-COST-SHATTER [#617]: 9
PARAM.EFFECT-COST-STUN [#617]: 15
PARAM.EFFECT-COST-TRAUMA [#617]: 9
PARAM.EFFECT-COST-UNNERVE [#617]: 6
PARAM.EFFECT-COST-VOLATILE [#617]: 9
PARAM.ENERGON-COST-PER-LEVEL [#617]: 3
PARAM.ENERGON-DRAIN [#617]: 10
PARAM.ENERGON-FEED [#617]: 10
PARAM.FAULTY-FREQUENCY [#617]: 5
PARAM.GALVCANNON-STAT-DAMAGE [#617]: 3
PARAM.GLOBAL-AVERAGE-DAMAGE [#617]: 13
PARAM.HEAVY-CHANCE [#617]: 3
PARAM.INACCURATE-BONUS [#617]: -25
PARAM.INIT-ENERGON [#617]: 50
PARAM.JUNKDIVE-COST [#617]: 4
PARAM.LOW-ENERGON [#617]: 10
PARAM.LUCKY-BONUS [#617]: 16
PARAM.MAX-COURAGE [#617]: 100
PARAM.MAX-FORGED-WEAPONS [#617]: 4
PARAM.MAX-WEAPONS [#617]: 1
PARAM.MAXIMUM-ENERGON-LIMIT [#617]: 1.5
PARAM.MINI-CORRUPT-BASE [#617]: 10
PARAM.MINI-GALVCANNON-STAT-DAMAGE [#617]: 1.05
PARAM.NORMAL-DIST-STDDEV [#617]: 0.25
PARAM.OUCH [#617]: 1
PARAM.PATCH-COST [#617]: 4
PARAM.PIERCE-REDUCTION [#617]: 30
PARAM.PILOT-DAMAGE-DIV [#617]: 2
PARAM.PLAYER-REFUEL-BONUS [#617]: 1.33
PARAM.PROTECT-BONUS [#617]: -5
PARAM.RADAR-SEARCH-BONUS [#617]: 30
PARAM.RECOIL [#617]: 1
PARAM.REPEAT-BASE [#617]: 16
PARAM.RISKY-FREQUENCY [#617]: 5
PARAM.SABOTAGE-CHANCE [#617]: 3
PARAM.SAP-PENALTY [#617]: -20
PARAM.SCARED-BONUS [#617]: -30
PARAM.SCOUT-COST [#617]: 4
PARAM.SECONDARY-EFFECTS-BASE [#617]: -10
PARAM.SHATTER-BASE [#617]: 25
PARAM.SIZE-DAMAGE [#617]: 1.0
PARAM.SIZE-HIT [#617]: -1.5
PARAM.SNEAK-ATTACK-DAMAGE [#617]: 10
PARAM.SNEAK-COST [#617]: 10
PARAM.STUCK-FREQUENCY [#617]: 5
PARAM.SUPPORT-BONUS-ACC [#617]: 15
PARAM.SUPPORT-BONUS-AGL [#617]: 15
PARAM.SUPPORT-BONUS-FRP [#617]: 10
PARAM.SUPPORT-BONUS-STR [#617]: 10
PARAM.SUPPORT-COST [#617]: 4
PARAM.UNLUCKY-BONUS [#617]: -16
PARAM.VELBOOST-HIGH [#617]: .5
PARAM.VELBOOST-LOW [#617]: .3
PARAM.V_HAS_ENGINEER-BONUS [#617]: 5
PARAM.V_HAS_GUNNER-BONUS [#617]: 10
PARAM.V_HAS_PILOT-BONUS [#617]: 10
PARAM.WILD-FREQUENCY [#617]: 5
TACS_AUX [#617]: #8782
TACS_DB [#44]: #641

