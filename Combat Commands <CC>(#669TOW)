Combat Commands <CC>(#669TOW)
Type: THING Flags: OPAQUE WIZARD
Beta commands:%r!combatinfo%r!defend <level name>%r!attack <dude>=<attack name> -- no area, pull, or miss yet%r!forcefield <target> -- !forcefield -- !forcefield/off%r!profile -- !profile <target>%r!systems -- !systems <target> -- no syscheck yet%r!attacks -- !attacks <target>%r!transform <mode#>%r!reset <target>%r!attackname <free attack>=<new name>%r!globals -- show all free global attacks
Owner: Noveria(#44PWenACck)  Zone: *NOTHING*  Pennies: 10
Parent: *NOTHING*
Powers: 
Warnings checked: 
Created: Tue Mar 08 05:22:24 2016
Last Modification: Tue Mar 08 05:22:33 2016
ACONNECT [#44$]: th u(getobj(TACS)/fn.timer-helper, %#)
CHAR [#44]: !
CMD.ACTIVATE [#44]: $!activate *:@assert setr(0, locate(%#, %0, Ti))=th u(msg, %#, I can't find anything named '%0' in your inventory.) ;; @assert u(setr(Z, getobj(TACS))/fn.is-booster, %q0)=th u(msg, %#, The object '%0' does not appear to be a real Booster Pack) ;; @assert u(%qZ/fn.can-use, %#, %q0)=th u(msg, %#, Sorry\, you can't use this object!) ;; @break u(%qZ/fn.get-aux-stat, %q0, ACTIVATED)=th u(%qZ/fn.deactivate-booster, %q0, %#);; @assert gt(u(%qZ/fn.get-aux-stat, %q0, CHARGES), 0)=th u(msg, %#, Out of charges!) ;; th u(%qZ/fn.activate-booster, %q0, %#)
CMD.ADD-COMBAT-FLAG [#44]: $!addflag *=*:@assert [u(fn.is-admin,%#)]=th [u(msg,%#,You ain't no admin\, sucka!)] ;; @assert [or(isdbref(setr(0,pmatch(%0))), isdbref(%0))]=th [u(msg,%#,Error: '%0' needs to be a player name or object DBref#.)] ;; @assert t(setr(1, u(v(TACS)/fn.add-combat-flag, if(%q0, %q0, %0), %1)))=th u(msg, %#, Error - %q1) ;; th u(msg, %#, Added combat flag '%1' to [name(if(%q0, %q0, %0))])
CMD.ADD-TESTER [#44]: $!addtester *:@assert [u(fn.is-admin,%#)]=th [u(msg,%#,You ain't no admin\, sucka!)] ;; @assert [or(isdbref(setr(0,pmatch(%0))), isdbref(%0))]=th [u(msg,%#,Error: '%0' needs to be a player name or object DBref#.)] ;; th [pemit(%#, Added '[name(if(%q0, %q0, %0))]' to the list of testers.)] [addlist(%!, LIST.TESTERS, if(%q0, %q0, %0))]
CMD.ALL-REPAIR [#44R]: $^\!(repair|heal|rebuild) (.*)$:th setq(verb, switch(%1,repair,repaired,heal,healed,rebuild,rebuilt,???)) ;; @assert u(setr(TACS, v(TACS))/combat-ok, %#)=th u(msg, %#, You are not COMBAT-OK) ;; @assert isdbref(setr(0, locate2(%#, %2, *)))=th u(msg, %#, Error - Can't find a target named '%2' here.) ;; @assert u(%q<TACS>/combat-ok-possibly-unconscious, %q0)=th u(msg, %#, Error - [name(%q0)] is either not IC or not Connected.) ;; @assert not(u(%q<TACS>/fn.has-combat-flag, %q0, COMBAT))=th u(msg, %#, Error - [name(%q0)] has been in combat too recently to be %1ed. Wait until [poss(%q0)] COMBAT flag disappears.) ;; @assert u(getobj(TIMETRACK)/fn.check-time-limit, PLAYER-REPAIR, %q0)=th u(msg, %#, Error - [name(%q0)] has been %1ed too recently by another player.) ;; [@@(@assert u(getobj(TIMETRACK)/fn.check-time-limit, AUTO-REPAIR, %q0)=th u(msg, %#, Error - [name(%q0)] has been %q<verb> too recently by an automated drone.))] ;; @assert not(strmatch(%#, %q0))=th u(msg, %#, You can't %1 yourself!) ;; th @@(run the repair code on the target) ;; th u(%q<TACS>/fn.repair, %q0, %#, lcstr(%1)) ;; th @@(if its a vehicle also rebuild stuff) ;; th if(u(%q<TACS>/fn.is-species, %q0, Vehicle Weapon Base), u(%q<TACS>/fn.rebuild, %q0, %#))
CMD.ALLOW [#44]: $!allow:th [setq(Z,v(TACS))] ;; @assert [u(%qZ/combat-ok,%#)]=th [u(msg,%#, You are not currently COMBAT-OK.)] ;; th [u(msg,%#,The next attack against you will automatically hit.)] [u(%qZ/fn.add-combat-flag, %#, HIT-OK)]
CMD.ANALYZE-TARGET [#44R]: $^\!analyze (.*|.*=.*)$:@assert u(setr(Z, v(TACS))/fn.has-ability, %#, SCOUT)=th u(msg, %#, You need the SCOUT ability to do that!) ;; @assert u(%qZ/combat-ok, %#)=th u(msg, %#, You need to be COMBAT-OK to do that.) ;; @assert isdbref(setr(A, locate2(%#, before(%1, =), *)))=th u(msg, %#, I can't find a target named '[before(%1, =)]' here.) ;; @assert u(%qZ/combat-ok, %qA)=th u(msg, %#, [name(%qA)] is not COMBAT-OK) ;; @assert if(after(%1, =), isdbref(setr(B, locate2(%#, after(%1, =), *))), 1)=th u(msg, %#, I can't find a target named '[after(%1, =)]'.) ;; @assert if(%qB, u(%qZ/combat-ok, %qB), 1)=th u(msg, %#, [name(%qB)] is not COMBAT-OK.) ;; th [u(msg, %#, [name(%#)] analyzes [name(%qA)] for weaknesses[if(%qB,%b[name(%qB)] can exploit.,.)], 1)] [u(%qZ/fn.add-analysis-data, [if(%qB, %qB, %#)], %qA, %#)]
CMD.ARMOROP [#44]: !armorop *:@assert u(setr(Z, v(TACS))/fn.has-ability, %#, Repair)=th u(msg, %#, You don't have the repair ability.) ;; @assert u(%qZ/combat-ok, %#)=th u(msg, %#, You are not COMBAT-OK) ;; @assert isdbref(setr(0, locate2(%#, %0, *)))=th u(msg, %#, Error - Can't find a target named '%0' here.) ;; @assert u(%qZ/combat-ok, %q0)=th u(msg, %#, [name(%q0)] is not COMBAT-OK) ;; @assert not(u(%qZ/fn.has-combat-flag, %q0, COMBAT))=th u(msg, %#, Error - [name(%q0)] has been in combat too recently to be optimized. Wait until [poss(%q0)] COMBAT flag disappears.) ;; @assert not(u(%qZ/fn.has-combat-flag, %q0, ARMOR-OP))=th u(msg, %#, Error - [name(%q0)]'s armor has already been optimized.) ;; @assert u(getobj(TIMETRACK)/fn.check-time-limit, ARMOR-OPTIMIZE, %q0)=th u(msg, %#, Error - [name(%q0)]'s armor has been optimized too recently.) ;; th u(%qZ/fn.armorop, %q0, %#)
CMD.ATTACK [#44R]: $^\!(attack|miss|attack\/\d+|miss\/\d+|chain) (.*?)=(.*?)(=.*?|)$:@assert u(setr(Z, v(TACS))/combat-ok, %#)=th u(msg, %#, u(ERROR`COMBAT-OK)) ;; @assert not(get(%#/pot`observe))=th u(msg, %#, u(ERROR`POT-OBSERVE)) ;; @assert first(setr(E, u(%qZ/fn.can-attack, %#)), ^)=th u(msg, %#, u(ERROR`NO-ATTACK, after(%qE, ^))) ;; @assert u(%qZ/fn.all-targets-ok, setr(T, u(%qZ/fn.resolve-multiple-targets, %#, {%2})))=th [u(msg, %#, Targetting Error[if(eq(words(setr(U, u(%qZ/fn.get-all-target-errors, %qT)), |), 1), : [last(%qU, ^)], s:%r[iter(%qU, [space(3)][last(##, ^)], |, %r)])])] ;; th [@@(Reform %qT)] [setq(T, map(#lambda/first(\%0, ^), %qT, |, %b))] ;; @break has_duplicates(%qT)=th u(msg, %#, u(ERROR`DUPES)) ;; @break eq(words(setr(A,u(%qZ/fn.match-avail-attack-by-name, %#, %3))), 0)=th u(msg, %#, u(ERROR`COULD-NOT-FIND-ATTACK, %3)) ;; @break gt(words(%qA), 1)=th u(msg, %#, [u(ERROR`MULTI, %3)]:%r[map(#lambda/strcat(space(3), u(%qZ/fn.get-attack-attrib-stat, \%0, NAME)), %qA, ,%r)]) ;; @break u(%qZ/fn.is-disabled, %qA)=th u(msg, %#, u(ERROR`DISABLED)) ;; th [@@(build attack "object")] [setq(O, u(FN.BUILD-ATTACK-OBJECT, %#, %qA, %qT, %4))] [@@(Take out any cancelled effects)] [setq(O, u(%qZ/fn.create-cancelled-attack-object, %qO))] ;; @assert if(gt(words(%qT), 1), u(%qZ/fn.is-area-attack, %qO), 1)=th u(msg, %#, u(ERROR`NOT-AREA)) ;; @assert if(strmatch(%1, chain*), u(%qZ/fn.has-effect, %qO, CHAIN), 1)=th u(msg, %#, u(ERROR`NOT-CHAIN))  ;; @assert if(strmatch(%1, chain*), gt(words(%qT), 1), 1)=th u(msg, %#, u(ERROR`CHAIN-TARGETS)) ;; @assert if(or(strmatch(%1, attack\/*), strmatch(%1, miss\/*)), cand(isint(setr(P,after(%1,/))), lt(%qP, u(%qZ/AOBJ, %qO, damage_level)), gte(%qP, 0)), 1)=th u(msg, %#, u(ERROR`PULL, %qP)) ;; th [@@(refactor the attack object again for pull or miss or chain)] [setq(O, u(fn.refactor-attack-object, %qO, %1, %qP, %qT, %qZ))] ;; @assert lte(setr(Y, u(%qZ/fn.get-energon-cost, if(or(strmatch(0, %qP), %qP), u(%qZ/fn.modify-attack-object, %qO, damage_level, %qP), %qO))), u(%qZ/fn.get-core-stat, setr(S, u(%qZ/AOBJ, %qO, attack_source)), CURRENT, Energon))=th u(msg, %#, u(ERROR`ENERGON, %#, %qS, %qY)) ;; @assert switch(%qS, %#, 1, u(%qZ/combat-ok, %qS))=th u(msg, %#, u(ERROR`SOURCE-OK, %qS)) ;; @assert if(u(%qZ/fn.has-effect, %qO, AMMO), gte(u(%qZ/fn.get-attack-attrib-stat, %qA, ammo), u(%qZ/fn.get-ammo-cost, first(%qO, ^))), 1)=th u(msg, %#, u(ERROR`AMMO, u(%qZ/fn.get-ammo-cost, %qO))) ;; @assert if(hasattr(%1, fn.local-attack-lock), u(%l/fn.local-attack-lock, first(%qO, ^), first(%qT)), 1)=th u(msg, %#, This room is blocking your attack: [u(%l/fn.local-attack-lock-reason, first(%qO, ^), first(%qT))]) ;; th [@@(chain attacks need special processing)] [if(strmatch(%1, chain*), [u(FN.DISPLAY-CHAIN, %#, %qT)] [setq(T, first(%qT))])] ;; th [@@(refactor attack object based on preprocessing e.g. WILD or area-attacks)] [setq(O, u(%qZ/fn.preprocess-attack-object, %qO, %qT))] [if(get(#5996/attack_spam), pemit(#5996,>> %qO))] [u(%qZ/fn.set-aux-stat, %#, Recent_Hit, 0)] [@@(Run through all the attacks)] [iter(%qO, u(%qZ/fn.attack, ##), ^,)] [switch(%qY,0, @@(do nothing), u(%qZ/fn.deduct-energon, %qS, max(-4, %qY)))] [u(%qZ/fn.attack-command-postprocess, %qO)]
CMD.ATTACK-COSTS [#44]: $!attackcosts:@pemit %#=u(v(TACS)/fn.list-attack-costs, %#)
CMD.ATTACK2 [#44R]: $^\!\!(attack|miss|attack\/\d+|miss\/\d+|chain) (.*?)=(.*?)(=.*?|)$:@assert u(setr(Z, v(TACS))/combat-ok, %#)=th u(msg, %#, u(ERROR`COMBAT-OK)) ;; @assert not(get(%#/pot`observe))=th u(msg, %#, u(ERROR`POT-OBSERVE)) ;; @assert first(setr(E, u(%qZ/fn.can-attack, %#)), ^)=th u(msg, %#, u(ERROR`NO-ATTACK, after(%qE, ^))) ;; @assert u(%qZ/fn.all-targets-ok, setr(T, u(%qZ/fn.resolve-multiple-targets, %#, {%2})))=th [u(msg, %#, Targetting Error[if(eq(words(setr(U, u(%qZ/fn.get-all-target-errors, %qT)), |), 1), : [last(%qU, ^)], s:%r[iter(%qU, [space(3)][last(##, ^)], |, %r)])])] ;; th [@@(Reform %qT)] [setq(T, map(#lambda/first(\%0, ^), %qT, |, %b))] ;; @break has_duplicates(%qT)=th u(msg, %#, u(ERROR`DUPES)) ;; @break eq(words(setr(A,u(%qZ/fn.match-avail-attack-by-name, %#, %3))), 0)=th u(msg, %#, u(ERROR`COULD-NOT-FIND-ATTACK, %3)) ;; @break gt(words(%qA), 1)=th u(msg, %#, [u(ERROR`MULTI, %3)]:%r[map(#lambda/strcat(space(3), u(%qZ/fn.get-attack-attrib-stat, \%0, NAME)), %qA, ,%r)]) ;; @break u(%qZ/fn.is-disabled, %qA)=th u(msg, %#, u(ERROR`DISABLED)) ;; th [@@(build attack "object")] [setq(O, u(FN.BUILD-ATTACK-OBJECT, %#, %qA, %qT, %4))] [@@(Take out any cancelled effects)] [setq(O, u(%qZ/fn.create-cancelled-attack-object, %qO))] ;; @assert if(gt(words(%qT), 1), u(%qZ/fn.is-area-attack, %qO), 1)=th u(msg, %#, u(ERROR`NOT-AREA)) ;; @assert if(strmatch(%1, chain*), u(%qZ/fn.has-effect, %qO, CHAIN), 1)=th u(msg, %#, u(ERROR`NOT-CHAIN))  ;; @assert if(strmatch(%1, chain*), gt(words(%qT), 1), 1)=th u(msg, %#, u(ERROR`CHAIN-TARGETS)) ;; @assert if(or(strmatch(%1, attack\/*), strmatch(%1, miss\/*)), cand(isint(setr(P,after(%1,/))), lt(%qP, u(%qZ/AOBJ, %qO, damage_level)), gte(%qP, 0)), 1)=th u(msg, %#, u(ERROR`PULL, %qP)) ;; th [@@(refactor the attack object again for pull or miss or chain)] [setq(O, u(fn.refactor-attack-object, %qO, %1, %qP, %qT, %qZ))] ;; @assert lte(setr(Y, u(%qZ/fn.get-energon-cost, if(or(strmatch(0, %qP), %qP), u(%qZ/fn.modify-attack-object, %qO, damage_level, %qP), %qO))), u(%qZ/fn.get-core-stat, setr(S, u(%qZ/AOBJ, %qO, attack_source)), CURRENT, Energon))=th u(msg, %#, u(ERROR`ENERGON, %#, %qS, %qY)) ;; @assert switch(%qS, %#, 1, u(%qZ/combat-ok, %qS))=th u(msg, %#, u(ERROR`SOURCE-OK, %qS)) ;; @assert if(u(%qZ/fn.has-effect, %qO, AMMO), gte(u(%qZ/fn.get-attack-attrib-stat, %qA, ammo), u(%qZ/fn.get-ammo-cost, first(%qO, ^))), 1)=th u(msg, %#, u(ERROR`AMMO, u(%qZ/fn.get-ammo-cost, %qO))) ;; @assert if(hasattr(%1, fn.local-attack-lock), u(%l/fn.local-attack-lock, first(%qO, ^), first(%qT)), 1)=th u(msg, %#, This room is blocking your attack: [u(%l/fn.local-attack-lock-reason, first(%qO, ^), first(%qT))]) ;; th [@@(chain attacks need special processing)] [if(strmatch(%1, chain*), [u(FN.DISPLAY-CHAIN, %#, %qT)] [setq(T, first(%qT))])] ;; th [@@(refactor attack object based on preprocessing e.g. WILD or area-attacks)] [setq(O, u(%qZ/fn.preprocess-attack-object, %qO, %qT))] [if(get(#5996/attack_spam), pemit(#5996,>> %qO))] [u(%qZ/fn.set-aux-stat, %#, Recent_Hit, 0)] [@@(Run through all the attacks)] [iter(%qO, u(%qZ/fn.attack, ##), ^,)] [switch(%qY,0, @@(do nothing), u(%qZ/fn.deduct-energon, %qS, max(-4, %qY)))] [u(%qZ/fn.attack-command-postprocess, %qO)]
CMD.ATTACKLIST [#44]: $!attacklist:th [pemit(%#,u(v(TACS)/fn.display-attacklist,%#,MAX))]
CMD.ATTACKLIST-ADMIN [#44]: $!attacklist *:@break strmatch(%0, *=*) ;; @assert [u(fn.is-admin,%#)]=th [u(msg,%#,You ain't no admin\, sucka!)] ;; @assert [or(isdbref(setr(0,pmatch(%0))), isdbref(%0))]=th [u(msg,%#,Error: '%0' needs to be a player name or object DBref#.)] ;; th [pemit(%#,u(v(TACS)/fn.display-attacklist, if(%q0, %q0, %0), MAX))]
CMD.ATTACKLIST2-ADMIN [#44]: $!attacklist *=*:@assert [u(fn.is-admin,%#)]=th [u(msg,%#,You ain't no admin\, sucka!)] ;; @assert [or(isdbref(setr(0,pmatch(%0))), isdbref(%0))]=th [u(msg,%#,Error: '%0' needs to be a player name or object DBref#.)] ;; th [pemit(%#,u(v(TACS)/fn.display-attacklist, if(%q0, %q0, %0), %1))]
CMD.ATTACKNAME [#44]: $!attackname *=*:@assert t(match(map(#lambda/u(v(TACS)/FN.GET-ATTACK-ATTRIB-STAT, \%0, Name), u(v(TACS)/fn.get-free-attacks)), %0))=th u(msg, %#, Error: '%0' is not a valid global attack. Type [ansi(h,[v(CHAR)]globals)] or [ansi(h,[v(CHAR)]attacknames)] for a list.) ;; th [u(msg, %#, Set custom attack name for [ansi(h,lcstr(%0))] to '[setr(0, u(v(TACS)/fn.super-secure, %1))]'.)] [u(v(TACS)/fn.set-custom-attack-name, %#, %0, %q0)]
CMD.ATTACKNAMES [#44]: $!attacknames:th [pemit(%#, u(v(TACS)/fn.display-attacknames, %#))]
CMD.ATTACKS [#44]: $!attacks:th [pemit(%#,u(v(TACS)/fn.display-avail-attacks,%#))]
CMD.ATTACKS-ADMIN [#44]: $!attacks *:@assert [u(fn.is-admin,%#)]=th [u(msg,%#,You ain't no admin\, sucka!)] ;; @assert [or(isdbref(setr(0,pmatch(%0))), isdbref(%0))]=th [u(msg,%#,Error: '%0' needs to be a player name or object DBref#.)] ;; th [pemit(%#,u(v(TACS)/fn.display-avail-attacks, if(%q0, %q0, %0)))]
CMD.BOOSTERS [#44]: $!boosters:@assert [u(fn.is-admin,%#)]=th [u(msg,%#,You ain't no admin\, sucka!)] ;; @pemit %#=u(getobj(TACS)/fn.list-all-boosters)
CMD.BUILD-CAPTURE-POINT [#44]: $!buildcap *=*=*:@assert orflags(%#, Wr)=th u(msg, %#, Whaaaaaaaaaaaat! You ain't no admin.) ;; @assert u(setr(Z, getobj(TACS))/fn.is-valid-stat, %2)=th u(msg, Invalid fight factor stat '%2'.) ;; @assert u(%qZ/fn.is-valid-cp-code, %0)=th u(msg, %#, Invalid CP Letter Code '%0'.) ;; th [attrib_set(%l/AUX`PERM`CAPTURE-POINTS`CP-%0`NAME, u(%qZ/fn.super-secure, %1))] [u(%qZ/fn.set-cp-stat, %l, %0, Fight-Factor, %2)] [u(%qZ/fn.set-cp-stat, %l, %0, Operational, 1)] [u(msg, %#, Built Capture Point [ucstr(%0)].)]
CMD.CANCEL-EFFECT [#44]: $!cancel *:@assert u(setr(Z, v(TACS))/fn.validate-stat, effect, %0)=th u(msg, %#, Error - '%0' is not a valid attack effect.) ;; @assert u(%qZ/fn.validate-stat, cancelable-effect, %0)=th u(msg, %#, Error - Cancelling the '%0' effect is not allowed.) ;; th if(u(%qZ/fn.has-cancelled-effect, %#, %0), u(%qZ/fn.remove-cancel-effect, %#, %0), u(%qZ/fn.add-cancel-effect, %#, %0))
CMD.CANCEL-LIST [#44]: $!cancel:@pemit %#=u(v(TACS)/fn.display-cancel-list, %#)
CMD.CAP-POINT-STATUS [#44R]: $^\!(cap|cappoint) (.*)$:@assert u(setr(Z,v(TACS))/fn.room-has-cp, %l, %2)=th u(msg, %#, Error - '%2' is not a valid capture point in this room.) ;; @pemit %#=u(%qZ/fn.display-capture-point, %l, [ucstr(%2)], %#, orflags(%#, Wr))
CMD.CAPTURE [#44]: $!capture *:@assert u(setr(Z,v(TACS))/fn.room-has-cp, %l, %0)=th u(msg, %#, Error - '%0' is not a valid capture point in this room.) ;; @assert u(%qZ/fn.get-cp-stat, %l, %0, OPERATIONAL)=th u(msg, %#, Error - Capture point '%0' is not operational!) ;; @assert if(setr(0, u(%qZ/fn.get-occupied-cp, %#)), strmatch(%0, %q0), 1)=th u(msg, %#, Error - You can't control more than one capture point at a time! You are currently in control of point '[ansi(h,%q0)]'.) ;; th switch(u(%qZ/fn.get-cp-stat, %l, %0, CONTROLLED-BY),, u(%qZ/fn.capture-uncontested, %#, %l, ucstr(%0)), %#, u(%qZ/fn.capture-increment, %#, %l, ucstr(%0)), u(%qZ/fn.capture-fight, %#, %l, ucstr(%0), u(%qZ/fn.get-cp-stat, %l, ucstr(%0), CONTROLLED-BY)))
CMD.CHARCOST-ADMIN [#44]: $!charcost *:@assert [u(fn.is-admin,%#)]=th [u(msg,%#,You ain't no admin\, sucka!)] ;; @assert [or(isdbref(setr(0,pmatch(%0))), isdbref(%0))]=th [u(msg,%#,Error: '%0' needs to be a player name or object DBref#.)] ;; th [pemit(%#,u(v(TACS)/fn.display-char-cost, if(%q0, %q0, %0)))]
CMD.CHARCOST-MORTAL [#44]: $!charcost:th [pemit(%#, u(v(TACS)/fn.display-char-cost, %#))]
CMD.CHECK [#44]: $!check *=*:@assert setr(1, u(setr(Z, getobj(TACS))/fn.get-either-stat, %#, Current, %0))=th u(msg, %#, Error - '%0' is not a valid stat.) ;; @assert and(isint(%1), gte(%1, 0))=th u(msg, %#, Error - %1 is not a valid integer.) ;; th u(msg, %#, [getname(%#)] compares %p [u(%qZ/fn.get-stat-fullname, %0)] to %1: [if(u(%qZ/fn.compare-stats, %q1, %1), Success!, Failure :\( )], 1)])
CMD.CHECK-REFUEL-TANK [#44]: $!refuel:@assert u(setr(Z, v(TACS))/fn.has-ability, %#, Refuel)=th u(msg, %#, Playing with energon can be hazardous to your health.) ;; th if(u(%qZ/fn.is-refueling, %#), u(msg, %#, There is [get(%#/aux`temp`tank)] energon remaining in your reserve tank.), u(msg, %#, Your reserve energon tank is not currently deployed.))
CMD.CLEAR-CAPTURE-POINT [#44]: $!clearcap *:@assert orflags(%#, WrJ)=th u(msg, %#, Whaaaaaaaaaaaat! You ain't no admin.) ;; @assert u(setr(Z, getobj(TACS))/fn.room-has-cp, %l, %0)=th u(msg, %#, [name(%l)] doesn't have a capture point [ucstr(%0)].) ;;th [u(getobj(TACS)/fn.clear-capture-point, %#, %l, ucstr(%0))]
CMD.CLEAR-CAPTURE-POINTS [#44]: $!clearcaps:@assert orflags(%#, WrJ)=th u(msg, %#, Whaaaaaaaaaaaat! You ain't no admin.) ;; th [u(msg, %#, %N has reset all of the capture point holdings in this room., 1)] [u(getobj(TACS)/fn.clear-capture-points, %l)]
CMD.CLOAK-OFF [#44]: $!cloak/off:@assert u(setr(Z, v(TACS))/fn.has-ability, %#, Cloak)=th u(msg, %#, You don't have that ability.) ;; @assert u(%qZ/fn.has-combat-flag, %#, CLOAKED)=th u(msg, %#, You are not currently cloaked.) ;; th u(%qZ/fn.cloak-off, %#)
CMD.CLOAK-ON [#44]: $!cloak/on:@assert u(setr(Z, v(TACS))/fn.has-ability, %#, Cloak)=th u(msg, %#, You don't have that ability.) ;; @assert not(u(%qZ/fn.has-combat-flag, %#, CLOAKED))=th if(get(%#/quiet_cloak), , u(msg, %#, Your cloaking systems are already engaged.)) ;; @assert u(%qZ/combat-ok, %#)=th u(msg, %#, You are not COMBAT-OK) ;; @assert gte(u(%qZ/fn.get-core-stat, %#, Current, Energon), get(%qZ/PARAM.cloak-cost))=th u(msg, %#, You don't have enough energon to engage your cloaking system.) ;; th u(%qZ/fn.cloak-on, %#)
CMD.COMBATINFO [#44]: $!combatinfo *:@assert [t(match(get(v(TACS_DB)/list.combatinfo-topic), %0))]=th [u(msg,%#,Error: '%0' is not a valid combat info topic)] ;; th [pemit(%#,u(v(TACS)/fn.display-combatinfo,%0,orflags(%#,Wr)))]
CMD.COMBATINFO-MENU [#44]: $!combatinfo:@pemit %#=u(v(TACS)/fn.display-combatinfo-menu)
CMD.COMMISSIONS [#44]: $!commissions:@pemit %#=u(getobj(SMITH)/fn.display-sent-commissions, %#)
CMD.COMPATTR [#44]: $!compare *=*/*:@assert isdbref(setr(0, locate2(%#, %1, *)))=th u(msg, %#, Error - I can't find a target named '%1') ;; @assert setr(1, u(setr(Z, getobj(TACS))/fn.get-either-stat, %#, Current, %0))=th u(msg, %#, Error - '%0' is not a valid stat.) ;; @assert setr(2, u(%qZ/fn.get-either-stat, %q0, Current, %2))=th u(msg, %#, Error - '%2' is not a valid stat.) ;; th u(msg, %#, [getname(%#)] compares %p [u(%qZ/fn.get-stat-fullname, %0)] to [getname(%q0)]'s [u(%qZ/fn.get-stat-fullname, %2)]: [if(u(%qZ/fn.compare-stats, %q1, %q2), Success!, Failure :\( )], 1)
CMD.CONTROL-LOCK-ADD [#44]: $!control/add *:@assert or(setr(0, pmatch(%0)), isdbref(%0))=th u(msg, %#, Error - '%0' is not a valid player name or DBref#.) ;; th [u(msg, %#, Added [name(if(%q0, %q0, %0))] to your CONTROL-OK list.)] [attrib_set(%#/AUX`PERM`ATTACKLOCK-LIST, setdiff(cat(get(%#/AUX`PERM`ATTACKLOCK-LIST), if(%q0, %q0, %0)),))]
CMD.CONTROL-LOCK-LIST [#44]: $!control/list:@pemit %#=[header(CONTROL-OK List)][iter(get(%#/AUX`PERM`ATTACKLOCK-LIST),%r%b[name(##)],,)]%r%r[subheader()]%rPlayers and objects on this list will be able to access your CONTROL attacks when you have them locked to LIST mode. See [ansi(h,+help !control)] for more information.%r[header()]
CMD.CONTROL-LOCK-REMOVE [#44]: $!control/remove *:@assert or(setr(0, pmatch(%0)), isdbref(%0))=th u(msg, %#, Error - '%0' is not a valid player name or DBref#.) ;; @assert t(setr(1, match(get(%#/AUX`PERM`ATTACKLOCK-LIST), if(%q0, %q0, %0))))=th u(msg, %#, Error - %0 is not on your CONTROL-OK list.) ;; th [u(msg, %#, Remove [name(if(%q0, %q0, %0))] from your CONTROL-OK list.)] [attrib_set(%#/AUX`PERM`ATTACKLOCK-LIST, setdiff(get(%#/AUX`PERM`ATTACKLOCK-LIST), if(%q0, %q0, %0)))]
CMD.COVER [#44]: $!cover *:@assert u(setr(Z, v(TACS))/combat-ok, %#)=th u(msg, %#, u(ERROR`COMBAT-OK)) ;; @assert not(get(%#/pot`observe))=th u(msg, %#, u(ERROR`POT-OBSERVE)) ;; @assert first(setr(E, u(%qZ/fn.can-attack, %#)), ^)=th u(msg, %#, u(ERROR`NO-ATTACK, after(%qE, ^))) ;; @assert isdbref(setr(0, locate2(%#, %0, *)))=th u(msg, %#, Error - Can't find a target named '%0' here.) ;; @assert u(%qZ/combat-ok, %q0)=th u(msg, %#, Error - [name(%q0)] is not COMBAT-OK.) ;; @assert not(u(%qZ/fn.has-combat-flag, %#, STUNNED))=th u(msg, %#, You can't do that while stunned.) ;; @assert not(u(%qZ/fn.has-combat-flag, %#, FF))=th u(msg, %#, You can't cover anyone while protected by a forcefield.) ;; @assert not(u(%qZ/fn.has-combat-flag, %q0, FF))=th u(msg, %#, You can't cover [name(%q0)]\, [subj(%q0)] is protected by a forcefield.) ;;  @assert not(strmatch(%#, %q0))=th u(msg, %#, Error - Target cannot be yourself.) ;; @assert not(u(%qZ/fn.or-combat-flags, %#, CLOAKED SNEAKING HIDING SCARED))=th u(msg, %#, You can't do that while scared\, cloaked\, sneaking\, or hiding.) ;; @assert not(u(%qZ/fn.or-combat-flags, %q0, CLOAKED SNEAKING HIDING))=th u(msg, %#, You can't cover [name(%q0)] while [subj(%q0)] is cloaked\, sneaking\, or hiding.) ;; th u(%qZ/fn.cover-target, %#, %q0, u(%qZ/fn.has-ability, %#, Bodyguard))
CMD.COVER-INFO [#44]: $!cover:th [if(u(getobj(TACS)/fn.has-ability, %#, Bodyguard), pemit(%#, You are an especially good bodyguard.))] [pemit(%#, You are being covered by [switch(get(%#/AUX`TEMP`COVERED),, no one, [ansi(hy, name(#$))].)] [pemit(%#, You are covering [switch(get(%#/AUX`TEMP`COVERING),, no one, [ansi(hy, name(#$))])].)]
CMD.CRACKSHOT-TARGET [#44R]: $^\!aim (.*|.*=.*)$:@assert u(setr(Z, v(TACS))/fn.has-ability, %#, CRACKSHOT)=th u(msg, %#, Error - This would work better if you had the Crackshot ability.) ;; @assert u(%qZ/combat-ok, %#)=th u(msg, %#, You need to be COMBAT-OK to do that.) ;; @assert isdbref(setr(A, locate2(%#, before(%1, =), *)))=th u(msg, %#, I can't find a target named '[before(%1, =)]' here.) ;; @assert u(%qZ/combat-ok, %qA)=th u(msg, %#, [name(%qA)] is not COMBAT-OK) ;; @assert if(after(%1, =), isdbref(setr(B, locate2(%#, after(%1, =), *))), 1)=th u(msg, %#, I can't find a target named '[after(%1, =)]'.) ;; @assert if(%qB, u(%qZ/combat-ok, %qB), 1)=th u(msg, %#, [name(%qB)] is not COMBAT-OK.) ;; th [u(msg, %#, [name(%#)] takes extra time to  [if(%qB, assist [getname(%qB)]'s, aim %p)] next attack., 1)] [u(%qZ/fn.add-crackshot-data, [if(%qB, %qB, %#)], %qA, %#)]
CMD.CURMODE [#44]: $!curmode:@pemit %#=Current mode is #[u(setr(Z, v(TACS))/curmode, %#)]: [getname(%#)]
CMD.DAMAGE-BREAKDOWN [#44]: $!dbreak *:@assert orflags(%#, Wr)=@pemit %#={Huh? (Type "help" for help.)} ;; @pemit %#=u(v(TACS)/FN.DAMAGE-BREAKDOWN, %0)
CMD.DEFEND [#44R]: $^\!(defend|stance) (.*)$:@assert not(get(%#/pot`observe))=th u(msg, %#, You can't do that while your +POT status is set to Observe.) ;; @assert [t(setr(0,match(setr(1,get(v(TACS_DB)/list.defense-level)),%2*)))]=th [u(msg,%#,Error: '%2' is not a valid defense level. Please see '[ansi(h,[v(char)]defend)]' for a list of valid entries.)] ;; @assert u(v(TACS)/fn.can-use-defense-level, %#, setr(2, index(%q1, ,%q0,1)))=th u(msg, %#, That defense level is restricted.) ;; @assert gte(u(v(TACS)/fn.get-core-stat, %#, Current, Energon), setr(4, u(v(TACS)/fn.defense-level-cost-%q2, %#)))=th u(msg, %#, You don't have enough energon \(%q4\) for that defense level.) ;; @assert not(u(v(TACS)/fn.has-combat-flag, %#, AIMING))=th u(msg, %#, Warning: You are currently aiming at [name(u(v(TACS)/fn.get-aiming-target, %#))]. If you want to transform and lose this bonus\, you can use '[ansi(h,[v(CHAR)]aim/off)]'.) ;; @assert not(u(v(TACS)/fn.has-combat-flag, %#, STUNNED))=th u(msg, %#, You can't change your defense level while stunned.) ;; th u(v(TACS)/fn.defend, %#, %q2)
CMD.DEFEND-LIST [#44R]: $^\!(defend|stance)$:@pemit %#=u(v(TACS)/fn.display-defense-levels, %#)
CMD.DEMOLITION-BOMB [#44]: $!bomb *:@assert u(setr(Z, v(TACS))/fn.has-ability, %#, Demolition)=th u(msg, %#, Doing that could be dangerous to your health.) ;; @assert u(%qZ/combat-ok, %#)=th u(msg, %#, You are not COMBAT-OK) ;; @assert u(getobj(TIMETRACK)/fn.check-time-limit, DEMOLITION, %#)=th u(msg, %#, Error - You need to wait before you wait another bomb \(check !limits\)) ;; @assert u(getobj(TIMETRACK)/fn.check-time-limit, GRENADE, %#)=th u(msg, %#, Error - You need to wait before you wait another bomb \(check !limits\)) ;; @assert lt(words(u(%qZ/fn.get-bombs, %#)), 1)=th u(msg, %#, Error - You are already at your limit of active bombs \(1\)) ;; th u(%qZ/fn.create-bomb, %#, u(%qZ/fn.super-secure, %0))
CMD.DEMOLITION-GRENADE [#44]: $!grenade *:@assert u(setr(Z, v(TACS))/fn.has-ability, %#, Demolition)=th u(msg, %#, Doing that could be dangerous to your health.) ;; @assert u(%qZ/combat-ok, %#)=th u(msg, %#, You are not COMBAT-OK) ;; @assert u(getobj(TIMETRACK)/fn.check-time-limit, DEMOLITION, %#)=th u(msg, %#, Error - You need to wait before you wait another grenade \(check !limits\)) ;; @assert u(getobj(TIMETRACK)/fn.check-time-limit, GRENADE, %#)=th u(msg, %#, Error - You need to wait before you wait another grenade \(check !limits\)) ;; @assert lt(words(u(%qZ/fn.get-bombs, %#)), 1)=th u(msg, %#, Error - You are already at your limit of active bombs \(1\)) ;; th u(%qZ/fn.create-grenade, %#, u(%qZ/fn.super-secure, %0))
CMD.DESIGN-DESC [#44]: $!weaponsmith/desc *=*:@assert u(setr(Z, getobj(TACS))/fn.has-ability, %#, Weaponsmith)=th u(msg, %#, Who do you think you are\, MacGyver?) ;; @assert u(setr(W, getobj(SMITH))/fn.has-design, %#, %0)=th u(msg, %#, Error - You don't have a Weapon Design with ID #%0.) ;; th [attrib_set(getobj(SMITH)/DESIGN`%#`%0`DESC, %1)] [u(msg, %#, Set description for weapon design #%0.)]
CMD.DESTROY-CAPTURE-POINT [#44]: $!nukecap *:@assert orflags(%#, Wr)=th u(msg, %#, Whaaaaaaaaaaaat! You ain't no admin.) ;; @assert u(setr(Z, getobj(TACS))/fn.room-has-cp, %l, %0)=th u(msg, %#, [name(%l)] doesn't have a capture point [ucstr(%0)].) ;; th [u(getobj(TACS)/fn.nuke-capture-point, %#, %l, ucstr(%0))] [pemit(%#, You have destroyed capture point [ansi(hc, ucstr(%0))].
CMD.DETECT [#44]: $!detect *:@assert or(u(setr(Z, v(TACS))/fn.has-ability, %#, Enhanced_Senses), u(setr(Z, v(TACS))/fn.has-ability, %#, Radar))=th u(msg, %#, You don't have that ability.) ;; @assert not(u(%qZ/fn.is-hidden, %#))=th u(msg, %#, You need to stop hiding first.) ;; @assert u(%qZ/combat-ok, %#)=th u(msg, %#, You are not COMBAT-OK) ;; @assert isdbref(setr(0, locate2(%#, %0, *)))=th u(msg, %#, Error - Can't find a target named '%0') ;; @assert u(%qZ/combat-ok, %q0)=th u(msg, %#, [name(%q0)] is not COMBAT-OK) ;; @assert u(%qZ/fn.is-hidden, %q0)=th u(msg, %#, No sense searching for someone in plain sight!) ;; th u(%qZ/fn.detect, %q0, %#)
CMD.DISSOLVE-COMBINER [#44]: $!dissolve:@assert isdbref(setr(G, get(%#/gestalt)))=th u(msg, %#, You aren't on a combiner team. How lame is that! Don't you feel LAME now??) ;; @assert strmatch(loc(%#), %qG)=th u(msg, %#, That only works when you are inside of [name(%qG)]!) ;; th [u(msg, %#, %N dissolves [name(%qG)]., 1)] [u(v(TACS)/fn.dissolve-combiner, %qG)]
CMD.EVALUATE [#44]: $!evaluate *:@assert u(setr(Z, v(TACS))/combat-ok, %#)=th u(msg, %#, You are not COMBAT-OK.) ;; @assert isdbref(setr(0, locate2(%#, %0, *)))=th u(msg, %#, Error - Can't find a target named '%0' here.) ;; th [u(msg, %#, [getname2(%#)] runs a diagnostic check on [getname2(%q0)], 1)] [pemit(%#,u(%qZ/fn.display-evaluation, %q0, %#))]
CMD.FAKE-DEFEND [#44R]: $^\!(fakedefend|fakestance) (.*)$:@assert [t(setr(0,match(setr(1,get(v(TACS_DB)/list.defense-level)),%2*)))]=th [u(msg,%#,Error: '%2' is not a valid defense level. Please see '[ansi(h,[v(char)]defend)]' for a list of valid entries.)] ;; @assert u(v(TACS)/fn.can-use-defense-level, %#, setr(2, index(%q1, ,%q0,1)))=th u(msg, %#, That defense level is restricted.) ;; th u(v(TACS)/fn.set-fake-defense-level, %#, %q2)
CMD.FORCEFIELD-OFF [#44]: $!forcefield/off:th [setq(Z,v(TACS))][if(u(%qZ/fn.has-combat-flag,%#,FF-CAST), u(%qZ/fn.destroy-forcefield,%#), u(msg,%#,You are not currently casting a forcefield.))]
CMD.FORCEFIELD-ON [#44]: $!forcefield *:th [setq(Z,v(TACS))] ;; @assert [u(%qZ/combat-ok,%#)]=[u(msg,%#,You are not currently COMBAT-OK.)] ;; @assert [u(%qZ/fn.has-ability,%#,FORCEFIELD)]=[u(msg,%#,You don't have the forcefield ability in this mode.)] ;; @assert [not(u(%qZ/fn.has-combat-flag,%#,FF-CAST))]=[u(msg,%#,You are already casting a forcefield. Use [v(CHAR)]forcefield/off first!)] ;; @assert [t(setr(V,locate2(%#,%0)))]=[u(msg,%#,I can't find a target named '%0'.)] ;; @assert [u(%qZ/combat-ok,%qV)]=[u(msg,%#,[name(%qV)] is not currently COMBAT-OK)] ;; @assert [not(u(%qZ/fn.has-combat-flag,%qV,FF))]=[u(msg,%#,[name(%qV)] is already protected by a forcefield.)] ;; th [@@(registers: Z - FN# // V - Victim#)] [u(%qZ/fn.create-forcefield,%#,%qV)]
CMD.FORCEFIELD-STATUS [#44]: $!forcefield:th [pemit(%#,u(v(TACS)/fn.forcefield-status,%#))]
CMD.FORGE [#44]: $!forge *:@break strmatch(%0, * for *) ;; @assert u(setr(Z, getobj(TACS))/fn.has-ability, %#, Weaponsmith)=th u(msg, %#, Who do you think you are\, MacGyver?) ;; @assert u(setr(W, getobj(SMITH))/fn.has-design, %#, %0)=th u(msg, %#, Error - You don't have a Weapon Design with ID #%0.) ;; @assert lt(words(u(%qZ/fn.get-weapons, %#)), get(%qZ/PARAM.MAX-WEAPONS))=th u(msg, %#, You already own the maximum number of weapons.) ;; @assert lt(words(u(fn.get-forged-weapons, %#)), get(%qZ/PARAM.MAX-FORGED-WEAPONS))=th u(msg, %#, Error - You are at your maximum number of active forged weapons \([get(%qZ/PARAM.MAX-FORGED-WEAPONS)]\). You can ask an owner to !smelt their weapon or you can !unforge an unused one.) ;; @assert lte(setr(2, u(%qW/fn.get-attack-design-cost, DESIGN`%#`%0)), div(u(%qZ/fn.get-core-stat, %#, Current, TECH), 10))=th u(msg, %#, That design exceeds your abilities.) ;; @assert gte(%q2, 0)=th u(msg, %#, Weapons must have a minimum cost of 0!) ;; @assert u(setr(T, getobj(TIMETRACK))/fn.check-time-limit, FORGE, %#)=th u(msg, %#, Sorry\, you have forged another weapon too recently. Check [ansi(h,!limits)] for details.) ;; @assert strmatch(OK, before(setr(X, u(%qW/fn.validate-design, %#, %0)), ^))=th u(msg, %#, Design #%0 is invalid: [after(%qX, ^)]) ;; th [setq(1, last(u(%qW/fn.forge-new-weapon, %#, %0, %#)))] [u(msg, %#, %N has finished building a new weapon. Behold: [ansi(hc, name(%q1))]!)] [u(%qT/fn.set-time-limit-backdate, FORGE, %#, sub(8, max(2, min(8, %q2))))]
CMD.FORGE-FOR-TARGET [#44]: $!forge * for *:@assert u(setr(Z, getobj(TACS))/fn.has-ability, %#, Weaponsmith)=th u(msg, %#, Who do you think you are\, MacGyver?) ;; @assert u(setr(W, getobj(SMITH))/fn.has-design, %#, %0)=th u(msg, %#, Error - You don't have a Weapon Design with ID #%0.) ;; @assert t(setr(0, pmatch(%1)))=th u(msg, %#, Error - I can't find a player named '%1'.) ;; @break strmatch(playerid(%#), playerid(%q0))=th u(msg, %#, [name(%q0)] appears to be an alt-char of yours!) ;;  @assert lt(words(u(%qZ/fn.get-weapons, %q0)), get(%qZ/PARAM.MAX-WEAPONS))=th u(msg, %#, [name(%q0)] already owns the maximum number of weapons.) ;; @assert lt(words(u(fn.get-forged-weapons, %#)), get(%qZ/PARAM.MAX-FORGED-WEAPONS))=th u(msg, %#, Error - You are at your maximum number of active forged weapons \([get(%qZ/PARAM.MAX-FORGED-WEAPONS)]\). You can ask an owner to !smelt their weapon or you can !unforge an unused one.) ;; @assert lte(setr(1, u(%qW/fn.get-attack-design-cost, DESIGN`%#`%0)), div(u(%qZ/fn.get-core-stat, %#, Current, TECH), 10))=th u(msg, %#, That design exceeds your abilities.) ;; @assert gte(%q1, 0)=th u(msg, %#, Weapons must have a minimum cost of 0!) ;; @assert setr(2, get(%qW/COMMISSIONS`%#`%q0))=th u(msg, %#, You don't have a commission from [name(%q0)].) ;; @assert lte(%q1, %q2)=th u(msg, %#, That design would cost [ansi(h, %q1)] points\; [name(%q0)] has only commissioned you for [ansi(h, %q2)].) ;; @assert gte(get(%q0/AP_BANKED), %q1)=th u(msg, %#, Error - [name(%q0)] doesn't have enough AP to cover that!)] ;; @assert u(setr(T, getobj(TIMETRACK))/fn.check-time-limit, FORGE, %#)=th u(msg, %#, Sorry\, you have forged another weapon too recently. Check [ansi(h,!limits)] for details.) ;; @assert strmatch(OK, before(setr(X, u(%qW/fn.validate-design, %#, %0)), ^))=th u(msg, %#, Design #%0 is invalid: [after(%qX, ^)]) ;; th [u(%qW/fn.remove-commission, %q0, %#)] [setadd(%q0, AP_BANKED, %q1, -1)] [setq(3, last(u(%qW/fn.forge-new-weapon, %#, %0, %q0)))] [u(msg, %#, %N has finished building a new weapon. Behold: [ansi(hc, name(%q3))]!)] [u(%qT/fn.set-time-limit-backdate, FORGE, %#, sub(8, max(2, min(8, %q1))))]
CMD.FULL-SYSTEMS [#44]: $!systems:th [pemit(%#,u(v(TACS)/fn.full-systems,%#, u(v(TACS)/curmode, %#)))]
CMD.FULL-SYSTEMS-ADMIN [#44]: $!systems *:@assert [u(fn.is-admin,%#)]=th [u(msg,%#,You ain't no admin\, sucka!)] ;; @assert [or(isdbref(setr(0,pmatch(%0))), isdbref(%0))]=th [u(msg,%#,Error: '%0' needs to be a player name or object DBref#.)] ;; th [pemit(%#,u(v(TACS)/fn.full-systems, if(%q0, %q0, %0), u(v(TACS)/curmode, if(%q0, %q0, %0)) ))]
CMD.FULL-SYSTEMS2 [#44]: $!systems/*:@assert u(v(TACS)/fn.is-valid-mode, %#, Current, %0)=th u(msg, %#, %0 is not a valid mode.) ;; th [pemit(%#,u(v(TACS)/fn.full-systems, %#, %0))]
CMD.FULL-SYSTEMS2-ADMIN [#44]: $!systems */*:@assert [u(fn.is-admin, %#)]=th [u(msg, %#, You ain't no admin\, sucka!)] ;; @assert [or(isdbref(setr(0,pmatch(%0))), isdbref(%0))]=th [u(msg,%#,Error: '%0' needs to be a player name or object DBref#.)] ;; @assert u(v(TACS)/fn.is-valid-mode, if(%q0, %q0, %0), Current, %1)=th u(msg, %#, %1 is not a valid mode for [name(if(%q0, %q0, %0))].) ;; th [pemit(%#, u(v(TACS)/fn.full-systems, if(%q0, %q0, %0), %1))]
CMD.GLOBAL-ATTACKS [#44]: $!globals:th [pemit(%#,u(v(TACS)/fn.display-attacklist,getobj(FREE),FREE,1))]
CMD.HIDE-OFF [#44]: $!hide/off:@assert u(setr(Z, v(TACS))/fn.has-ability, %#, HIDE)=th u(msg, %#, You don't have that ability.) ;; @assert u(%qZ/fn.has-combat-flag, %#, HIDING)=th u(msg, %#, You are not currently hiding.) ;; th u(%qZ/fn.hide-off, %#)
CMD.HIDE-ON [#44]: $!hide/on:@assert u(setr(Z, v(TACS))/fn.has-ability, %#, HIDE)=th u(msg, %#, You don't have that ability.) ;; @assert not(u(%qZ/fn.has-combat-flag, %#, HIDING))=th if(get(%#/quiet_cloak), , u(msg, %#, You are already hiding)) ;; @assert u(%qZ/combat-ok, %#)=th u(msg, %#, You are not COMBAT-OK) ;; @assert gte(u(%qZ/fn.get-core-stat, %#, Current, Energon), get(%qZ/PARAM.cloak-cost))=th u(msg, %#, You don't have enough energon to hide.) ;; th u(%qZ/fn.hide-on, %#)
CMD.HOLOGRAM [#44]: $!hologram *:@assert u(setr(Z, v(TACS))/fn.has-ability, %#, Holograms)=th u(msg, %#, You don't look like Jem!) ;; @assert u(%qZ/combat-ok, %#)=th u(msg, %#, You are not COMBAT-OK) ;; @assert not(u(%qZ/fn.has-combat-flag, %q0, HOLOGRAMS))=th u(msg, %#, Error - [name(%q0)] has already been protected by a hologram.) ;; @assert gte(u(%qZ/fn.get-core-stat, %#, Current, Energon), u(%qZ/fn.get-patch-cost, %q0))=th u(msg, %#, You don't have the energy to create a hologram right now.) ;; ;; th u(%qZ/fn.create-hologram, %#, u(%qZ/fn.super-secure, %0))
CMD.IGNORE-COMMISSION [#44]: $!commission/ignore *:@assert t(setr(0, pmatch(%0)))=th u(msg, %#, Error - I can't find a player named '%0'.) ;; @assert u(setr(Z, getobj(TACS))/fn.is-weaponsmith, %#)=th u(msg, %#, Who do you think you are\, MacGyver?) ;; @assert u(getobj(SMITH)/fn.has-commission, %q0, %#)=th u(msg, %#, [name(%q0)] doesn't have a commission with you.) ;; th [u(getobj(SMITH)/fn.remove-commission, %q0, %#)] [u(msg, %#, Ignoring your commission request from [ansi(h, name(%q0))].)]
CMD.INIT [#44]: !start:@assert u(setr(Z, v(TACS))/fn.can-init, %#)=th u(msg, %#, That command is not available to you.) ;; th u(%qZ/fn.init-combat, %#)
CMD.INIT-REFUEL-TANK [#44]: $!tank:@assert u(setr(Z, v(TACS))/combat-ok, %#)=th u(msg, %#, Error - You are not COMBAT-OK.) ;; @assert not(get(%#/pot`observe))=th u(msg, %#, You can't do that while your +POT status is set to Observe.) ;; @assert u(%qZ/fn.has-ability, %#, Refuel)=th u(msg, %#, Playing with energon can be hazardous to your health.) ;; @break u(%qZ/fn.is-refueling, %#)=th u(msg, %#, You have already deployed your energon reserve tank!) ;; th [u(msg, %#, [getname2(%#)] deploys [poss(%#)] reserve energon tank., 1)] [u(%qZ/fn.init-refuel-tank, %#)]
CMD.INSPIRE [#44]: $!inspire *:@assert u(setr(Z, v(TACS))/fn.has-ability, %#, Inspire)=th u(msg, %#, You are about as inspiring as the average goon.) ;; @assert u(%qZ/combat-ok, %#)=th u(msg, %#, You are not COMBAT-OK) ;; @assert first(setr(E, u(%qZ/fn.can-attack, %#)), ^)=th u(msg, %#, Unable to inspire - [after(%qE, ^)]) ;; @assert u(%qZ/fn.all-targets-ok, setr(T, u(%qZ/fn.resolve-multiple-inspire-targets, %#, {%0})))=th [u(msg, %#, Targetting Error[if(eq(words(setr(U, u(%qZ/fn.get-all-target-errors, %qT)), |), 1), : [last(%qU, ^)], s:%r[iter(%qU, [space(3)][last(##, ^)], |, %r)])])] ;; th [u(%qZ/fn.multiple-inspire, %#, map(#lambda/first(\%0, ^), %qT, |, %b))]
CMD.JUNKDIVE [#44]: $!junkdive:@assert u(setr(Z, v(TACS))/combat-ok, %#)=th u(msg, %#, You are not COMBAT-OK) ;; @assert u(%qZ/fn.is-junkion, %#)=th u(msg, %#, Only Junkions can squeeze the Charmin!) ;; @assert u(%qZ/fn.has-combat-flag, %#, COMBAT)=th u(msg, %#, Error - You are not in combat.) ;; @assert gte(u(%qZ/fn.get-core-stat, %#, Current, Energon), get(%qZ/PARAM.JUNKDIVE-COST))=th u(msg, %#, You don't have the energy to junkdive right now.) ;; @assert u(%qZ/fn.is-on-junk, %#)=th u(msg, %#, Error - You can only junk-dive on Planet Junk! Try getting someone to !patch you instead.) ;; th u(%qZ/fn.junkdive, %#)
CMD.LASTSHOT [#44]: $!lastshot *=*:@assert u(setr(Z, v(TACS))/combat-ok, %#)=th u(msg, %#, Error - You are not COMBAT-OK.) ;; @assert not(get(%#/pot`observe))=th u(msg, %#, You can't do that while your +POT status is set to Observe.) ;; @assert first(setr(E, u(%qZ/fn.can-attack, %#)), ^)=th u(msg, %#, Unable to assist - [after(%qE, ^)]) ;; @assert u(%qZ/fn.has-ability, %#, Resupply)=th u(msg, %#, You are about as reloady as the average goon.) ;; @assert isdbref(setr(0, locate2(%#, %0, *)))=th u(msg, %#, Error - Can't find a target named '%0' here.) ;; @assert u(%qZ/combat-ok, %q0)=th u(msg, %#, Error - [name(%q0)] is not COMBAT-OK.) ;; @assert u(%qZ/fn.has-combat-flag, %q0, COMBAT)=th u(msg, %#, [name(%q0)] is not currently in COMBAT.) ;; th [@@(q-reg 1 will be a list of ammo types)] [setq(1, map(#lambda/first(\%0, ^), setr(5, u(%qZ/fn.get-all-ammo-levels, %q0, Current)), |, |))] ;; @assert match(%q1, %1, |)=th u(msg, %#, None of [getname2(%q0)]'s attack use ammunition named '%1'. Try: [itemize(%q1, |)]) ;; th [@@(q-reg 2 and 3 will be the amount of ammo vs max ammo)] [setq(2, match(%q5, %1*, |))] ;; @assert eq(last(index(%q5, |, %q2, 1), ^), 0)=th u(msg, %#, [getname2(%q0)] still has %1 remaining.);; th [u(msg, %#, [getname2(%#)] provides [getname(%q0)] with a LAST SHOT of %1.)] [u(%qZ/fn.lastshot, %#, %q0, %1)]
CMD.LEGACY-ATTACK-POOL [#44]: $+attackpool *:@assert orflags(%#, Wr)=th u(msg, %#, You ain't no admin\, sucka!) ;; @assert isdbref(setr(0, pmatch(%0)))=th u(msg, I can't find a character named '%0'.) ;; @pemit %#=Total attack value for all modes is [u(#4055/weapons_cost, %q0)]%rMaximum Damage Level: [lmath(max, iter(get(%q0/modes),u(#4055/attack_cost,%q0,attacks_##)))]
CMD.LIST-ANALYSIS-DATA [#44]: $!analyze:@pemit %#=u(v(TACS)/fn.display-analysis-data, %#)
CMD.LIST-CAP-POINTS [#44R]: $^\!(caps|cappoints)$:@pemit %#=u(v(TACS)/fn.display-room-capture-points, loc(%#))
CMD.LIST-CRACKSHOT-DATA [#44]: $!aim:@pemit %#=u(v(TACS)/fn.display-crackshot-data, %#)
CMD.LOCATION-HEALTH [#44]: $!lh *:@assert orflags(%#, Wr)=@pemit %#={Huh? (Type "help" for help.)} ;; @assert t(setr(0, pmatch(%0)))=th u(msg, %#, I can't find a player named '%0') ;; th pemit(%#, u(v(TACS)/fn.location-health, %q0))
CMD.MERGE-COMBINER [#44]: $!merge:@assert isdbref(setr(G, get(%#/gestalt)))=th u(msg, %#, You discover a huge flaw in my code and merge into a giant twinky combiner all by yours-- oh wait no.) ;; @break setr(X, u(setr(Z, v(TACS))/fn.get-inactive-combiner-members, %qG))=th u(msg, %#, The following ACTIVE team members are Online but not IC/Combat-OK: [itemize(map(#lambda/name(\%0), %qX,,|),|)]) ;; @break setr(X, u(setr(Z, v(TACS))/fn.get-misplaced-combiner-members, %qG, %#))=th u(msg, %#, The following ACTIVE team members are Online and IC/Combat-OK but NOT at your location: [itemize(map(#lambda/name(\%0), %qX,,|),|)]) ;; @assert gte(words(u(%qZ/fn.get-active-located-combiner-members, %qG, %#)), get(%qG/GESTALT-MINIMUM))=th u(msg, %#, Error - You need at least [get(%qG/GESTALT-MINIMUM)] combiner members online\, IC\, Combat-OK\, and in the same room as you!) ;; th [u(msg, %#, %N summons the [capstr(get(%qG/gestalt-group))] to form [ucstr(name(%qG))]!)] [u(%qZ/fn.merge-combiner, %qG, %#)]
CMD.MODES [#44]: $!modes:@pemit %#=[header(Modes for [name(%#)])][iter(u(setr(Z, getobj(TACS))/fn.get-modes, %#),%r[space(5)]Mode [ansi(h,##)] - [u(%qZ/fn.get-mode-stat, %#, Current, ##, Type)] \([ansi(h, u(%qZ/fn.get-mode-stat, %#, Current, ##, Name))]\),,)]%r[header()]
CMD.MODES-ADMIN [#44]: $!modes *:@assert [u(fn.is-admin,%#)]=th [u(msg,%#,You ain't no admin\, sucka!)] ;; @assert [or(isdbref(setr(0,pmatch(%0))), isdbref(%0))]=th [u(msg,%#,Error: '%0' needs to be a player name or object DBref#.)] ;; th [pemit(%#, [header(Modes for [name(if(%q0, %q0, %0))])][iter(u(setr(Z, getobj(TACS))/fn.get-modes, if(%q0, %q0, %0)),%r[space(5)]Mode [ansi(h,##)] - [u(%qZ/fn.get-mode-stat, if(%q0, %q0, %0), Current, ##, Type)] \([ansi(h, u(%qZ/fn.get-mode-stat, if(%q0, %q0, %0), Current, ##, Name))]\),,)]%r[header()])]
CMD.NAME [#44]: $!name *=*:@assert u(setr(Z, v(TACS))/fn.is-valid-mode, %#, Max, %0)=th u(msg, %#, Invalid mode) ;; @assert u(setr(Z, v(TACS))/fn.is-valid-mode, %#, Current, %0)=th u(msg, %#, Invalid mode) ;; @assert not(eq(%0, 1))=th u(msg, %#, You can not change your primary mode name\, sorry!) ;; th [u(%qZ/fn.set-mode-stat, %#, Current, %0, NAME, secure(%1))] [u(%qZ/fn.set-mode-stat, %#, Max, %0, NAME, secure(%1))] [u(msg, %#, You set your mode %0 name to '[secure(%1)]'.)]
CMD.NAME-LIST [#44]: $!names:@pemit %#=u(v(TACS)/fn.display-alt-mode-names, %l)
CMD.OBJ-DESC [#44]: $!objdesc *=*:@assert setr(0, locate2(%#, %0, *))=th u(msg, %#, Error - I can't find an object named "%0") ;; @assert hasattrp(%q0, OBJ_DESC)=th u(msg, %#, Error - That object doesn't need a description.) ;; @assert or(orflags(%#, Wr), strmatch(u(getobj(TACS)/fn.get-aux-stat, %q0, Created_By), %#), strmatch(u(getobj(TACS)/fn.get-aux-stat, %q0, Owner), %#))=th u(msg, %#, Error - That object isn't owned by you.) ;; th [attrib_set(%q0/OBJ_DESC, %1)] [u(msg, %#, Object Description for [name(%q0)] set.)]
CMD.OBJECT-TRANSFORM [#44]: $!objtf *=*:@assert setr(0, locate2(%#, %0, *))=th u(msg, %#, I can't find anything named '%0' near by.) ;; @assert strmatch(parent(%q0), getobj(IWOP))=th u(msg, %#, [name(%q0)] doesn't appear to be a real Weapon Object.) ;; @assert u(setr(Z, getobj(TACS))/fn.can-use, %#, %q0)=th u(msg, %#, Sorry\, you aren't authorized to use [name(%q0)].) ;; @assert u(%qZ/fn.is-valid-mode, %q0, Current, %1)=th u(msg, %#, '%1' is an invalid mode for [name(%q0)].) ;; @break eq(%1, u(%qZ/curmode, %q0))=th u(msg, %#, [name(%q0)] is already in mode %1.) ;; @fo %q0=!transform %1
CMD.PASS [#44R]: $^\!(pass|rest)$:th [setq(Z,v(TACS))] ;; @assert not(get(%#/pot`observe))=th u(msg, %#, You can't do that while your +POT status is set to Observe.) ;; @assert [u(%qZ/combat-ok,%#)]=th u(msg,%#, You are not currently COMBAT-OK.) ;;  @assert u(%qZ/fn.has-combat-flag, %#, COMBAT)=th u(msg, %#, You can only use this command while in combat.) ;; @assert not(u(%qZ/fn.has-combat-flag, %#, STUNNED))=th u(msg, %#, You can't pass while stunned.) ;; th u(%qZ/fn.pass, %#)
CMD.PATCH [#44]: $!patch *:@assert u(setr(Z, v(TACS))/combat-ok, %#)=th u(msg, %#, You are not COMBAT-OK) ;; @assert isdbref(setr(0, locate2(%#, %0, *)))=th u(msg, %#, Error - Can't find a target named '%0' here.) ;; @assert u(%qZ/combat-ok, %q0)=th u(msg, %#, Error - [name(%q0)] needs to be conscious and IC.) ;; @assert u(%qZ/fn.has-combat-flag, %q0, COMBAT)=th u(msg, %#, Error - [name(%q0)] is not in combat.) ;; @break u(%qZ/fn.is-species, %q0, Booster)=th u(msg, %#, Sorry you can not !patch a booster pack!) ;; @assert u(%qZ/fn.has-any-ability, %#, Repair Heal Construction)=th u(msg, %#, Error - You need a repair-type ability to patch Transformers.) ;; @assert not(u(%qZ/fn.has-combat-flag, %q0, PATCHED))=th u(msg, %#, Error - [name(%q0)] has already been patched up.) ;; @assert gte(u(%qZ/fn.get-core-stat, %#, Current, Energon), u(%qZ/fn.get-patch-cost, %q0))=th u(msg, %#, You don't have the energy to patch anyone up right now.) ;; th u(%qZ/fn.patch, %q0, %#)
CMD.PILOT [#44]: $!pilot:@assert u(setr(Z,v(TACS))/fn.is-in-vehicle, %#)=th u(msg, %#, You need to be in a vehicle or exo-suit to use pilot.) ;; @break strmatch(PILOT, u(%qZ/fn.get-vehicle-position, %L, %#))=th u(%qZ/fn.vehicle-stop-being-pilot, %L, %#) ;; @assert not(setr(POSITION, u(%qZ/fn.get-vehicle-position, %L, %#)))=th u(msg, %#, You can't do that\, you are already the '%q<POSITION>'.) ;; @assert u(%qZ/fn.has-ability, %#, setr(ABILITY, default(u(%L/useabil), PILOT)))=th u(msg, %#, You don't have the required abilities to use this object. It requires the '[ucstr(%q<ABILITY>)]' ability.) ;; @assert or([hasfaction(%#,faction(%L))],[not([hasattrpval(%L,faction)])])=th u(msg, %#, This object is for [get(%L/faction)] faction members.) ;; @assert u(%qZ/combat-ok, %#)=th u(msg, %#, You are not COMBAT-OK.) ;; @assert u(%qZ/combat-ok, %L)=th u(msg, %#, This object is not COMBAT-OK.) ;; @assert not(u(%qZ/fn.has-stat-damage, %L))=th u(msg, %#, This object is too damaged for you to pilot right now. Try getting someone to repair it.) ;; @assert not(u(%qZ/fn.has-combat-flag, %#, COMBAT))=th u(msg, %#, You have been in combat too recently to pilot anything.) ;; @assert u(%qZ/fn.check-the-combat-flag, %L)=th u(msg, %#, This object has been in combat too recently.) ;; th switch(u(%L/useabil), exo-suit, u(%qZ/fn.pilot-exo, %L, %#), u(%qZ/fn.pilot-regular-vehicle, %L, %#))
CMD.PILOT-ENGINEER [#44]: $!pilot/engineer:@assert u(setr(Z,v(TACS))/fn.is-in-vehicle, %#)=th u(msg, %#, You need to be in a vehicle.) ;; @break strmatch(ENGINEER, u(%qZ/fn.get-vehicle-position, %L, %#))=th u(%qZ/fn.vehicle-stop-being-engineer, %L, %#) ;; @assert not(setr(POSITION, u(%qZ/fn.get-vehicle-position, %L, %#)))=th u(msg, %#, You can't do that\, you are already the '%q<POSITION>'.) ;; @assert u(%qZ/fn.has-any-ability, %#, REPAIR WEAPONSMITH CONSTRUCTION)=th u(msg, %#, You don't have any of the required abilities.) ;; @assert or([hasfaction(%#,faction(%L))],[not([hasattrpval(%L,faction)])])=th u(msg, %#, This object is for [get(%L/faction)] faction members.) ;; @assert u(%qZ/combat-ok, %#)=th u(msg, %#, You are not COMBAT-OK.) ;; @assert u(%qZ/combat-ok, %L)=th u(msg, %#, This object is not COMBAT-OK.) ;; @assert not(u(%qZ/fn.has-stat-damage, %L))=th u(msg, %#, This object is too damaged for you to pilot right now. Try getting someone to repair it.) ;; @assert not(u(%qZ/fn.has-combat-flag, %#, COMBAT))=th u(msg, %#, You have been in combat too recently to pilot anything.) ;; @assert u(%qZ/fn.check-the-combat-flag, %L)=th u(msg, %#, This object has been in combat too recently.) ;; th switch(u(%L/useabil), exo-suit, u(%qZ/fn.pilot-exo, %L, %#), u(%qZ/fn.pilot-vehicle-engineer, %L, %#))
CMD.PILOT-GUNNER [#44]: $!pilot/guns:@assert u(setr(Z,v(TACS))/fn.is-in-vehicle, %#)=th u(msg, %#, You need to be in a vehicle.) ;;  @break strmatch(GUNNER, u(%qZ/fn.get-vehicle-position, %L, %#))=th u(%qZ/fn.vehicle-stop-being-gunner, %L, %#) ;; @assert not(setr(POSITION, u(%qZ/fn.get-vehicle-position, %L, %#)))=th u(msg, %#, You can't do that\, you are already the '%q<POSITION>'.) ;; @assert or([hasfaction(%#,faction(%L))],[not([hasattrpval(%L,faction)])])=th u(msg, %#, This object is for [get(%L/faction)] faction members.) ;; @assert u(%qZ/combat-ok, %#)=th u(msg, %#, You are not COMBAT-OK.) ;; @assert u(%qZ/combat-ok, %L)=th u(msg, %#, This object is not COMBAT-OK.) ;; @assert not(u(%qZ/fn.has-stat-damage, %L))=th u(msg, %#, This object is too damaged for you to pilot right now. Try getting someone to repair it.) ;; @assert not(u(%qZ/fn.has-combat-flag, %#, COMBAT))=th u(msg, %#, You have been in combat too recently to pilot anything.) ;; @assert u(%qZ/fn.check-the-combat-flag, %L)=th u(msg, %#, This object has been in combat too recently.) ;; th u(%qZ/fn.pilot-vehicle-guns, %L, %#)
CMD.POWER-RANK [#44]: $!powrank *:@assert orflags(%#, Wr)=th u(msg, %#, You ain't no admin\, sucka!) ;; @assert isdbref(setr(0, pmatch(%0)))=th u(msg, %#, I can't find a character named '%0') ;; th [pemit(%#, u(getobj(TACS)/fn.display-power-rank, %q0, MAX))]
CMD.POWER-RANK-SCHEMA [#44]: $!powrank *=*:@assert orflags(%#, Wr)=th u(msg, %#, You ain't no admin\, sucka!) ;; @assert isdbref(setr(0, pmatch(%0)))=th u(msg, %#, I can't find a character named '%0') ;; @assert u(getobj(TACS)/fn.has-schema, %q0, %1)=th u(msg, %#, Error - [name(%q0)] does not have a [ucstr(%1)] schema.) ;; th [pemit(%#, u(getobj(TACS)/fn.display-power-rank, %q0, %1))]
CMD.PREP [#44]: $!prep *:@assert u(setr(Z, v(TACS))/combat-ok, %#)=th u(msg, %#, You are not COMBAT-OK) ;; @assert isdbref(setr(0, locate2(%#, %0, *)))=th u(msg, %#, Error - Can't find a target named '%0' here.) ;; @assert u(%qZ/combat-ok-possibly-unconscious, %q0)=th u(msg, %#, Error - [name(%q0)] is either not IC or not Connected.) ;; @assert u(%qZ/fn.has-combat-flag, %q0, COMBAT)=th u(msg, %#, [name(%q0)] has not been in combat recently. They don't need to be prepped!) ;; @assert t(u(%qZ/fn.has-any-ability, %#, Repair Heal Construction))=th u(msg, %#, Error - You need the REPAIR or HEAL or CONSTRUCTION ability to prep [name(%q0)].) ;; @assert not(strmatch(%#, %q0))=th u(msg, %#, You can't prep yourself!) ;; th u(%qZ/fn.prep, %q0, %#)
CMD.PROFILE [#44]: $!profile:th [pemit(%#,u(v(TACS)/fn.profile,%#,MAX))]
CMD.PROFILE-ADMIN [#44]: $!profile *:@break strmatch(%0, *=*) ;; @assert [u(fn.is-admin,%#)]=th [u(msg,%#,You ain't no admin\, sucka!)] ;; @assert [or(isdbref(setr(0,pmatch(%0))), isdbref(%0))]=th [u(msg,%#,Error: '%0' needs to be a player name or object DBref#.)] ;; th  [pemit(%#,u(v(TACS)/fn.profile, if(%q0, %q0, %0), MAX))]
CMD.PROFILE2-ADMIN [#44]: $!profile *=*:@assert [u(fn.is-admin,%#)]=th [u(msg,%#,You ain't no admin\, sucka!)] ;; @assert [or(isdbref(setr(0,pmatch(%0))), isdbref(%0))]=th [u(msg,%#,Error: '%0' needs to be a player name or object DBref#.)] ;; th  [pemit(%#,u(v(TACS)/fn.profile, if(%q0, %q0, %0), %1))]
CMD.RADAR [#44]: $!radar:@assert u(setr(Z, v(TACS))/fn.has-ability, %#, Radar)=th u(msg, %#, You don't have that ability.) ;; @assert not(u(%qZ/fn.is-hidden, %#))=th u(msg, %#, You need to stop hiding first.) ;; @assert u(%qZ/combat-ok, %#)=th u(msg, %#, You are not COMBAT-OK) ;; th u(%qZ/fn.radar, %#)
CMD.REBUILD [#44]: !rebuild *:@assert u(setr(Z, v(TACS))/combat-ok, %#)=th u(msg, %#, You are not COMBAT-OK.) ;; @assert u(%qZ/fn.has-ability, %#, Construction)=th u(msg, %#, You need the construction ability.) ;; @assert isdbref(setr(0, locate2(%#, %0, *)))=th u(msg, %#, Error - Can't find a target named '%0' here.) ;; @assert u(%qZ/combat-ok-possibly-unconscious, %q0)=th u(msg, %#, Error - [name(%q0)] is not IC.) ;; @assert not(u(%qZ/fn.has-combat-flag, %#, COMBAT))=th u(msg, %#, You have been in combat too recently. Wait until your COMBAT flag clears.) ;; @assert u(%qZ/fn.check-the-combat-flag, %q0)=th u(msg, %#, [name(%q0)] has been in combat too recently. Wait until their COMBAT flag clears.) ;; @assert u(%qZ/fn.is-species, %q0, Vehicle Weapon Base)=th u(msg, %#, [name(%q0)] is not a coded vehicle\, weapon\, or base object.) ;; @assert u(getobj(TIMETRACK)/fn.check-time-limit, REBUILD, %q0)=th u(msg, %#, Error - [name(%q0)] has been rebuilt too recently by another player.) ;; th u(%qZ/fn.rebuild, %q0, %#)
CMD.RECALIBRATE [#44]: $!recalibrate *:@assert u(setr(Z, v(TACS))/combat-ok, %#)=th u(msg, %#, You are not COMBAT-OK) ;; @assert isdbref(setr(0, locate2(%#, %0, *)))=th u(msg, %#, Error - Can't find a target named '%0' here.) ;; @assert u(%qZ/combat-ok, %q0)=th u(msg, %#, Error - [name(%q0)] needs to be conscious and IC.) ;; @assert u(%qZ/fn.has-combat-flag, %q0, COMBAT)=th u(msg, %#, Error - [name(%q0)] is not in combat.) ;; @break u(%qZ/fn.is-species, %q0, Booster)=th u(msg, %#, Sorry you cannot !recalibrate a booster pack!) ;; @assert u(%qZ/fn.has-any-ability, %#, Recalibrate)=th u(msg, %#, Error - You need the Recalibrate ability.) ;; @assert not(u(%qZ/fn.has-combat-flag, %q0, RECALIBRATED))=th u(msg, %#, Error - [name(%q0)] has already been recalibrated.) ;; @assert gte(u(%qZ/fn.get-core-stat, %#, Current, Energon), u(%qZ/fn.get-patch-cost, %q0))=th u(msg, %#, You don't have the energy to recalibrate anyone right now.) ;; th u(%qZ/fn.recalibrate, %q0, %#)
CMD.RECHARGE [#44]: $!recharge *:@assert setr(0, locate(%#, %0, Ti))=th u(msg, %#, I can't find anything named '%0' in your inventory.) ;; @assert strmatch(parent(%q0), getobj(BOOSTER))=th u(msg, %#, The object '%0' does not appear to be a real Booster Pack) ;; @assert u(setr(Z, getobj(TACS))/fn.can-use, %#, %q0)=th u(msg, %#, Sorry\, this object isn't yours to recharge.) ;; @assert u(%qZ/fn.get-aux-stat, %q0, RECHARGEABLE)=th u(msg, %#, [name(%q0)] is not rechargeable. Why don't you [ansi(h,!recycle)] it instead?) ;; @assert u(setr(T, getobj(TIMETRACK))/fn.check-time-limit, RECHARGE-BOOSTER, %#)=th u(msg, %#, Sorry\, you can only recharge one booster per week. Check [ansi(h,!limits)] for details.) ;; th [setq(1, u(%qZ/fn.get-aux-stat, %q0, MAX_CHARGES))] [u(%qZ/fn.set-aux-stat, %q0, CHARGES, %q1)] [u(msg, %#, You have recharged [name(%q0)].)] [u(%qZ/fn.log-booster-action, RECHARGE, %#, %q0)] [u(%qZ/fn.reset, %q0)] [u(%qT/fn.set-time-limit, RECHARGE-BOOSTER, %#)]
CMD.RECYCLE [#44]: $!recycle *:@assert setr(0, locate(%#, %0, Ti))=th u(msg, %#, I can't find anything named '%0' in your inventory.) ;; @assert u(setr(Z, getobj(TACS))/fn.is-booster, %q0)=th u(msg, %#, The object '%0' does not appear to be a real Booster Pack.) ;; @assert u(%qZ/fn.can-use, %#, %q0)=th u(msg, %#, Sorry\, this object isn't yours to recycle.) ;; @assert not(u(%qZ/fn.get-aux-stat, %q0, RECHARGEABLE))=th u(msg, %#, This booster is rechargeable. Maybe you should hang onto it so you can [ansi(hy,!recharge)] it later?) ;; th [u(msg, %#, You have recycled [name(%q0)])] [gotohell(%q0)] [u(%qZ/fn.log-booster-action, RECYCLE, %#, %q0)]
CMD.REFILL-TANK [#44]: $!tank *:@assert u(setr(Z, v(TACS))/combat-ok, %#)=th u(msg, %#, Error - You are not COMBAT-OK.) ;; @assert not(get(%#/pot`observe))=th u(msg, %#, You can't do that while your +POT status is set to Observe.) ;; @assert u(%qZ/fn.has-ability, %#, Refuel)=th u(msg, %#, Playing with energon can be hazardous to your health.) ;; @assert u(%qZ/fn.is-refueling, %#)=th u(msg, %#, You need to deploy your energon reserve tank first!) ;; @assert and(isint(%0), gt(%0, 0))=th u(msg, %#, Error - '%0' is an invalid amout of energon.) ;; @assert lte(%0, u(%qZ/fn.get-core-stat, %#, Current, Energon))=th u(msg, %#, Error - '%0' exceeds your current energon level.) ;; th [u(msg, %#, [getname2(%#)] adds more energon to [poss(%#)] reserve tank., 1)] [setadd(%#, AUX`TEMP`TANK, %0, 1)] [u(%qZ/fn.add-energon, %#, mul(-1, %0))]
CMD.REFORGE [#44]: $!reforge *:[setq(W, getobj(SMITH))] ;; @assert u(setr(Z, getobj(TACS))/fn.is-weaponsmith, %#)=th u(msg, %#, Who do you think you are\, MacGruber?) ;; @assert setr(0, locate2(%#, %0, *))=th u(msg, %#, I can't see an object named '%0' near by.) ;; @assert u(%qZ/fn.is-forged-weapon, %q0)=th u(msg, %#, [name(%q0)] doesn't look like a real forged weapon object.) ;; @assert strmatch(%#, u(%qZ/fn.get-aux-stat, %q0, created_by))=th u(msg, %#, [name(%q0)] was not forged by you!) ;; @assert if(u(%qZ/fn.is-owner, %#, %q0), 1, get(%qW/COMMISSIONS`%#`[setr(1, u(%qZ/fn.get-aux-stat, %q0, Owner))]))=th u(msg, %#, You don't have a commission from [name(%q0)]'s owner\, [name(%q1)].) ;; @assert if(u(%qZ/fn.is-owner, %#, %q0), 1, gte(get(%qW/COMMISSIONS`%#`%q1), setr(2, u(%qZ/fn.get-aux-stat, %q0, Original_Cost))))=th u(msg, %#, [name(%q1)]'s commission isn't high enough. They need to spend [ansi(h, %q2)] AP to reforge this weapon.) ;; @assert if(u(%qZ/fn.is-owner, %#, %q0), 1, gte(get(%q1/AP_BANKED), %q2))=th u(msg, %#, Error - [name(%q1)] doesn't have enough AP \(%q2\) to cover that!)] ;; @assert u(setr(T, getobj(TIMETRACK))/fn.check-time-limit, FORGE, %#)=th u(msg, %#, Sorry\, you have forged another weapon too recently. Check [ansi(h,!limits)] for details.) ;; th [u(msg, %#, Re-forging [name(%q0)] back to full strength!)] [u(%qW/fn.reforge-weapon, %#, %q0)] [u(%qT/fn.set-time-limit-backdate, FORGE, %#, sub(8, max(2, min(8, %q2))))] [setadd(%q1, AP_BANKED, %q2, -1)] [u(%qW/fn.remove-commission, %q1, %#)]
CMD.REFUEL [#44]: $!refuel *=*:@assert u(setr(Z, v(TACS))/combat-ok, %#)=th u(msg, %#, You are not COMBAT-OK.) ;; @assert u(%qZ/fn.has-ability, %#, Refuel)=th u(msg, %#, Attempting to handle energon without the proper skills could be dangerous to your health.) ;; @assert isdbref(setr(0, locate2(%#, %0, *)))=th u(msg, %#, Error - Can't find a target named '%0' here.) ;; @assert u(%qZ/combat-ok, %q0)=th u(msg, %#, Error - [name(%q0)] is not COMBAT-OK.) ;; @assert u(getobj(TIMETRACK)/fn.check-time-limit, PLAYER-REFUEL, %q0)=th u(msg, %#, Error - [name(%q0)] has been refueled too recently by another player.) ;; @assert u(getobj(TIMETRACK)/fn.check-time-limit, AUTO-REFUEL, %q0)=th u(msg, %#, Error - [name(%q0)] has been refueled too recently by an automated drone.) ;; @assert and(isint(%1), gt(%1, 0), lte(%1, u(%qZ/fn.get-core-stat, %#, Current, Energon)))=th u(msg, %#, Error - '%1' is an invalid amout of energon.)] ;; @assert not(strmatch(%#, %q0))=th u(msg, %#, Nice try!) ;; th u(%qZ/fn.refuel, %q0, %#, u(%qZ/fn.get-player-refuel-amount, %q0, %1))
CMD.REFUEL2 [#44]: $!!refuel *=*:@assert u(setr(Z, v(TACS))/combat-ok, %#)=th u(msg, %#, You are not COMBAT-OK.) ;; @assert u(%qZ/fn.has-ability, %#, Refuel)=th u(msg, %#, Attempting to handle energon without the proper skills could be dangerous to your health.) ;; @assert isdbref(setr(0, locate2(%#, %0, *)))=th u(msg, %#, Error - Can't find a target named '%0' here.) ;; @assert u(%qZ/combat-ok, %q0)=th u(msg, %#, Error - [name(%q0)] is not COMBAT-OK.) ;; @assert u(%qZ/fn.has-combat-flag, %q0, COMBAT)=th u(msg, %#, [name(%q0)] is not currently in COMBAT.) ;; @break u(%qZ/fn.has-combat-flag, %q0, REFUELED)=th u(msg, %#, [name(%q0)] has already been refueled once during this battle.) ;; @assert u(%qZ/fn.is-refueling, %#)=th u(msg, %#, You have not deployed your reserve tank. (See '+help !tank')) ;; @assert and(isint(%1), gt(%1, 0))=th u(msg, %#, Error - '%1' is an invalid amout of energon.)] ;; @assert lte(%1, get(%#/aux`temp`tank))=th u(msg, %#, You only have [get(%#/aux`temp`tank)] energon in your reserve tank. (See '+help !tank')) ;; th [u(%qZ/fn.refuel2, %q0, %#, %1)]
CMD.REFUELCHECK [#44]: $!refuelcheck *=*:@assert u(setr(Z, v(TACS))/combat-ok, %#)=th u(msg, %#, You are not COMBAT-OK.) ;; @assert u(%qZ/fn.has-ability, %#, Refuel)=th u(msg, %#, Attempting to handle energon without the proper skills could be dangerous to your health.) ;; @assert isdbref(setr(0, locate2(%#, %0, *)))=th u(msg, %#, Error - Can't find a target named '%0' here.) ;; @assert u(%qZ/combat-ok, %q0)=th u(msg, %#, Error - [name(%q0)] is not COMBAT-OK.) ;; @assert u(getobj(TIMETRACK)/fn.check-time-limit, PLAYER-REFUEL, %q0)=th u(msg, %#, Error - [name(%q0)] has been refueled too recently by another player.) ;; @assert u(getobj(TIMETRACK)/fn.check-time-limit, AUTO-REFUEL, %q0)=th u(msg, %#, Error - [name(%q0)] has been refueled too recently by an automated drone.) ;; @assert and(isint(%1), gt(%1, 0), lte(%1, u(%qZ/fn.get-core-stat, %#, Current, Energon)))=th u(msg, %#, Error - '%1' is an invalid amout of energon.)] ;; @assert not(strmatch(%#, %q0))=th u(msg, %#, Nice try!) ;; th u(msg, %#, This operation would transfer [u(%qZ/fn.get-player-refuel-amount, %q0, %1)] energon units to [name(%q0)].)
CMD.REINFORCE [#44]: $!reinforce *:@assert u(setr(Z, v(TACS))/combat-ok, %#)=th u(msg, %#, You are not COMBAT-OK) ;; @assert isdbref(setr(0, locate2(%#, %0, *)))=th u(msg, %#, Error - Can't find a target named '%0' here.) ;; @assert u(%qZ/combat-ok, %q0)=th u(msg, %#, Error - [name(%q0)] needs to be conscious and IC.) ;; @assert u(%qZ/fn.has-combat-flag, %q0, COMBAT)=th u(msg, %#, Error - [name(%q0)] is not in combat.) ;; @break u(%qZ/fn.is-species, %q0, Booster)=th u(msg, %#, Sorry you cannot !reinforce a booster pack!) ;; @assert u(%qZ/fn.has-any-ability, %#, Reinforce)=th u(msg, %#, Error - You need the Reinforce ability.) ;; @assert not(u(%qZ/fn.has-combat-flag, %q0, REINFORCED))=th u(msg, %#, Error - [name(%q0)] has already been reinforced.) ;; @assert gte(u(%qZ/fn.get-core-stat, %#, Current, Energon), u(%qZ/fn.get-patch-cost, %q0))=th u(msg, %#, You don't have the energy to reinforce anyone right now.) ;; th u(%qZ/fn.reinforce, %q0, %#)
CMD.RELOAD [#44]: $!reload *:@assert u(setr(Z, v(TACS))/combat-ok, %#)=th u(msg, %#, You are not COMBAT-OK.) ;; @assert u(%qZ/fn.has-ability, %#, Resupply)=th u(msg, %#, What\, you think they just let anyone walk around with boxes of ammunition? You need the Resupply ability.) ;; @assert isdbref(setr(0, locate2(%#, %0, *)))=th u(msg, %#, Error - Can't find a target named '%0' here.) ;; @break strmatch(u(%qZ/fn.get-aux-stat, %q0, Created_Ability), Weaponsmith)=th u(msg, %#, That weapon was [ansi(hc, forged)] by [ansi(h, name(u(%qZ/fn.get-aux-stat, %q0, Created_By)))]\; you should let [obj(u(%qZ/fn.get-aux-stat, %q0, Created_By))] handle that.) ;; @assert u(%qZ/combat-ok, %q0)=th u(msg, %#, Error - [name(%q0)] is not COMBAT-OK.) ;; @assert not(u(%qZ/fn.has-combat-flag, %#, COMBAT))=th u(msg, %#, You have been in combat too recently. Wait until your COMBAT flag clears.) ;; @assert not(u(%qZ/fn.has-combat-flag, %q0, COMBAT))=th u(msg, %#, [name(%q0)] has been in combat too recently. Wait until their COMBAT flag clears.) ;; @assert u(getobj(TIMETRACK)/fn.check-time-limit, PLAYER-RELOAD, %q0)=th u(msg, %#, Error - [name(%q0)] has been resupplied too recently by another player.) ;; @assert u(getobj(TIMETRACK)/fn.check-time-limit, AUTO-RELOAD, %q0)=th u(msg, %#, Error - [name(%q0)] has been resupplied too recently by an automated drone.) ;; @assert not(u(fn.is-species, %q0, Weapon))=th u(msg, %#, This weapon can not be reloaded.) ;; th u(%qZ/fn.reload-ammo, %q0, %#)
CMD.REMOTE-SMELT [#44]: $!smelt *:@assert isdbref(%0) ;; @assert u(setr(Z, getobj(TACS))/fn.is-weaponsmith, %#)=th u(msg, %#, Who do you think you are\, MacGruber?) ;; @assert isdbref(%0)=th u(msg, %#, '%0' does not appear to be a real DBref#.) ;; @assert u(%qZ/fn.is-forged-weapon, %0)=th u(msg, %#, That is not a forged weapon object.) ;; @assert strmatch(%#, u(%qZ/fn.get-aux-stat, %0, created_by))=th u(msg, %#, [name(%0)] was not forged by you!) ;; @assert u(%qZ/fn.weapon-is-empty, %0)=th u(msg, %#, That weapon still has charges\; [ansi(h, name(u(%qZ/fn.get-aux-stat, %0, Owner)))] would probably be mad! If it is unused you can !unforge it and refund their AP.) ;; th [u(msg, %#, Smelting [switch(u(%qZ/fn.get-aux-stat, %0, Owner), %#, your, [name(#$)]'s)] [name(%0)].)] [u(getobj(SMITH)/fn.smelt-weapon, %#, %0)]
CMD.REMOVE-COMBAT-FLAG [#44]: $!remflag *=*:@assert [u(fn.is-admin,%#)]=th [u(msg,%#,You ain't no admin\, sucka!)] ;; @assert [or(isdbref(setr(0,pmatch(%0))), isdbref(%0))]=th [u(msg,%#,Error: '%0' needs to be a player name or object DBref#.)] ;; @assert t(setr(1, u(v(TACS)/fn.remove-combat-flag, if(%q0, %q0, %0), %1)))=th u(msg, %#, Error - %q1) ;; th u(msg, %#, Removed combat flag '%1' from [name(if(%q0, %q0, %0))])
CMD.REMOVE-COMMISSION [#44]: $!commission/remove *:@assert t(setr(0, pmatch(%0)))=th u(msg, %#, Error - I can't find a player named '%0'.) ;; @assert u(setr(Z, getobj(TACS))/fn.is-weaponsmith, %q0)=th u(msg, %#, [name(%q0)] doesn't seem very smithy to me.) ;; @break strmatch(%#, %q0)=th u(msg, %#, There's no need to commission from yourself.) ;; @assert u(getobj(SMITH)/fn.has-commission, %#, %q0)=th u(msg, %#, You don't have a commission with [name(%q0)].) ;; th [u(getobj(SMITH)/fn.remove-commission, %#, %q0)] [u(msg, %#, Removed your commission from [ansi(h, name(%q0))].)]
CMD.REPAIR [#44R]: ^\!(repair|heal) (.*)$:th setq(@assert u(setr(Z, v(TACS))/combat-ok, %#)=th u(msg, %#, You are not COMBAT-OK) ;; @assert isdbref(setr(0, locate2(%#, %2, *)))=th u(msg, %#, Error - Can't find a target named '%2' here.) ;; @assert u(%qZ/combat-ok-possibly-unconscious, %q0)=th u(msg, %#, Error - [name(%q0)] is either not IC or not Connected.) ;; @assert not(u(%qZ/fn.has-combat-flag, %q0, COMBAT))=th u(msg, %#, Error - [name(%q0)] has been in combat too recently to be %1ed. Wait until [poss(%q0)] COMBAT flag disappears.) ;; @assert u(getobj(TIMETRACK)/fn.check-time-limit, PLAYER-REPAIR, %q0)=th u(msg, %#, Error - [name(%q0)] has been %1ed too recently by another player.) ;; [@@(@assert u(getobj(TIMETRACK)/fn.check-time-limit, AUTO-REPAIR, %q0)=th u(msg, %#, Error - [name(%q0)] has been %1ed too recently by an automated drone.))] ;; @assert switch(%1, repair, u(%qZ/fn.is-species, %q0, Transformer Junkion Quintesson Sharkticon), 1)=th u(msg, %#, Error - Repair only works on Transformers and Quintessons. Try the 'heal' ability for other life forms\, or 'rebuild' for vehicles.) ;; @assert switch(%1, heal, u(%qZ/fn.is-species, %q0, Alt-Human Human Alien Quintesson), 1)=th u(msg, %#, Error - Heal only works on organics. Try the 'repair' ability for other life forms.) ;; @assert not(strmatch(%#, %q0))=th u(msg, %#, You can't %1 yourself!) ;; th u(%qZ/fn.repair, %q0, %#, lcstr(%1))
CMD.RESET [#44]: $!reset *:@assert [u(fn.is-admin,%#)]=th [u(msg,%#,You ain't no admin\, sucka!)] ;; @assert [or(isdbref(setr(0,pmatch(%0))), isdbref(%0))]=th [u(msg,%#,Error: '%0' needs to be a player name or object DBref#.)] ;; th [pemit(%#,Resetting [name(if(%q0, %q0, %0))].)] [u(v(TACS)/fn.reset, if(%q0, %q0, %0), 1)]
CMD.RESET-LIMITS [#44]: $!reset/l* *:@assert [u(fn.is-admin,%#)]=th [u(msg,%#,You ain't no admin\, sucka!)] ;; @assert [or(isdbref(setr(0,pmatch(%1))), isdbref(%1))]=th [u(msg,%#,Error: '%1' needs to be a player name or object DBref#.)] ;; th [pemit(%#,Resetting [name(if(%q0, %q0, %1))].)] [iter(lattr(getobj(TIMETRACK)/LIMIT.*), wipe(getobj(TIMETRACK)/LIMIT-[after(##,.)]`[if(%q0, %q0, %1)]),,)]) ]
CMD.RESET-SELF [#44]: $!reset:@assert [or(0[@@(u(fn.is-admin, %#))], u(v(TACS)/fn.is-training-room, %l))]=th [u(msg,%#,You need to be in a training room for that to work.)] ;; th [u(v(TACS)/fn.reset, %#)] [u(msg, %#, [name(%#)] resets [obj(%#)]self., 1)]
CMD.RETREAT [#44]: $!retreat:@assert u(setr(Z, v(TACS))/combat-ok, %#)=th u(msg, %#, You are not COMBAT-OK) ;; th u(%qZ/fn.retreat, %#)
CMD.SELFDAMAGE [#44]: $!selfhurt *:@assert u(setr(Z, v(TACS))/combat-ok, %#)=th u(msg, %#, You are not COMBAT-OK) ;; @assert and(isint(%0), gt(%0, 0))=th u(msg, %#, Error - '%0' is not a valid positive integer.) ;; th [u(msg, %#, [name(%#)] damages %oself.,1)] [u(%qZ/fn.do-damage, u(%qZ/fn.build-attack-object, %#, %#, %#), %0)] [u(%qZ/fn.check-stat-damage, u(%qZ/fn.build-attack-object, %#, %#, %#), %0)] [u(%qZ/fn.knockout-check, u(%qZ/fn.build-attack-object, %#, %#, %#))]
CMD.SELFDRAIN [#44]: $!selfdrain *:@assert u(setr(Z, v(TACS))/combat-ok, %#)=th u(msg, %#, You are not COMBAT-OK) ;; @assert and(isint(%0), gt(%0, 0))=th u(msg, %#, Error - '%0' is not a valid positive integer.) ;; @assert lte(%0, u(%qZ/fn.get-core-stat, %#, Current, Energon))=th u(msg, %#, You don't have that much energon!) ;; th [u(msg, %#, [name(%#)] deducts energon from %oself.,1)] [u(%qZ/fn.deduct-energon, %#, %0)]
CMD.SELFFLAG [#44]: $!selfflag *:@assert [strmatch(BACKFIRING BLINDED BLINDED2 CONFUSED CRIPPLED CRIPPLED2 HEAVY LOCKON SCARED STUNNED UNCON DIZZY, *%0*)]=th [u(msg, %#, I don't understand that flag.)] ;; [u(v(TACS)/fn.add-combat-flag, %#, %0))] ;; th [u(msg, %#, Added combat flag '%0'.)]
CMD.SEND-COMMISSION [#44]: $!commission *=*:@assert t(setr(0, pmatch(%0)))=th u(msg, %#, Error - I can't find a player named '%0'.) ;; @assert neq(playerid(%#), playerid(%q0))=th u(msg, %#, [name(%q0)] appears to be an alt-char of yours.) ;; @assert u(setr(Z, getobj(TACS))/fn.is-weaponsmith, %q0)=th u(msg, %#, [name(%q0)] doesn't seem very smithy to me.) ;; @break strmatch(%#, %q0)=th u(msg, %#, There's no need to commission from yourself.) ;; @assert and(isint(%1), gt(%1, 0))=th u(msg, %#, %1 doesn't look like a valid AP cost.) ;; @assert gte(get(%#/AP_BANKED), %1)=th u(msg, %#, You need to have %1 AP first!) ;; th [u(getobj(SMITH)/fn.set-commission, %#, %q0, %1)] [u(msg, %#, You have placed a commission for a [ansi(hc, %1)] AP Weapon from [ansi(h, name(%q0))].)]
CMD.SET-CONTROL-LOCK [#44]: $!control *:@assert if(u(setr(Z, v(TACS))/fn.get-avail-control-attacks, %#), 1, 0)=th u(msg, %#, You don't have any CONTROL'able attacks in this mode!) ;; @assert t(match(get(%qZ/LIST.PASSLOCK-TYPES), %0))=th u(msg, %#, "%0" is an invalid attack-lock. Try one of these: [itemize(get(%qZ/LIST.PASSLOCK-TYPES))]);; th [u(msg, %#, Your CONTROL attacks are now locked to "[ucstr(%0)]".)] [u(%qZ/fn.set-aux-stat, %#, attacklock, %0)]
CMD.SETUP-CAPTURE-POINT [#44]: $!setupcap *=*=*=*=*=*:@assert orflags(%#, Wr)=th u(msg, %#, Whaaaaaaaaaaaat! You ain't no admin.) ;; @assert u(setr(Z, getobj(TACS))/fn.room-has-cp, %l, %0)=th u(msg, %#, [name(%l)] doesn't have a capture point [ucstr(%0)].) ;; th [u(%qZ/fn.set-cp-stat, %l, %0, OFF-MOD, %1)] [u(%qZ/fn.set-cp-stat, %l, %0, DEF-MOD, %2)] [u(%qZ/fn.set-cp-stat, %l, %0, DAMAGE-MOD, %3)] [u(%qZ/fn.set-cp-stat, %l, %0, ARMOR-MOD, %4)] [u(%qZ/fn.set-cp-stat, %l, %0, HOLDING-BONUS, %5)] [u(msg, %#, Setup bonuses for capture point [ucstr(%0)].)]
CMD.SHAKE [#44]: $!shake:@assert u(setr(Z, v(TACS))/combat-ok, %#)=th u(msg, %#, You are not COMBAT-OK.) ;; @assert u(%qZ/fn.has-combat-flag, %#, STUNNED)=th u(msg, %#, You don't have any ill-effects to shake off!) ;; th u(%qZ/fn.shake, %#)
CMD.SHOW-LIMITS [#44]: $!limits:@pemit %#=u(getobj(TIMETRACK)/fn.display-limits, %#)
CMD.SHOW-LIMITS-ADMIN [#44]: $!limits *:@assert [u(fn.is-admin,%#)]=th [u(msg,%#,You ain't no admin\, sucka!)] ;; @assert [or(isdbref(setr(0,pmatch(%0))), isdbref(%0))]=th [u(msg,%#,Error: '%0' needs to be a player name or object DBref#.)] ;; @pemit %#=u(getobj(TIMETRACK)/fn.display-limits, if(%q0, %q0, %0))
CMD.SIZE [#44]: $!size *:@assert isdbref(setr(0, locate2(%#, %0, *)))=th u(msg, %#, Error - Can't find a target named '%0' here.) ;; th [setq(1, u(setr(Z, getobj(TACS))/fn.get-current-mode-stat, %q0, SIZE))] [setq(2, u(%qZ/fn.get-current-mode-stat, %#, SIZE))] [setq(3, switch(abs(sub(%q1, %q2)), >5, vastly, >2, significantly, 0, XXX, 1, slightly, 2, a lot))] [u(msg, %#, [getname(%q0)] is size %q1\, [switch(%q1, %q2, the same as you., %q3 [if(lt(%q1, %q2), smaller, larger)] than you.)])]
CMD.SMELT [#44]: $!smelt *:@break isdbref(%0) ;; @assert setr(0, locate2(%#, %0, *))=th u(msg, %#, I can't see an object named '%0' near by.) ;; @assert u(setr(Z, getobj(TACS))/fn.is-forged-weapon, %q0)=th u(msg, %#, [name(%q0)] doesn't look like a real forged weapon object.) ;; @assert u(%qZ/fn.weapon-is-empty, %q0)=th u(msg, %#, That weapon still has charges\, are you sure you want to smelt it?) ;; @assert strmatch(u(%qZ/fn.get-aux-stat, %q0, OWNER), %#)=th u(msg, %#, You aren't the owner of [name(%q0)]!) ;; th  [u(msg, %#, Smelting your [name(%q0)].)] [tel(%q0, #666)]
CMD.SNEAK-OFF [#44]: $!sneak/off:@assert u(setr(Z, v(TACS))/fn.has-ability, %#, Sneak)=th u(msg, %#, You're about as stealthy as the average goon.) ;; @assert u(%qZ/fn.has-combat-flag, %#, SNEAKING)=th u(msg, %#, You are not feeling that sneaky at the moment.) ;; th u(%qZ/fn.sneak-off, %#)
CMD.SNEAK-ON [#44]: $!sneak/on:@assert u(setr(Z, v(TACS))/fn.has-ability, %#, Sneak)=th u(msg, %#, You're about as stealthy as the average goon.) ;; @assert not(u(%qZ/fn.has-combat-flag, %#, SNEAKING))=th u(msg, %#, You are already as sneaky as you are going to get.) ;; @assert u(%qZ/combat-ok, %#)=th u(msg, %#, You are not COMBAT-OK) ;; @assert gte(u(%qZ/fn.get-core-stat, %#, Current, Energon), get(%qZ/PARAM.cloak-cost))=th u(msg, %#, Your energon reserves are too low to concentrate on being sneaky.) ;; @assert not(u(%qZ/fn.has-combat-flag, %#, COMBAT))=th u(msg, %#, You can't be sneaky in the middle of combat!) ;; th u(%qZ/fn.sneak-on, %#)
CMD.SUPPORT [#44]: $!support *=*:@assert u(setr(Z, v(TACS))/fn.has-ability, %#, Support)=th u(msg, %#, You are about as supportive as the average goon.) ;; @assert t(match(STR FRP ACC AGL, %1))=th u(msg, %#, Error - '%1' is an invalid support type.) ;; @assert u(%qZ/fn.has-talent, %#, Current, Support, %1)=th u(msg, %#, [u(%qZ/fn.get-stat-fullname, %1)] support is outside of your skillset.) ;; @assert u(%qZ/combat-ok, %#)=th u(msg, %#, You are not COMBAT-OK.) ;; @assert isdbref(setr(0, locate2(%#, %0, *)))=th u(msg, %#, Error - Can't find a target named '%0' here.) ;; @break strmatch(%#, %q0)=th u(msg, %#, This ability only works on others. Nice try though!) ;; @assert u(%qZ/combat-ok, %q0)=th u(msg, %#, Error - [name(%q0)] is not COMBAT-OK.) ;; @assert u(%qZ/fn.has-combat-flag, %q0, COMBAT)=th u(msg, %#, [name(%q0)] is not currently in COMBAT.) ;; @break u(%qZ/fn.has-combat-flag, %q0, SUPPORTED-%1)=th u(msg, %#, [name(%q0)] already has all the help [subj(%q0)] can get.) ;; @assert gte(u(%qZ/fn.get-core-stat, %#, Current, Energon), v(PARAM.SUPPORT-COST))=th u(msg, %#, You don't have enough energon \([v(PARAM.SUPPORT-COST)]\) to help [name(%q0)].) ;; th [u(msg, %#, switch(rand(12), 0, [getname2(%q0)] gets by with a little help from [poss(%q0)] friend\, [getname2(%#)]., [getname2(%#)] gives [getname2(%q0)]'s [u(%qZ/fn.get-stat-fullname, %1)] a boost.), 1)] [u(%qZ/fn.support, %q0, %1, %#)]
CMD.SYSCHECK [#44]: $!syscheck:th [pemit(%#,u(v(TACS)/fn.syscheck,%#))]
CMD.SYSCHECK-ADMIN [#44]: $!syscheck *:@assert [u(fn.is-admin,%#)]=th [u(msg,%#,You ain't no admin\, sucka!)] ;; @assert [or(isdbref(setr(0,pmatch(%0))), isdbref(%0))]=th [u(msg,%#,Error: '%0' needs to be a player name or object DBref#.)] ;; th [pemit(%#,u(v(TACS)/fn.syscheck, if(%q0, %q0, %0)))]
CMD.TALENTS [#44]: $!talents:@pemit %#=u(getobj(TACS)/fn.display-talents, %#, MAX)
CMD.TALENTS-ADMIN [#44]: $!talents *:@assert [u(fn.is-admin,%#)]=th [u(msg,%#,You ain't no admin\, sucka!)] ;; @assert [or(isdbref(setr(0,pmatch(%0))), isdbref(%0))]=th [u(msg,%#,Error: '%0' needs to be a player name or object DBref#.)] ;; @pemit %#=u(getobj(TACS)/fn.display-talents, if(%q0, %q0, %0), MAX)
CMD.TRAINING-ROOM-RESTORE [#44]: $!restore *:@assert u(v(TACS)/fn.is-training-room, %l)=th u(msg, %#, You need to be in a training room for that to work.) ;; @assert setr(1, locate2(%#, %0))=th u(msg, %#, I can't find anything named '%0'.) ;; @break hastype(%q1, PLAYER)=th u(msg, %#, Why don't you let [name(%q1)] do that for [poss(%q1)]self.) ;; th [u(v(TACS)/fn.reset, %q1)] [u(msg, %#, [getname2(%#)] resets [name(%q1)]., 1)]
CMD.TRANS2 [#44]: $trans* *:@fo %#=!transform %1
CMD.TRANSFORM [#44]: $!transform *:@assert not(strmatch(%0, u(setr(Z, v(TACS))/curmode, %#)))=th u(msg, %#, You are already in that mode!) ;; @assert u(%qZ/fn.is-valid-mode, %#, current, %0)=th u(msg,%#,%0 is not a valid mode number.) ;; @assert not(u(%qZ/fn.has-combat-flag, %#, STUNNED))=th u(msg, %#, You can not transform while stunned.) ;; @assert not(u(%qZ/fn.has-combat-flag, %#, MODE-LOCKED2))=th u(msg, %#, You can not transform while mode-locked2.) ;; @assert not(u(%qZ/fn.has-combat-flag, %#, MODE-LOCKED))=th u(msg, %#, You can not transform while mode-locked.) ;; @assert if(u(%qZ/fn.has-combat-flag, %#, SNEAKING), match(u(%qZ/fn.get-mode-stat,%#,Current,%0,abilities), SNEAK), 1)=th u(msg, %#, Error - That mode is not very sneaky. You will have to reveal yourself first.) ;; @assert if(u(%qZ/fn.has-combat-flag, %#, CLOAKED), match(u(%qZ/fn.get-mode-stat,%#,Current,%0,abilities), CLOAK), 1)=th u(msg, %#, Error - That mode does not have cloaking capability. You will have to reveal yourself first.) ;; @assert not(u(%qZ/fn.has-combat-flag, %#, AIMING))=th u(msg, %#, Warning: You are currently aiming at [name(u(%qZ/fn.get-aiming-target, %#))]. If you want to transform and lose this bonus\, you can use '[ansi(h,[v(CHAR)]aim/off)]'.) ;; @assert not(u(%qZ/fn.has-combat-flag, %#, STUNNED))=th u(msg, %#, You can't transform while stunned.) ;; @assert if(u(%qZ/fn.has-combat-flag, %#, FF-CAST), match(u(%qZ/fn.get-mode-stat,%#,Current,%0,abilities), FORCEFIELD), 1)=th u(msg, %#, Error - That mode does not have forcefield capabilities\, you will have to turn your forcefield off first.) ;; @assert if(u(%qZ/fn.has-combat-flag, %#, HIDING), match(u(%qZ/fn.get-mode-stat,%#,Current,%0,abilities), HIDE), 1)=th u(msg, %#, Error - That mode does not have hiding capability. You will have to reveal yourself first.) ;; th u(%qZ/fn.transform, %#, %0) ;; @trig %#/atransform_%0
CMD.UNALLOW [#44]: $!unallow:th [setq(Z,v(TACS))] ;; @assert [u(%qZ/combat-ok,%#)]=th [u(msg,%#, You are not currently COMBAT-OK.)] ;; @assert u(%qZ/fn.has-combat-flag, %#, HIT-OK)=th u(msg, %#, Error - You have not !allowed.) ;; th [u(msg,%#,You remove your allow status.)] [u(%qZ/fn.remove-combat-flag, %#, HIT-OK)]
CMD.UNCAPTURE [#44]: $!uncapture *:@assert u(setr(Z,v(TACS))/fn.room-has-cp, %l, %0)=th u(msg, %#, Error - '%0' is not a valid capture point in this room.) ;; @assert strmatch(%0, u(%qZ/fn.get-occupied-cp, %#))=th u(msg, %#, Error - You are not in control of that point.) ;; th [u(msg, %#, [getname(%#)] has given up control of capture point [ansi(h,ucstr(%0))] - [ansi(h,u(%qZ/fn.get-cp-stat, %l, %0, NAME))].)] [u(%qZ/fn.uncapture, %#, %l, ucstr(%0))]
CMD.UNCOVER [#44]: $!uncover:@break isdbref(setr(covered, get(%#/AUX`TEMP`COVERED)))=th u(v(TACS)/fn.uncover-from-coveree, %#, %q<covered>) ;; @break isdbref(setr(covering, get(%#/AUX`TEMP`COVERING)))=th u(v(TACS)/fn.uncover-from-coverer, %#, %q<covering>) ;; th u(msg, %#, Error - You are not covering anyone or being covered by anyone.)
CMD.UNFORGE [#44]: $!unforge *:@assert u(setr(Z, getobj(TACS))/fn.is-weaponsmith, %#)=th u(msg, %#, Who do you think you are\, MacGruber?) ;; @assert isdbref(%0)=th u(msg, %#, '%0' does not appear to be a real DBref#.) ;; @assert u(%qZ/fn.is-forged-weapon, %0)=th u(msg, %#, That is not a forged weapon object.) ;; @assert strmatch(%#, u(%qZ/fn.get-aux-stat, %0, created_by))=th u(msg, %#, [name(%0)] was not forged by you!) ;; @assert switch(u(%qZ/fn.get-aux-stat, %0, Owner), %#, 1, u(%qZ/fn.weapon-is-unused, %0))=th u(msg, %#, You can only unforge: a\) weapons made for yourself -or- b\) weapons made for others that have NOT been used yet.) ;; [u(msg, %#, Un-forging [name(%0)][switch(%#, u(%qZ/fn.get-aux-stat, %0, Owner),, %band refunding [u(%qZ/fn.get-aux-stat, %0, Original_Cost)] AP to [name(u(%qZ/fn.get-aux-stat, %0, Owner))])].)] [u(getobj(SMITH)/fn.unforge-weapon, %#, %0)]
CMD.UNJAM [#44]: $!unjam *:@assert u(setr(Z, getobj(TACS))/combat-ok, %#)=th u(msg, %#, You need to be COMBAT-OK to do that.) ;; @assert not(get(%#/pot`observe))=th u(msg, %#, You can't do that while your +POT status is set to Observe.) ;; @break eq(words(setr(A, u(%qZ/fn.match-avail-attack-by-name, %#, %0))), 0)=th u(msg, %#, Error - Could not find an attack matching '%0'.) ;; @break gt(words(%qA), 1)=th u(msg, %#, Error - Found multiple matches for attack '%0':%r[map(#lambda/strcat(space(3), u(%qZ/fn.get-attack-attrib-stat, \%0, NAME)), %qA, ,%r)]) ;; @assert u(%qZ/fn.is-disabled, %qA)=th u(msg, %#, That attack is not disabled\, no need to unjam it!) ;; th [u(msg, %#, [getname2(%#)] takes some time to unjam [poss(%#)] [u(%qZ/fn.get-attack-attrib-stat, %qA, NAME)] attack.)] [u(%qZ/fn.set-attack-attrib-stat, %qA, DISABLED, 0)]
CMD.VEHICLE-ACTION-STATION [#44]: $!actionstation:@assert u(setr(Z,v(TACS))/fn.is-in-vehicle, %#)=th u(msg, %#, You need to be in a vehicle.) ;; @break not(setr(STATION, u(%qZ/fn.get-vehicle-position, %L, %#)))=th u(msg, %#, You aren't stationed anywhere in this vehicle.) ;; th u(msg, %#, You are currently the '%q<STATION>' of this vehicle.)
CMD.VEHICLE-ACTION-STATION-LIST [#44]: $!actionstations:@assert u(setr(Z,v(TACS))/fn.is-in-vehicle, %#)=th u(msg, %#, You need to be in a vehicle.) ;; @pemit %#=[u(v(TACS)/fn.display-action-stations, %L, %#)]
CMD.WEAPONS [#44]: $!weapons:@assert [u(fn.is-admin,%#)]=th [u(msg,%#,You ain't no admin\, sucka!)] ;; @pemit %#=u(getobj(TACS)/fn.list-all-weapons)
CMD.WEAPONSMITH [#44]: $!weaponsmith:@assert u(setr(Z, getobj(TACS))/fn.is-weaponsmith, %#)=th u(msg, %#, Who do you think you are\, MacGyver?) ;; th [pemit(%#, u(getobj(SMITH)/fn.display-forged-weapons, %#))] [pemit(%#, u(getobj(SMITH)/fn.display-designs, %#))] [pemit(%#, u(getobj(SMITH)/fn.display-received-commissions, %#))]
CMD.WEAPONSMITH-ADMIN [#44]: $!weaponsmith *:@assert [u(fn.is-admin,%#)]=th [u(msg,%#,You ain't no admin\, sucka!)] ;; @assert [or(isdbref(setr(0,pmatch(%0))), isdbref(%0))]=th [u(msg,%#,Error: '%0' needs to be a player name or object DBref#.)] ;; th [pemit(%#, u(getobj(SMITH)/fn.display-forged-weapons, if(%q0, %q0, %0)))] [pemit(%#, u(getobj(SMITH)/fn.display-designs, if(%q0, %q0, %0)))] [pemit(%#, u(getobj(SMITH)/fn.display-received-commissions, if(%q0, %q0, %0)))]
CMD.WEAPONSMITH-DESIGN [#44]: $!weaponsmith/design *,*,*,*,*:@assert u(setr(Z, getobj(TACS))/fn.has-ability, %#, Weaponsmith)=th u(msg, %#, Who do you think you are\, MacGyver?) ;; @assert and(isint(%1), gte(%1, 0), lte(%1, 8))=th u(msg, %#, Error - Damage Level must be an integer between 0 and 8.) ;; @assert u(%qZ/fn.validate-stat, Attack-Type, setr(2, squish(%2)))=th u(msg, %#, Error - '%2' is not a valid Attack Type.) ;; @assert u(%qZ/fn.validate-stat, Damage-Type, setr(3, setunion(%3,)))=th u(msg, %#, Error - '%3' is not a valid Damage Type(s).) ;; @assert if(%4, u(%qZ/fn.validate-weaponsmith-effects, setr(4, setunion(%4, ))), 1)=th u(msg, %#, Error - '%4' is not a valid Effect(s).) ;; th [setr(0, u(setr(W, getobj(SMITH))/fn.add-design, %#))] [u(msg, %#, Created Weapon design #%q0.)] [u(%qW/fn.init-design, %#, %q0, u(%qZ/fn.super-secure, %0), %1, %q2, %q3, %q4)] ;; @assert strmatch(OK, before(setr(X, u(%qW/fn.validate-design, %#, %q0)), ^))=th u(msg, %#, Warning - This design is invalid: [after(%qX, ^)]. You will not be able to !forge it without edits.) ;; @assert lte(setr(2, u(%qW/fn.get-attack-design-cost, DESIGN`%#`%q0)), div(u(%qZ/fn.get-core-stat, %#, Current, TECH), 10))=th u(msg, %#, That design exceeds your abilities\, you will not be able to !forge it without edits.) ;;
CMD.WEAPONSMITH-EDIT-DESIGN [#44]: $!weaponsmith/edit */*=*:@assert u(setr(W, getobj(SMITH))/fn.has-design, %#, %0)=th u(msg, %#, Error - You don't have a Weapon Design with ID #%0.) ;; @assert t(match(NAME DAMAGE-LEVEL ATTACK-TYPE DAMAGE-TYPE EFFECT, %1))=th u(msg, %#, Error - '%1' is not a valid stat to edit. Use: NAME\, DAMAGE-LEVEL\, ATTACK-TYPE\, DAMAGE-TYPE\, or EFFECT) ;; @assert u(%qW/fn.validate-attack-design-value, %1, %2)=th u(msg, %#, Error - '%2' is an invalid [ucstr(%1)] value.) ;; th [u(%qW/fn.edit-attack-design, %#, %0, %1, %2)] [u(msg, %#, Updating Weapon Design #[ansi(h, %0)] [ucstr(%1)] to  [ansi(h, %2)])]
CMD.WEAPONSMITH-LIST-EFFECTS [#44]: $!weaponsmith/effects:@assert u(setr(Z, getobj(TACS))/fn.is-weaponsmith, %#)=th u(msg, %#, You are about as smithy as the average goon.) ;; @pemit %#=[header(Valid Weaponsmith Effects)]%r[table(map(FN.MAP-WEAPONSMITH-EFFECT, get(getobj(TACS_DB)/LIST.VALID-WEAPONSMITH-EFFECT),,|), 25, 78, |)]%r[header()]
CMD.WEAPONSMITH-REMOVE-DESIGN [#44]: $!weaponsmith/forget *:@assert u(setr(Z, getobj(TACS))/fn.has-ability, %#, Weaponsmith)=th u(msg, %#, Who do you think you are\, MacGyver?) ;; @assert u(setr(W, getobj(SMITH))/fn.has-design, %#, %0)=th u(msg, %#, You don't have a Weapon Design with that ID#.) ;; th [u(%qW/fn.remove-design, %#, %0)] [u(msg, %#, Removed Weapon Design #%0.)]
DB.FREE-ATTACKS [#44]: #8105
ERROR [#44`]: 
FN.BUILD-ATTACK-OBJECT [#44]: u(getobj(TACS)/fn.build-attack-object, %0, switch(before(%1, ^), v(DB.FREE-ATTACKS), [@@(FREEBIE)]%0, %0, [@@(SELF)]%0, [@@(CONTROL)]#$), [@@(No TARGET for now)], before(%1, ^), after(%1, ^), words(%2), if(%3, u(getobj(TACS)/fn.super-secure, after(%3,=)),), [@@(extra flags here)])
FN.DISPLAY-CHAIN [#44]: u(msg, %0, [getname2(%0)] unleashes a chained attack against [itemize(map(#lambda/getname2(\%0), %1,, |), |)], 1)
FN.IS-ADMIN [#44]: orflags(%0,Wr)
FN.IS-ADMIN-OR-TESTER [#44]: cor(orflags(%0,Wr), contains(v(list.testers), %0))
FN.MAP-WEAPONSMITH-EFFECT [#44]: %0 \([index(get(getobj(TACS_DB)/INFO_EFFECT_%0), ^, 2, 1)]\)
FN.REFACTOR-ATTACK-OBJECT [#44]: switch(%1, attack\/*, u(%4/fn.modify-attack-object-multi, %0, extra_flags=PULL damage_level=%2), miss, u(%4/fn.modify-attack-object-multi, %0, extra_flags=MISS), miss\/*, u(%4/fn.modify-attack-object-multi-pipe, %0, extra_flags=PULL MISS|damage_level=%2), chain, u(%4/fn.modify-attack-object-multi-pipe, %0, extra_flags=CHAIN|chain_list=%3), %0)
MSG [#44]: if(%2, remit(loc(%0),[ansi(h,Combat:)] %1), pemit(%0,[ansi(h,Combat:)] %1))
TACS [#44]: #645
TACS_DB [#44]: #641
USELOCK [#44]: or(u(fn.is-admin-or-tester, %#), hasattrp(%l, TACS))

